{"id":"4W3i2hyrJTVfcLq85rWgduVQ3y3BMzrSD4pVUCMqPpFhmXWpqxQ","title":"Hacker News: Front Page","displayTitle":"HN Front","url":"https://hnrss.org/frontpage?points=75","feedLink":"https://news.ycombinator.com/","isQuery":false,"isEmpty":false,"isHidden":false,"itemCount":11,"items":[{"title":"arXiv No Longer Accepts Computer Science Position or Review Papers Due to LLMs","url":"https://blog.arxiv.org/2025/10/31/attention-authors-updated-practice-for-review-articles-and-position-papers-in-arxiv-cs-category/","date":1762009085,"author":"dw64","guid":202,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45782136"},{"title":"SQLite concurrency and why you should care about it","url":"https://jellyfin.org/posts/SQLite-locking/","date":1762001943,"author":"HunOL","guid":201,"unread":true,"content":"<p>SQLite is a powerful database engine, but due to its design, it has limitations that should not be overlooked.</p><p>Jellyfin has used a SQLite-based database for storing most of its data for years, but it has also encountered issues on many systems. In this blog post, I will explain how we address these limitations and how developers using SQLite can apply the same solutions.</p><p>This will be a technical blog post intended for developers and everyone wanting to learn about concurrency.</p><p>Also Jellyfin's implementation of locking for SQLite should be fairly easy to be implemented into another EF Core application if you are facing the same issue.</p><p>SQLite is a file-based database engine running within your application and allows you to store data in a relational structure.\nOverall it gives your application the means of storing structured data as a single file and without having to depend on another application to do so.\nNaturally this also comes at a price. If your application fully manages this file, the assumption must be made that your application is the sole owner of this file, and nobody else will tinker with it while you are writing data to it.</p><p>So an application that wants to use SQLite as its database needs to be the only one accessing it.\nHaving established this fact, an important thought arises: if only a single write operation should be performed on a single file at a time, this rule must also apply to operations within the same application.</p><p>SQLite has a feature that tries to get around this limitation: the Write-Ahead-Log (WAL).\nThe WAL is a separate file that acts as a journal of operations that should be applied to an SQLite file.\nThis allows multiple parallel writes to take place and get enqueued into the WAL.\nWhen another part of the application wants to read data, it reads from the actual database, then scans the WAL for modifications and applies them on the fly.\nThis is not a foolproof solution; there are still scenarios where WAL does not prevent locking conflicts.</p><p>A transaction is supposed to ensure two things.\nModifications made within a transaction can be reverted, either when something goes wrong or when the application decides it should and optionally a transaction may also block other readers from reading data that is modified within a transaction.\nThis is where it gets spicy and we come to the real reason why I am writing this blog post.\nFor some reason on some systems that run Jellyfin when a transaction takes place the SQLite engine reports the database is locked and instead of waiting for the transaction to be resolved the engine refuses to wait and just crashes.\nThis seems to be a not uncommon issue and there are many reports to be found on the issue.</p><p>The factor that makes this issue so bad is that it does not happen reliably. So far we only have one team member where this can be (somewhat) reliably be reproduced which makes this an even worse a bug.\nFrom the reports this issue happens across all operating systems, drive speeds and with or without virtualization.\nSo we do not have any deciding factor identified that even contributes to the likelihood of the issue happening.</p><p>Having established the general theory on how SQLite behaves, we also have to look at the specifics of Jellyfins usage of SQLite.\nDuring normal operations on a recommended setup (Non-Networked Storage and preferably SSD) its unusual for any problems to arise, however the way Jellyfin utilises the SQLite db up to 10.11 is very suboptimal.\nIn versions prior to 10.11 Jellyfin had a bug in its parallel task limit which resulted in exponential overscheduling of library scan operations which hammered the database engine with thousands of parallel write requests that an SQLite engine is simply not able to handle.\nWhile most SQLite engine implementations have retry behavior, they also have timeouts and checks in place to prevent limitless waiting so if we stress the engine enough, it just fails with an error.\nThat and very long running and frankly unoptimized transactions could lead to the database just being overloaded with requests and flaking out.</p><p>Since we moved the codebase over to EF Core proper, we have the tools to actually do something about this as EF Core gives us a structured abstraction level.\nEF Core supports a way of hooking into every command execution or transaction by creating <a href=\"https://learn.microsoft.com/en-us/ef/core/logging-events-diagnostics/interceptors\" target=\"_blank\" rel=\"noopener noreferrer\">Interceptors</a>.\nWith an interceptor we can finally do the straight forward idea of just \"not\" writing to the database in parallel in a transparent way to the caller.\nThe overall idea is to have multiple strategies of locking. Because all levels of synchronization will inevitably come at the cost of performance, we only want to do it when it is really necessary.\nSo, I decided on three locking strategies:</p><ol></ol><p>As a default, the no-lock behavior does exactly what the name implies. Nothing. This is the default because my research shows that for 99% all of this is not an issue and every interaction at this level will slow down the whole application.</p><p>Both the optimistic and pessimistic behaviors use two interceptors—one for transactions and one for commands—and override  in .</p><h3>Optimistic locking behavior<a href=\"https://jellyfin.org/posts/SQLite-locking/#optimistic-locking-behavior\" aria-label=\"Direct link to Optimistic locking behavior\" title=\"Direct link to Optimistic locking behavior\" translate=\"no\">​</a></h3><p>Optimistic locking means to assume the operation in question will succeed and only handle issues afterwards. In essence this can be boiled down to \"Try and Retry and Retry ...\" for a set number of times until either we succeed with the operation or fail entirely.\nThis still leaves the possibility that we will not actually be able to perform a write, but the introduced overhead is far less than the Pessimistic locking behavior.</p><p>The idea behind how this works is simple: every time two operations try to write to the database, one will always win. The other will fail, wait some time, then retry a few times.</p><p>Jellyfin uses the  library perform the retry behavior and will only retry operations it will find have been locked due to this exact issue.</p><h3>Pessimistic locking behavior<a href=\"https://jellyfin.org/posts/SQLite-locking/#pessimistic-locking-behavior\" aria-label=\"Direct link to Pessimistic locking behavior\" title=\"Direct link to Pessimistic locking behavior\" translate=\"no\">​</a></h3><p>Pessimistic locking always locks when a write to SQLite should be performed. Essentially every time an transaction is started or a write operation on the database is done though EF Core, Jellyfin will wait until all other read operations are finished and then block all other operations may they be read or write until the write in question has been performed.\nThis however means, that Jellyfin can only ever perform a single write to the database, even if it would technically does not need to.</p><p>In theory, an application should have no issue reading from table \"Alice\" while writing to table \"Bob\" however to eliminate all possible sources of concurrency related locking, Jellyfin will only ever allow a single write performed on its database in this mode.\nWhile this will absolutely result in the most stable operation, it will undoubtedly also be the slowest.</p><p>Jellyfin uses a <a href=\"https://learn.microsoft.com/en-us/dotnet/fundamentals/runtime-libraries/system-threading-readerwriterlockslim\" target=\"_blank\" rel=\"noopener noreferrer\">ReaderWriterLockSlim</a> to lock the operations, that means we allow an unlimited number of reads to happen concurrently while only one write may ever be done on the database.</p><h3>The future Smart locking behavior<a href=\"https://jellyfin.org/posts/SQLite-locking/#the-future-smart-locking-behavior\" aria-label=\"Direct link to The future Smart locking behavior\" title=\"Direct link to The future Smart locking behavior\" translate=\"no\">​</a></h3><p>In the future we might also consider combining both modes, to get the best of both worlds.</p><p>Initial testing showed that with both modes, we had great success in handling the underlying issue. While we are not yet sure why this happens only on some systems when others work, we at least now have an option for users previously left out of using Jellyfin.</p><p>When I was researching this topic, I found many reports all over the internet facing the same error but nobody was able to provide a conclusive explanation whats really happening here.\nThere have been similar proposals made to handle it but there wasn't a \"ready to drop in\" solution that handles all the different cases or only code that required massive modifications to every EF Core query.\nJellyfin's implementation of the locking behaviors should be a copy-paste solution for everyone having the same issues as its using interceptors and the caller has no idea of the actual locking behavior.</p>","contentLength":7955,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45781298"},{"title":"Abandonware of the web: do you know that there is an HTML tables API?","url":"https://christianheilmann.com/2025/10/08/abandonware-of-the-web-do-you-know-that-there-is-an-html-tables-api/","date":1762001901,"author":"begoon","guid":200,"unread":true,"content":"<p>When people turn data into  tables using JavaScript, they either use the  methods (createElement() and the likes), but most of the time just append a huge string and use innerHTML, which always is a security concern. However, did you know that  tables also have an <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement\" title=\"\">old, forgotten </a> ? Using this one, you can loop over tables, create bodies, rows, cells, heads, footers, captions an summaries (yes,  tables have all of those) and access the table cells. Without having to re-render the whole table on each change. Check out the <a href=\"https://codepen.io/codepo8/pen/RNrVPzq?editors=1111\" title=\"\">Codepen</a> to see how you can create a table from a nested array:</p><div><table><tbody><tr><td><pre>let table \nlet b  document.\nlet t  document.\nb.t\ntable.rowri\n  let r  t.ri\n  row.li\n    let c  r.i\n    c. l</pre></td></tr></tbody></table><p>let table = [\n  ['one','two','three'],\n  ['four','five','six']\n];\nlet b = document.body;\nlet t = document.createElement('table');\nb.appendChild(t);\ntable.forEach((row,ri) =&gt; {\n  let r = t.insertRow(ri);\n  row.forEach((l,i) =&gt; {\n    let c = r.insertCell(i);\n    c.innerText = l;  \n  })\n});</p></div><p>You can then access each table cell with an index (with t being a reference to the table):</p><div><table><tbody><tr><td><pre>console.t..</pre></td></tr></tbody></table><p>console.log(t.rows[1].cells[1]);\n// =&gt; &lt;td&gt;five&lt;/td&gt;</p></div><p>You can also delete and create cells and rows, if you want to add a row to the end of the table with a cell, all you need to do is:</p><div><table><tbody><tr><td><pre>t.\nt..\nt...</pre></td></tr></tbody></table><p>t.insertRow(-1);\nt.rows[2].insertCell(0);\nt.rows[2].cells[0].innerText = 'foo';</p></div><p>There are a few things here that are odd – adding a -1 to add a row at the end for example – and there seems to be no way to create a TH element instead of a TD. All table cells are just cells.</p><p>However, seeing how much of a pain it is to create tables, it would be fun to re-visit this  and add more functionality to it. We did add a lot of things to  forms, like formData and the change event, so why not add events and other features to tables. That way they’d finally get the status as data structures and not a hack to layout content on the web.</p>","contentLength":1911,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45781293"},{"title":"You can't refuse to be scanned by ICE's facial recognition app, DHS document say","url":"https://www.404media.co/you-cant-refuse-to-be-scanned-by-ices-facial-recognition-app-dhs-document-says/","date":1761987534,"author":"nh43215rgb","guid":199,"unread":true,"content":"<div>Photos captured by Mobile Fortify will be stored for 15 years, regardless of immigration or citizenship status, the document says.</div>","contentLength":130,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45780228"},{"title":"Hard Rust requirements from May onward","url":"https://lists.debian.org/debian-devel/2025/10/msg00285.html","date":1761982300,"author":"rkta","guid":198,"unread":true,"content":"<pre>Hi all,\n\nI plan to introduce hard Rust dependencies and Rust code into\nAPT, no earlier than May 2026. This extends at first to the\nRust compiler and standard library, and the Sequoia ecosystem.\n\nIn particular, our code to parse .deb, .ar, .tar, and the\nHTTP signature verification code would strongly benefit\nfrom memory safe languages and a stronger approach to\nunit testing.\n\nIf you maintain a port without a working Rust toolchain,\nplease ensure it has one within the next 6 months, or\nsunset the port.\n\nIt's important for the project as whole to be able to\nmove forward and rely on modern tools and technologies\nand not be held back by trying to shoehorn modern software\non retro computing devices.\n\nThank you for your understanding.\n-- \ndebian developer - deb.li/jak | jak-linux.org - free software dev\nubuntu core developer                              i speak de, en\n</pre>","contentLength":874,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45779860"},{"title":"The profitable startup","url":"https://linear.app/now/the-profitable-startup","date":1761967084,"author":"doppp","guid":197,"unread":true,"content":"<p>For years, startups have been taught to prioritize growth over everything else. Profitability was seen as unambitious or even wrong – something to worry about when you hit scale. Why focus on profits when money and valuations were easy to come by?</p><p>But that thinking was always flawed.</p><p>Profitability isn't unambitious; it's controlling your own destiny. It means you don't have to rely on investors for survival. It means you can focus on your unaltered vision and mission. And it means you as a founder decide the pace of growth. And once you experience it, it's hard to imagine doing things any other way.</p><p><a href=\"https://paulgraham.com/ramenprofitable.html\">Paul Graham famously wrote about \"ramen profitability\"</a> – the point where a founding team could survive without external funding. He argued this made startups more attractive to investors, showing they could get customers to pay, were serious about building valuable products, and were disciplined with expenses.</p><p>Graham wrote his essay in 2009. I’d argue that we now live in a world where it’s not just easier to get ramen profitable, but traditionally profitable – while also growing fast.</p><p>At Linear we didn't set out to be profitable but kind of stumbled into it. We believed that to win this market we really needed to build a superior tool. The best way we knew how to do that was to keep the team small and focused. And when we launched after a year in private beta, almost all of our 100 beta users converted to paid customers. To our surprise, we realized it wouldn't take that long to become profitable if we kept the costs in check. Twelve months after launch, we hit profitability, and we've stayed profitable ever since.</p><p>I don't know why hiring massive teams ever became the norm. In my own experience, small teams always delivered better quality, and faster. Maybe it's fear of missing out if you don't grow the team fast. Maybe it's investors whispering that your team is \"understaffed compared to benchmarks.\" Being understaffed compared to benchmarks almost always should be a source of pride, not a problem. People should be surprised how small your team is, not how big it is.</p><p>What holds you back is rarely team size – it's the clarity of your focus, skill and ability to execute. Larger teams mean slower progress, more management overhead, more meetings, more opinions, and usually dilution of vision and standards. Yet growing the team has somehow become a symbol of success.</p><p>At Linear, we hired our first employee after six months and roughly doubled the team each year. With each hire, we make sure they truly elevate the team. We don't set out to hire ten engineers – we hire the next  engineer. This intentional approach has allowed us to maintain both quality and culture.</p><p>The most underrated thing about profitability is how much peace of mind it gives you. Once you're profitable, you stop worrying about survival and focus on what really matters: building something great. Building the way you want. Instead of optimizing for the next fundraising round, you optimize for value creation.</p><p>While profitability might not come quickly for every startup, I believe it's achievable sooner than most think. If you're creating a new market, or truly require massive scale like a social network, or significant upfront investment like a hardware company, it might take longer. But if you're in a category where there isn't hard upfront investment, and you get some level of product-market fit with customers willing to pay, you can probably be profitable. You can decide to become profitable. And usually, it's a decision about how much and how fast you hire.</p><p>Revenue per employee is one of the clearest ways to see you’re hiring appropriately. While some of the best public companies benchmark at $1-2M per employee, for startups it's not unreasonable to target the range of $500k-$1M per employee.</p><p><strong>Understand Your Risk Profile</strong></p><p>Are you building something highly speculative where you're not sure if there's a market for it, or are you building something that already has a market but with a different take on it? In the former case profitability takes longer, but in the latter it could happen right away. Most software today, especially in the B2B space, is about building a modern version of something existing.</p><p><strong>Hire Intentionally and Slower</strong></p><p>For most software startups, ten people before product-market fit should be your ceiling, not your target. After PMF, every hire should address a specific, pressing need – not just fill out an org chart. At Linear, our deliberately slow headcount growth forced us to be selective, which meant making better hires. It also protected our culture, since rapid hiring often dilutes the very things that made your startup special in the first place. When you hire less, you naturally hire better.</p><p>Being profitable doesn't mean you have to be anti-investors. It means you have that choice, and investors are quite interested in profitable companies that also grow fast. You can raise more, less, or nothing. You can wait for the right timing, the right partner, or fund. For most ambitious startups, it can still be a good idea to raise something even if you could get by bootstrapping. Investors can still be helpful, and the additional cash balance can help you to make larger investments, or acquisitions.</p><p>The point is that you can be and are allowed to be profitable as a startup. It's not a bad thing, it's not an oxymoron or as hard as people make it out to be. The secret is that a lot of successful companies actually were quite profitable early on, they just didn't talk about it. When you're profitable, you make decisions based on what's best for your customers and your product, not what's best for impressing investors.</p><p>I didn't set out to build a profitable startup. But once I got there, I realized I wouldn't want to build a company any other way.</p>","contentLength":5825,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45778984"},{"title":"A theoretical way to circumvent Android developer verification","url":"https://enaix.github.io/2025/10/30/developer-verification.html","date":1761942042,"author":"sleirsgoevy","guid":195,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45776269"},{"title":"Myths Programmers Believe about CPU Caches (2018)","url":"https://software.rajivprab.com/2018/04/29/myths-programmers-believe-about-cpu-caches/","date":1761871616,"author":"whack","guid":190,"unread":true,"content":"<p><a href=\"https://en.wikipedia.org/wiki/Distributed_computing\" target=\"_blank\" rel=\"noopener\">distributed-system-architecture</a><a href=\"https://en.wikipedia.org/wiki/Isolation_(database_systems)#Isolation_levels\" target=\"_blank\" rel=\"noopener\">database-isolation-levels</a><a href=\"https://hackernoon.com/eventual-vs-strong-consistency-in-distributed-databases-282fdad37cf7\" target=\"_blank\" rel=\"noopener\">strong-vs-eventual consistency</a></p><p><a href=\"https://docs.oracle.com/javase/tutorial/essential/concurrency/atomic.html\" target=\"_blank\" rel=\"noopener\">volatiles</a><a href=\"http://tutorials.jenkov.com/java-concurrency/volatile.html\" target=\"_blank\" rel=\"noopener\">read/written all the way to main memory</a></p><p><a href=\"https://stackoverflow.com/questions/23593061/volatile-keyword-in-multicore-vs-single-processor\" target=\"_blank\" rel=\"noopener\">even single-core systems are at risk of concurrency bugs</a></p><h2></h2><p><a href=\"https://en.wikipedia.org/wiki/Consistency_model\" target=\"_blank\" rel=\"noopener\">great wealth of nuance</a></p><p><a rel=\"noopener\" href=\"http://tutorials.jenkov.com/java-concurrency/volatile.html\" target=\"_blank\">this tutorial</a></p><p><a rel=\"noopener\" href=\"https://en.wikipedia.org/wiki/MESI_protocol\" target=\"_blank\">MESI protocol</a></p><ol><li><ol></ol></li><li><ol></ol></li><li><ol></ol></li><li><ol></ol></li></ol><ol><li><ol><li>The state of the cache-line is set to M, since it is now modified</li></ol></li></ol><h3></h3><ol><li><ol></ol></li><li><ol></ol></li></ol><ol></ol><h3></h3><ol><li><ol></ol></li></ol><h3></h3><ol></ol><h3></h3><ol></ol><p><a href=\"https://software.intel.com/en-us/articles/how-memory-is-accessed\" target=\"_blank\" rel=\"noopener\">multi-processor system</a></p><h2></h2><p><a rel=\"noopener\" href=\"https://stackoverflow.com/questions/4633866/is-volatile-expensive\" target=\"_blank\">immediately trigger cache reads/writes instead</a></p>","contentLength":371,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45767178"},{"title":"Introducing architecture variants","url":"https://discourse.ubuntu.com/t/introducing-architecture-variants-amd64v3-now-available-in-ubuntu-25-10/71312","date":1761820500,"author":"jnsgruk","guid":188,"unread":true,"content":"<!DOCTYPE html>","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45758392"},{"title":"Hacking India's largest automaker: Tata Motors","url":"https://eaton-works.com/2025/10/28/tata-motors-hack/","date":1761701516,"author":"EatonZ","guid":187,"unread":true,"content":"<ul><li>2 exposed AWS keys on public-facing websites revealed 70+ TB of sensitive information and infrastructure across hundreds of buckets.</li><li>Pointless AWS key encryption easily defeated.</li><li>Tableau backdoor made it possible to log in as anyone without a password, including the server admin. This exposed countless internal projects, financial reports, and dealer dashboards.</li><li>Exposed Azuga API key compromised test drive fleet management system.</li></ul><p>If you are in the US and ask your friends and family if they have heard of “Tata Motors”, they would likely say no. However, if you go overseas, Tata Motors and the Tata Group in general are a massive, well-known conglomerate. Back in 2023, I took my hacking adventures overseas and found many vulnerabilities with Tata Motors. This post covers 4 of the most impactful findings I discovered that I am finally ready to share today. Let’s dive in!</p><p><strong>Note that all secrets/credentials shown have been rotated</strong>, meaning they are no longer valid and cannot be used anymore. Additionally, no substantial amounts of data were downloaded as part of any testing, nor was there any obvious evidence of malicious access.</p><h2><strong>AWS Keys in E-Dukaan Marketplace</strong></h2><p><a href=\"https://edukaan.cv.tatamotors/\" target=\"_blank\" rel=\"noreferrer noopener\">E-Dukaan</a> is a Tata Motors site where their customers can buy spare parts for their vehicles. It’s a typical E-Commerce site, but it had a dark secret!</p><p>Can you see it? Right there, in plaintext, are AWS keys. For those unfamiliar, you NEVER EVER want to expose these because people can use them to download all your files stored on Amazon, upload malicious content, rack up massive bills, etc.</p><p>Intrigued, I put them into S3 Browser to see what it unlocked access to. The answer was.. basically everything. A long list of buckets packed with sensitive information. Here’s a few examples:</p><p><strong>A customer database backup?</strong> Check ✅</p><p><strong>Customer lists and market intelligence?</strong> Yup ✅</p><p><strong>Hundreds of thousands of invoices for E-Dukaan containing customer information, like PAN?</strong> Of course ✅</p><p> Absolutely ✅ (about 40 GB worth of reports in here)</p><p>You may be wondering, where was this AWS keyset actually used? What made it worth the risk of exposing so much? Answer: to download a 4 KB file containing tax codes:</p><h2><strong>Decryptable AWS Keys in FleetEdge</strong></h2><p>Finding the AWS keys in E-Dukaan was so easy that it felt like cheating. This next one was more challenging (but not by much).</p><p><a href=\"https://fleetedge.home.tatamotors/\" target=\"_blank\" rel=\"noreferrer noopener\">FleetEdge</a> is Tata Motors’ fleet management/tracking solution. More info is <a href=\"https://fleetedge.tatamotors.com/\" target=\"_blank\" rel=\"noreferrer noopener\">here</a>. Looking at the API calls that are executed on site load as a guest user, one immediately stuck out:</p><p>Right there in the response is another set of AWS keys, but this time they were not plaintext – they appeared to be encrypted. A quick search of a decrypt method turned up the exact code, and setting a breakpoint there was enough to reveal the contents:</p><p><a href=\"https://eaton-works.com/2025/08/18/intel-outside-hack/\" target=\"_blank\" rel=\"noreferrer noopener\">As recently seen with Intel</a>, there seems to be a trend where developers will do this pointless client-side decryption. When the client has the key, it’s strange that anyone would think that would be secure. Maybe these devs knew what the E-Dukaan team was doing and wanted to (try) doing things a little better?</p><p>This set of AWS keys has a similarly serious impact. There was another long list of new buckets you could access. At one point, S3 Browser had estimated  in one bucket before it crashed. Here’s a few examples:</p><p>Fleet insights – this is where 70 TB+ of data was found. There was some datalake with files going back to 1996!</p><p>You also had write access to some websites. You could easily slip in some malware on the frontpage and wreak some havoc.</p><h2><strong>Backdoor admin access to Tableau</strong></h2><p> This flaw is not believed to be linked to Tableau itself and instead was introduced by Tata Motors.</p><p>Let’s go back to E-Dukaan now. Turns out, it’s the gift that keeps on giving. Poking around the source code of the website, I came across some interesting code:</p><p>The first obvious issue was the username and password in the comments. If you look closer, you can see an HTTP call to get a “trusted token”. Crucially, it only needs username and site name (no password). Thanks to the code comment, we had a username to try. Performing the HTTP POST manually yielded a token!</p><p>When you plug that into the infoviz URL like the code does, you will be redirected to Tableau!</p><p>But there is more fun to be had. This user didn’t have access to much. Since we essentially had a backdoor into Tableau needing only username, we could in theory log in as anyone. One of the cards had the server admin as the owner, and it was possible to get the username that way:</p><p>With that in hand, I went through the same process of getting a token, and then I had total control over Tableau with access to everything. I didn’t dig too deep after this since it was a lot of sensitive corporate stuff, and I had proven the vulnerability at this point.</p><p><a href=\"https://www.azuga.com/\" target=\"_blank\" rel=\"noreferrer noopener\">Azuga</a> is a fleet management platform. Tata Motors used it for their test drive website, presumably to keep tabs on where their cars are. Right there in the JS code was the Azuga token that should never have left the server. A quick API test was enough to confirm it was valid, and that is where I wrapped things up.</p><p>All 4 issues were reported to Tata Motors through CERT-IN. Tata Motors was a bit slow in rotating the AWS keys. Given what was exposed, I had hoped they would have done it faster.</p><ul><li> Reported. A response is received shortly after confirming they will take action with the concerned authority.</li><li> I request an update.</li><li> Tata Motors shared with CERT-IN (who then shared with me) that the issues are remediated.</li><li> I confirm  issues were remediated and the AWS keys were still present on the websites, and active.</li><li> After no updates and finding the AWS issues still not remediated, I send over some more specific steps on what must be done.</li><li> They confirm receipt and are working on taking action. After this date and up until , there were various back and forth emails trying to get Tata Motors to revoke the AWS keys. I am not sure if something was lost in translation, but it took a lot of pestering and specific instructions to get it done.</li></ul><h2><strong>India’s largest automaker should be more secure</strong></h2><p>Compared to some of my other recent hacks, these weren’t anything super sophisticated. You just had to know where to look. Secrets leak all the time, but the impact is often tempered by the secret having limited access. In this case, having 2 sets of AWS keys leak with access to so much is incredibly concerning. When buying a car, you should be able to trust the automaker will take reasonable actions to keep your data secure. I hope Tata Motors does better in the future – someone else would have absolutely discovered these vulnerabilities at some point, and that would have been a much darker story.</p>","contentLength":6678,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45741569"},{"title":"Active listening: the Swiss Army Knife of communication","url":"https://togetherlondon.com/insights/active-listening-swiss-army-knife","date":1761565204,"author":"lucidplot","guid":186,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45719829"}],"tags":["dev","hn"]}