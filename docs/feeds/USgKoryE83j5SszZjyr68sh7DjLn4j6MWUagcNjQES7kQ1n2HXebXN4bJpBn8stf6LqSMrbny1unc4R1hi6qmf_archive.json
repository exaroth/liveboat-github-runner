{"id":"USgKoryE83j5SszZjyr68sh7DjLn4j6MWUagcNjQES7kQ1n2HXebXN4bJpBn8stf6LqSMrbny1unc4R1hi6qmf","title":"top scoring links : golang","displayTitle":"Reddit - Go","url":"https://www.reddit.com/r/golang/top/.rss?sort=top&t=day&limit=6","feedLink":"https://www.reddit.com/r/golang/top/?sort=top&t=day&limit=6","is_query":false,"items":[{"title":"Just an(other) async task library","url":"https://www.reddit.com/r/golang/comments/1hpq5fq/just_another_async_task_library/","date":1735573938,"author":"/u/svaloumas","unread":true,"content":"<!-- SC_OFF --><div class=\"md\"><p>iocast is a zero-dependency Go library designed to provide a simple API for running async tasks right in your code. It is intentionally kept minimal to ensure ease of use and integration.</p> <p>I&#39;ve only started working on it a couple of days ago as an Xmas holiday project, so please don&#39;t consider it bulletproof yet :) Any suggestions or feedback is more than welcome.</p> <p>Currently, it supports:</p> <ul> <li>Using custom structs as arguments in your tasks, leveraging generics.</li> <li>Selecting your preferred return types for your task results.</li> <li>Task context awareness.</li> <li>Retry attempts for each task.</li> <li>Running tasks as a pipeline.</li> <li>A database interface for optionally storing task results.</li> <li>Scheduling tasks to run at specific times.</li> </ul> <p>The database interface includes a single method, making it easy to integrate with the backend of your choice.</p> <p>This project was inspired by my earlier experience with <a href=\"https://github.com/svaloumas/valet\">valet</a>, which is quite similar in terms of semantics, but it aims to offer a lighter and more integrated solution.</p> <p>Thank you in advance for checking it out.</p> <p>GitHub: <a href=\"https://github.com/svaloumas/iocast\">iocast</a></p> <p>Examples: <a href=\"https://github.com/svaloumas/iocast/tree/main/_example\">Usage Examples</a></p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/svaloumas\"> /u/svaloumas </a> <br/> <span><a href=\"https://www.reddit.com/r/golang/comments/1hpq5fq/just_another_async_task_library/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1hpq5fq/just_another_async_task_library/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"What are some good open source Golang websites?","url":"https://www.reddit.com/r/golang/comments/1hpnpja/what_are_some_good_open_source_golang_websites/","date":1735566937,"author":"/u/GrandAd5084","unread":true,"content":"<!-- SC_OFF --><div class=\"md\"><p>I&#39;m a beginner in web development and first I did some web development with javascript as backend language but now I am switching to go for backend.</p> <p>I want to know some industry standards to follow while writing go code in web development.</p> <p>Can anyone suggest me some good open source Golang websites code, so I can understand how it is used in web development.</p> <p>Any help is appreciatedðŸ™Œ</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/GrandAd5084\"> /u/GrandAd5084 </a> <br/> <span><a href=\"https://www.reddit.com/r/golang/comments/1hpnpja/what_are_some_good_open_source_golang_websites/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1hpnpja/what_are_some_good_open_source_golang_websites/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"My implementation of Redis in Golang","url":"https://www.reddit.com/r/golang/comments/1hpnp9p/my_implementation_of_redis_in_golang/","date":1735566914,"author":"/u/KingBig9811","unread":true,"content":"<!-- SC_OFF --><div class=\"md\"><p>I am made my own Redis server in Golang including my own RESP and RDB parser. It supports features like replication, persistence. I am still new to backend and Golang so i want feedback about anything that comes to your mind, be it code structuring or optimizations. <a href=\"https://github.com/vansh845\">https://github.com/vansh845</a></p> <p>Thank you.</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/KingBig9811\"> /u/KingBig9811 </a> <br/> <span><a href=\"https://www.reddit.com/r/golang/comments/1hpnp9p/my_implementation_of_redis_in_golang/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1hpnp9p/my_implementation_of_redis_in_golang/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"What to expect from Go 1.24 - Part 1","url":"https://www.reddit.com/r/golang/comments/1hpl65g/what_to_expect_from_go_124_part_1/","date":1735557619,"author":"/u/ByteVoyagerX","unread":true,"content":"<table> <tr><td> <a href=\"https://www.reddit.com/r/golang/comments/1hpl65g/what_to_expect_from_go_124_part_1/\"> <img src=\"https://external-preview.redd.it/yrzVGKSr3TTZHEGj9EQwywT7t_WxsbNLK1NbqQBGqoY.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=940ad608ba263b9081c040d6f5b267f3d60b03de\" alt=\"What to expect from Go 1.24 - Part 1\" title=\"What to expect from Go 1.24 - Part 1\" /> </a> </td><td> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/ByteVoyagerX\"> /u/ByteVoyagerX </a> <br/> <span><a href=\"https://golangnugget.com/p/what-to-expect-from-go-1-24-part-1\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1hpl65g/what_to_expect_from_go_124_part_1/\">[comments]</a></span> </td></tr></table>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Lightweight blogging package?","url":"https://www.reddit.com/r/golang/comments/1hpa218/lightweight_blogging_package/","date":1735517799,"author":"/u/bio_risk","unread":true,"content":"<!-- SC_OFF --><div class=\"md\"><p>Has anyone written (or come across) a lightweight blogging platform written in Go? Desired features (descending priority order):</p> <ul> <li><p>renders markdown files</p></li> <li><p>provides simple navigation</p></li> <li><p>uses LetsEncrypt</p></li> </ul> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/bio_risk\"> /u/bio_risk </a> <br/> <span><a href=\"https://www.reddit.com/r/golang/comments/1hpa218/lightweight_blogging_package/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1hpa218/lightweight_blogging_package/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"How I used sqlc to manage a persistent game world database for my MMO tutorial series","url":"https://www.reddit.com/r/golang/comments/1hp553o/how_i_used_sqlc_to_manage_a_persistent_game_world/","date":1735504522,"author":"/u/Saltytaro_","unread":true,"content":"<table> <tr><td> <a href=\"https://www.reddit.com/r/golang/comments/1hp553o/how_i_used_sqlc_to_manage_a_persistent_game_world/\"> <img src=\"https://external-preview.redd.it/Q8ilY9i8bG4uowqfFVk5WqQ8UlR62dYS1tLc-k5gU6M.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=72e45b590f58007ecd5fb022ca913606345eb3e1\" alt=\"How I used sqlc to manage a persistent game world database for my MMO tutorial series\" title=\"How I used sqlc to manage a persistent game world database for my MMO tutorial series\" /> </a> </td><td> <!-- SC_OFF --><div class=\"md\"><p>This is part #5 of my tutorial series showing how to make an MMO from scratch using Go and the Godot game engine. This one is particularly interesting because it goes through how to set up a database using sqlc and handwritten queries. This lesson, along with all the others, also comes in a written format on my website: <a href=\"https://www.tbat.me/projects/godot-golang-mmo-tutorial-series\">https://www.tbat.me/projects/godot-golang-mmo-tutorial-series</a></p> <p>Hope this is interesting or useful to some people!</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Saltytaro_\"> /u/Saltytaro_ </a> <br/> <span><a href=\"https://youtu.be/M__viodzggc?si=vVqgZoYakqBYGQZQ\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1hp553o/how_i_used_sqlc_to_manage_a_persistent_game_world/\">[comments]</a></span> </td></tr></table>","flags":null,"enclosureUrl":"","enclosureMime":""}]}