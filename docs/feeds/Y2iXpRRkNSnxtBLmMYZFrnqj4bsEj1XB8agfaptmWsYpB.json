{"id":"Y2iXpRRkNSnxtBLmMYZFrnqj4bsEj1XB8agfaptmWsYpB","title":"vladkens.cc","displayTitle":"Dev - vladkens","url":"https://vnotes.pages.dev/atom.xml","feedLink":"https://vladkens.cc/","isQuery":false,"isEmpty":false,"isHidden":false,"itemCount":2,"items":[{"title":"From iTerm To WezTerm","url":"https://vladkens.cc/from-iterm-to-wezterm/","date":1736380800,"author":"Unknown","guid":676,"unread":true,"content":"<p>For many years, I used <a rel=\"noopener\" target=\"_blank\" href=\"https://github.com/gnachman/iTerm2\">iTerm2</a> as my main terminal emulator and probably spent hundreds of hours in it. Overall, I was satisfied with it, despite some strange recent updates like adding AI features, KeyChain integration, and <a rel=\"noopener\" target=\"_blank\" href=\"https://news.ycombinator.com/item?id=42579472\">security vulnerabilities</a>.</p><p>In recent years, new terminal emulators have appeared. I tried using them mainly for testing <a rel=\"noopener\" target=\"_blank\" href=\"https://github.com/vladkens/macmon\">macmon</a>. A couple of years ago, I tried switching to <a rel=\"noopener\" target=\"_blank\" href=\"https://github.com/kovidgoyal/kitty\">kitty</a>, which was faster due to GPU acceleration. However, it required too much customization and still looked very non-native for macOS. GPU acceleration was added to iTerm as well, so I stayed with it.</p><p>I also tried <a rel=\"noopener\" target=\"_blank\" href=\"https://github.com/alacritty/alacritty\">Alacritty</a>, but it is very basic and lacks the features I need. Recently, I tested <a rel=\"noopener\" target=\"_blank\" href=\"https://github.com/ghostty-org/ghostty\">Ghostty</a>, which has gained huge attention – it has nice defaults, but its RAM usage is concerning (around 250MB per empty tab). Currently, it also lacks <a rel=\"noopener\" target=\"_blank\" href=\"https://github.com/ghostty-org/ghostty/issues/189\">buffer search</a>, which makes the terminal useless for me.</p><p>I heard a lot of positive feedback about <a rel=\"noopener\" target=\"_blank\" href=\"https://github.com/wez/wezterm\">WezTerm</a> from <a rel=\"noopener\" target=\"_blank\" href=\"https://github.com/bobuk\">bobuk</a>. So I decided to try it out and use it for some time – and I am very satisfied with it.</p><p>The next part of the article will be about how to make WezTerm understandable for iTerm users to try it or switch completely.</p><p>WezTerm can be installed from Homebrew:</p><p>When you first open WezTerm, it looks plain, non-native, and not very functional. But actually, it has everything you need. This is because WezTerm is cross-platform, unlike iTerm2, so the author left minimal default settings, leaving the rest of the configuration to the user. My goal is to achieve a similar experience in WezTerm as I had in iTerm.</p><p>WezTerm does not have a graphical interface for configuration, and the setup is done through a Lua file (this is unusual for me, but Vim users are familiar with it). The configuration file can be located at  or <code>~/.config/wezterm/wezterm.lua</code>. I prefer the second path because it is where <a rel=\"noopener\" target=\"_blank\" href=\"https://github.com/fish-shell/fish-shell\">Fish</a> and <a rel=\"noopener\" target=\"_blank\" href=\"https://github.com/starship/starship\">starship</a> store configs too.</p><p>Create a configuration file:</p><pre data-lang=\"sh\"><code data-lang=\"sh\"></code></pre><p>And then add the boilerplate code for configuration:</p><pre data-lang=\"lua\"><code data-lang=\"lua\"></code></pre><p>First, I want to change the default font, its size, and disable ligatures (because it's important to see the actual characters in case of some logs).</p><pre data-lang=\"lua\"><code data-lang=\"lua\"></code></pre><p>Save the file, and the changes should be applied immediately (yes, no reload required!).</p><p>Next, I want to change the theme and set it to follow the current system theme automatically. For the past year, I have been using <a rel=\"noopener\" target=\"_blank\" href=\"https://github.com/catppuccin/catppuccin\">Catppuccin</a> themes, and I am very happy with them. They rarely have issues where some text colors blend with the background. To make the theme switch automatically based on the current system theme, we need to write a small Lua function (I copied it from the documentation):</p><pre data-lang=\"lua\"><code data-lang=\"lua\"></code></pre><p>I forgot to mention that the Catppuccin theme, like many other popular themes, is pre-installed in WezTerm, so you don't need to install it separately like in iTerm, which is very cool. Of course, you can also set up <a rel=\"noopener\" target=\"_blank\" href=\"https://wezfurlong.org/wezterm/config/appearance.html#defining-your-own-colors\">your own colors</a>.</p><p>The default padding also seems a bit large, so let's make it smaller. I also had a Blinking Line Cursor (I don't remember if this is the default or not in iTerm). Let's set both configurations:</p><pre data-lang=\"lua\"><code data-lang=\"lua\"></code></pre><p>In iTerm, I used the Minimal theme to save vertical space for tabs. We can do the same in WezTerm (the default tabs don't look very good). Also possible to add some transparency and blur to the window. I didn't use this in iTerm, but let's try it now:</p><pre data-lang=\"lua\"><code data-lang=\"lua\"></code></pre><p>In iTerm, I usually set large values for Cols/Rows to make the start window bigger. This approach is a bit outdated, so let's make the window open in full screen when the terminal starts.</p><pre data-lang=\"lua\"><code data-lang=\"lua\"></code></pre><p>Finally, the most important part is setting up hotkeys – it's hard to give up what you've been used to for years. An important thing for me is Split Panels with  / .  should close the current active panel, not the whole tab.  – clear the current screen.  /  for start/end of the line. I think these are all defaults from iTerm, so let's make them the same in WezTerm:</p><pre data-lang=\"lua\"><code data-lang=\"lua\"></code></pre><p>WezTerm also has a Command Execution menu. I haven't used it much yet, but just in case, I bind it to the same keys as in VSCode / Zed – .</p><p><em>Note: In the configuration, the  value is case-sensitive, so  and  are different things (basically  is the same as ). I initially got confused with this.</em></p><p>Overall, I am very satisfied with WezTerm and have fully switched to using it daily. One cool feature I want to mention is the quick connect to servers in Known hosts via SSH (Command Palette → type server name → Enter OR Nav Bar → Shell → Click on server name). WezTerm also has <a rel=\"noopener\" target=\"_blank\" href=\"https://wezfurlong.org/wezterm/recipes/workspaces.html\">Workspaces</a> – an alternative to tmux, but I haven't used it actively yet.</p><p>Here a <a rel=\"noopener\" target=\"_blank\" href=\"https://gist.github.com/vladkens/f2ae7c374c1752c4b1581c5e7dffa900\">gist</a> with the final config from this article.</p>","contentLength":4549,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"2024 In Review","url":"https://vladkens.cc/2024-in-review/","date":1735689600,"author":"Unknown","guid":675,"unread":true,"content":"<p>I have never written an annual report on my work before, but since I also spend time on open source projects, I decided to write one (maybe it will become a tradition).</p><p>The main change in my work was the active use of Rust in the second half of the past year. I mainly write in Rust where I used to write in Go. Overall, the language is more complex than Go and sometimes confusing with the borrow checker, but in general, it is quite convenient to write – I can't say that the speed of writing code significantly decreases compared to other languages – in general, the approaches that need to be used are roughly the same for all languages.</p><ul><li>crates ecosystem – many libraries available and can be installed in one command</li><li>single binary file and low memory consumption</li><li>ability to write applications of various directions (web-app, tui, gui, parsers, etc.)</li></ul><p>What I don't like about Rust:</p><ul><li>a large number of sub-dependencies for web projects (any project on axum will contain 200+ dependencies)</li><li>use of C-binding in \"core\" libraries like rust-tls (ring) – complicates cross-compilation because you have to maintain a C toolchain as well (fixed through Zig build, but it looks monstrous)</li></ul><p>It's nice to write various parsers in Rust, and then they can be coolly parallelized (with <a rel=\"noopener\" target=\"_blank\" href=\"https://docs.rs/rayon/latest/rayon/\">rayon</a> or <a rel=\"noopener\" target=\"_blank\" href=\"https://docs.rs/tokio/latest/tokio/fs/index.html\">tokio</a>), in Go I had a problems with this due to immutable strings and lack of GC control.</p><p>The main languages remained the same: Python, NodeJS/TypeScript. I also actively used NextJS on several projects, overall I was satisfied – it's faster and easier to write frontends, but it's quite difficult to find problem's solutions sometimes (many Github issues, often they are open, and the comments contain answers that no longer work).</p><p>The main fail of the year in the NodeJS ecosystem is the update of ESLint from 8 -&gt; 9 – completely incompatible API with all existing plugins, the configuration file became larger and more complex – it's not clear why the authors made this diversion. I also tried <a rel=\"noopener\" target=\"_blank\" href=\"https://biomejs.dev\">Binome</a> as an alternative to ESLint / Prettier, but it's completely different and you need to redo a lot, and not everything you need is available at the moment, I continue to monitor this project.</p><p>I also tried Zig, but didn't write anything serious. Personally, I didn't understand why this language is needed. At the time I tried it, there was no even package manager yet. Obviously Zig is a competitor to C (not Rust), but C is now much richer in its toolkit and support in other languages. The only thing I can point out is  which can build C projects too and does it with less problems.</p><p>I want to separately note about use of GPTs in work. I have an opportunity to do business tasks in the format of parsing and analyzing texts. What a couple of years ago was done with a bunch of regex, etc., can now be done through GPT and it works great! I tried using local Llama2, but it would have taken weeks to process my data on M2 chip. I redo the solution to use ChatGPT API and processed the data in a couple of days. It's good that all LLMs support openai-client API in Python, so the code almost didn't need to be rewritten. Among the disadvantages of LLama-like aka local running, I also want to note the lack of support for <a rel=\"noopener\" target=\"_blank\" href=\"https://platform.openai.com/docs/guides/function-calling\">Function calling</a> (to guarantee to bring the LLM response to the desired structure, in my case). The last time I did something serious was more than six months ago, maybe a lot has changed. I also tested gemma2, the inference speed was impressive, and the quality of the answers was not much worse.</p><p>As local runners, I used <a rel=\"noopener\" target=\"_blank\" href=\"https://github.com/ggerganov/llama.cpp\">llama.cpp</a> and <a href=\"https://vladkens.cc/2024-in-review/mlx_ml\">https://github.com/ml-explore/mlx</a> – the second one uses Mac resources better (checked through <a rel=\"noopener\" target=\"_blank\" href=\"https://github.com/vladkens/macmon\">macmon</a>), but new models come out a bit slower on it. Some people use <a rel=\"noopener\" target=\"_blank\" href=\"https://github.com/ollama/ollama\">ollama</a>, but I didn't understand why, considering that it has an incompatible client with openai-client API and slower performance.</p><p>Initially, I ran my blog only on Medium, but it's not comfortable to write text there – it's much easier to write and edit in the same editor where I write code (plus my editor has Copilot). Therefore, I decided to move my blog to a static page generator. As an engine, I chose <a rel=\"noopener\" target=\"_blank\" href=\"https://www.getzola.org/\">Zola</a> (Rust-based, simple, and fast); I also tried <a rel=\"noopener\" target=\"_blank\" href=\"https://astro.build/\">Astro</a>, but it's too big and complex for such a simple task. Overall, Zola is good, but it lacks some filters in <a rel=\"noopener\" target=\"_blank\" href=\"https://keats.github.io/tera/docs/\">templating</a>, not enough flexibility in file structure, and not all popular languages are supported in code highlighting.</p><p>I left Medium as a fallback for old readers. I also made a cross-post on <a rel=\"noopener\" target=\"_blank\" href=\"https://dev.to/vladkens\">dev.to</a>, but there are very few views. Medium is disappointed with the lack of the ability to automate cross-posting (they have a deprecated API, but it does not support updating articles and code highlights). Most likely, it's possible to reverse engineer how they save articles through their editor (changes are sent as diffs). Does anyone else need this besides me?</p><p>Last year I launched several new projects (in chronological order):</p><ul><li><p><a rel=\"noopener\" target=\"_blank\" href=\"https://github.com/vladkens/timewiz\">timewiz.cc</a> (, ) – a tool to find common working hours for distributed teams (an alternative to worldtimebuddy.com, I don't remember exactly why I made my own version). Score: fail.</p></li><li><p><a rel=\"noopener\" target=\"_blank\" href=\"https://github.com/vladkens/ecloop\">ecloop</a> (, ) – secp256k1 elliptic curve implementation for Apple chips. Mainly an educational project to understand cryptography, SIMD optimizations, etc. Added several standard use cases for finding Bitcoin keys by brute force, but mathematically this is pointless, so as I said earlier, this is more of an interesting educational project (and I wanted to publish a series of articles on cryptography, but didn't have time last year, I hope to do it this year). Some people use this project in hopes of finding something. I also had ideas to add Metal API support – but that takes a lot of time, so I switched to other projects. Score: okay.</p></li><li><p><a rel=\"noopener\" target=\"_blank\" href=\"https://github.com/vladkens/macmon\">macmon</a> (, ) – TUI program for monitoring MacOS performance (CPU/GPU/ANE usage, RAM, temps). My first public Rust project, a lot of reverse engineering of how <a href=\"https://vladkens.cc/powermetrics-macos\">powermetrics in MacOS</a> works, C-bindings. The project is used both by users in TUI mode and by other projects in headless mode (JSON metrics). Score: success.</p></li><li><p><a rel=\"noopener\" target=\"_blank\" href=\"https://github.com/vladkens/ghstats\">ghstats</a> (, , , ) – a small self-hosted service that collects and saves GitHub repo statistics, has several built-in views and an API to retrieve all statistics. The project started well, but then kind of fizzled out in terms of issues and feature requests, most likely users are satisfied with the current functionality. I would like to add more visualizations, but I haven't had time for that yet. The main thing for now is that the statistics are collected and saved, so something can be done with this in the future. Technically, I like that the service consumes only 10 MB of RAM. Score: okay.</p></li><li><p><a rel=\"noopener\" target=\"_blank\" href=\"https://github.com/vladkens/ogp\">ogp</a> (, , ) – a small project for generating <a href=\"https://vladkens.cc/og-image-generator\">OGP articles preview</a> as a service. Used in this blog (you can check by sending this article to your friends in a messenger or social network 😀). Worked with the SVG standard (I thought it was more adequate) and generating PNG from SVG. Score: more of fail.</p></li><li><p><a rel=\"noopener\" target=\"_blank\" href=\"https://github.com/vladkens/compose-updater\">compose-updater</a> (, ) – a project for updating the version of a docker image from CI in a closed infrastructure. I didn't find anything ready to solve this task. There is <a rel=\"noopener\" target=\"_blank\" href=\"https://github.com/containrrr/watchtower\">watchtower</a>, but it's more about keeping up-to-date docker images, rather than updating a specific one, and also I couldn't run it with ECR repos – the author made a super minimalist image in which I couldn't enter through  to debug. The second alternative is <a rel=\"noopener\" target=\"_blank\" href=\"https://github.com/umputun/updater\">umputun/updater</a>, but it's more about running different shell commands through a webhook. I chose Python because I didn't find a Rust crate for Docker API (most likely it exists, I just didn't understand which one is really good). Score: – (I didn't promote the project anywhere, I use it for my own purposes for now).</p></li></ul><ul><li><p><a rel=\"noopener\" target=\"_blank\" href=\"https://github.com/vladkens/twscrape\">twscrape</a> (, ) – a library <a href=\"https://vladkens.cc/twscrape\">for parsing</a> data from X/Twitter. Mainly the project is in maintenance mode, I check its functionality every few months, and there have been no requests for new features.</p></li><li><p><a rel=\"noopener\" target=\"_blank\" href=\"https://github.com/vladkens/apigen-ts\">apigen-ts</a> (, ) – a library <a href=\"https://vladkens.cc/simple-typescript-api-client-generator\">for generating</a> TypeScript client OpenAPI spec. I continue to use it in my projects; I also see that there are a small number of other users. My relevance has slightly decreased due to the NextJS/TRPC stack, but in other configurations (e.g. FastApi + React), it is still relevant, so use it. Periodically there are requests to fix something or add a feature.</p></li></ul><p>I also have several projects that I didn't finish and abandoned. I'll write about them here, maybe someone needs something from this, then I can return to on it.</p><ul><li><p> – cross-posting between static blog, Medium, Dev.to, Substack, and collecting joined article statistics. I abandoned the project due to the lack of an API at Medium – the only solution I found was through protocol reverse and session cookie.</p></li><li><p> – a program to walk Bitcoin-like blockchain and compile the final UTXO list. I abandoned it because I couldn't figure out how to effectively create a HashMap-like structure with external memory support to run on computers with small RAM (less than 32GB, LOL).</p></li><li><p> – a program that listens to all incoming messages in Telegram (chats &amp; channels) and saves their history in a separate database with the ability to search through these messages later. I have the first version that just saves messages in json files, but I didn't develop the idea further.</p></li></ul><p>I'm not a big tech geek, but I want to say about a few devices which made my life easier:</p><ul><li><a rel=\"noopener\" target=\"_blank\" href=\"https://store.mele.cn/products/mele-quieter-4c-n100-3-4ghz-fanless-mini-computer-lpddr4x-win11-hdmi-4k-wi-fi-5-bt-5-1-usb-3-2-2-usb-2-0-1-type-c-1?variant=43958369648818\">MeLE Fanless Quieter 4C</a> – a small fanless PC for , I use it as a native Linux via SSH for testing various programs and keep some cron jobs on it for data collection. It's cool that it's silent because it has no fan, but it heats up a lot under load. The performance of the N100 chip surprised me – only 2x slower than M2 chip (tested with , single core).</li><li><a rel=\"noopener\" target=\"_blank\" href=\"https://promate.net/products/hdmi-pd100\">Promate HDMI-PD100</a> – nice cable format to connect a monitor and my Mac. One cable is needed to charge and transmit the video stream. Before that, I used hubs, but it's a big block. I'm glad I see fewer wires.</li></ul><p>Over the year, 8 articles were published, totaling 9039 words (~45 minutes to read), and gained 5203 views. Top 3 articles:</p><p><em>Data aggregated from this site (with <a rel=\"noopener\" target=\"_blank\" href=\"https://umami.is/\">umami</a>), Medium, and Dev.to. <a rel=\"noopener\" target=\"_blank\" href=\"https://github.com/vladkens/blog/blob/main/_stats_at_glance.py\">Script</a>.</em></p><p>Public GitHub projects – totaling 312 commits, 49 issues closed, 43 releases created, and 1394 stars gained. Top-3 repos:</p><p><em>Data aggregated with .</em></p><p>I hope I will see a different top with new projects this year 😀</p><p>In  repository I was asked to make it possible to send coffee as donations. Over the year I received 38 cups of coffee from 10 people. I spend these coffees on an annual <a rel=\"noopener\" target=\"_blank\" href=\"https://www.parallels.com/\">Parallels</a> subscription, which allows me to test some apps on Windows. Also, I partially paid from this fund for MeLE and VPS, which I used to test apps as well. Many thanks for supporting my work!</p>","contentLength":10680,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null}],"tags":["dev"]}