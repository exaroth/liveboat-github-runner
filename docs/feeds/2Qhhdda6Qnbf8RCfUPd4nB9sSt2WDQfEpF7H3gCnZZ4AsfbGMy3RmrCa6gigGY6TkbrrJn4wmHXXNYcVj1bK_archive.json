{"id":"2Qhhdda6Qnbf8RCfUPd4nB9sSt2WDQfEpF7H3gCnZZ4AsfbGMy3RmrCa6gigGY6TkbrrJn4wmHXXNYcVj1bK","title":"top scoring links : rust","displayTitle":"Reddit - Rust","url":"https://www.reddit.com/r/rust/top/.rss?sort=top&t=day&limit=6","feedLink":"https://www.reddit.com/r/rust/top/?sort=top&t=day&limit=6","isQuery":false,"isEmpty":false,"isHidden":false,"itemCount":6,"items":[{"title":"Watchexec v2.3.0 · with systemfd integration: `--socket`","url":"https://github.com/watchexec/watchexec/releases/tag/v2.3.0","date":1739100565,"author":"/u/passcod","guid":463,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/rust/comments/1ilcrw2/watchexec_v230_with_systemfd_integration_socket/"},{"title":"Clippy appreciation post","url":"https://www.reddit.com/r/rust/comments/1ilav8q/clippy_appreciation_post/","date":1739092310,"author":"/u/pnuts93","guid":467,"unread":true,"content":"<p>As a Rust amateur I just wanted to share my positive experience with Clippy. I am generally fond of code lints, but especially in a complex language with a lot of built-in functionalities as Rust, I found Clippy to be very helpful in writing clean and idiomatic code and I would highly recommend it to other beginners. Also, extra points for the naming</p>","contentLength":352,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Have we ever considered allowing orphans in bin crates?","url":"https://www.reddit.com/r/rust/comments/1il9vnl/have_we_ever_considered_allowing_orphans_in_bin/","date":1739087992,"author":"/u/MengerianMango","guid":465,"unread":true,"content":"<p>The main reason for not allowing them is that a dep anywhere in your tree could add a trait and break everything, to put it simply. That's a good reason to disallow them in libs, but for bin crates that's not really a concern, and arguably the risk is something we should leave up to the application developer, the end user.</p><p>I'd also consider going a step further, since there will be commonly popular orphans. Perhaps they should also be allowed in first order dependencies of bin crates, to prevent people from vendoring/copy-pasting common orphans. The same logic of allowing user discretion applies to first order dependencies to a bin crate. It would be sorta weird to create a sort of bifurcation in the lib crates, but not really a huge issue since most don't need orphans anw.</p><p>This is an existing concept, allowing/semi-encouraging dirtiness and laziness in bin/app crates for the sake of productivity. Like how anyhow is bad in libs but ok if you're writing an app.</p>","contentLength":972,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Ohkami web framework v0.22 is out; runs on native, Cloudflare Workers, and AWS Lambda!","url":"https://github.com/ohkami-rs/ohkami","date":1739075879,"author":"/u/kanarus","guid":464,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/rust/comments/1il6sub/ohkami_web_framework_v022_is_out_runs_on_native/"},{"title":"Carbon is not a programming language (sort of)","url":"https://herecomesthemoon.net/2025/02/carbon-is-not-a-language/","date":1739061537,"author":"/u/cramert","guid":468,"unread":true,"content":"<p>\n              In case you’ve not heard of it,  is Google’s experimental\n              <a href=\"https://github.com/carbon-language/carbon-lang\" target=\"_blank\">open-source</a> “C++-successor\n              language”. As a very rough first approximation, think Objective-C/Swift, Java/Kotlin, C/C++, C++/Carbon.\n              It is also frequently mentioned in the same breath as Herb Sutter’s Cppfront and Sean Baxter’s Circle (and\n              Rust, surprise surprise).\n            </p><p>\n              Like with any ‘successor language’, the overall goal includes (at the bare minimum) near-seamless\n              interoperability, as well as  improvements over the original language.\n              (Otherwise it can hardly be called a successor, duh.)\n            </p><p>\n              If you’ve clicked on the article, you’re probably waiting for me to admit that I’m lying, and to tell you\n              that (in fact) Carbon  a programming language.\n            </p><p>\n              And yes, it’s true! Carbon is a programming language. (Or rather, it’s  to be a\n              programming language. Carbon is an experimental project and hasn’t hit its 0.1 release milestone yet. The\n              Carbon developers are very transparent about this.)\n            </p><p>\n              But in my humble opinion, thinking of Carbon as a ‘programming language’ is kind of missing the point. Let\n              me tell you how I think about Carbon, and why I think that it’s more interesting than most people give it\n              credit for:\n            </p><blockquote><p>\n                Carbon is a concentrated experimental effort to develop tooling that will facilitate automated\n                large-scale long-term migrations of existing C++ code to a modern, well-annotated programming language\n                with a modern, transparent process of evolution and governance model.\n              </p></blockquote><p>\n              The entirety of Carbon (the language, as well as the project) is built around making this goal possible.\n              (Disclaimer, I don’t speak for Carbon, take my words with a grain of salt.)\n            </p><p>In this post, I want to convince you of the following points:</p><ol><li>\n                Carbon is a project to investigate the possibility of a large-scale reduction of C++ technical debt via\n                automated code migration.</li><li>\n                Many so-called ‘successor languages’ are . They don’t make\n                 an explicit goal, and generally build a layer of abstraction on top of\n                or rely on their host language.\n              </li><li>\n                All of this is downstream of Google’s disagreements with the C++ Standard Committee. In fact, while all\n                of this is about reducing technical debt, it’s also about reducing the organizational costs involved in\n                having to coordinate migrations and language evolution with the committee.\n              </li><li>Developing a new programming language is probably necessary to achieve the goals of the project.</li></ol><p>\n              I’d like to bring special attention to the point about governance: This isn’t just a technical issue. It’s\n              a governance issue. It’s a “We just straight-up disagree on the future direction of the C++ programming\n              language.” sort of issue. I already went over these cultural disagreements in\n              <a href=\"https://herecomesthemoon.net/2024/11/two-factions-of-cpp/\" target=\"_blank\">a previous post</a>.\n            </p><p>\n              (The astute reader will note that you can evolve and govern your own programming language however you\n              want, without needing to deal with WG21 (aka the C++ Standard Committee, aka the authority that decides\n              what C++ .))\n            </p><p>\n              At this point I’d  to reach for the Herb Sutter “We must minimize the need to change existing\n              code.” quote again,\n              but I’ll instead just state the obvious:\n            </p><p>\n              A large-scale migration to a different programming language is  paradigm. As far as\n              changes to existing code go, it’s uncompromising. It’s an approach that’s only going to work for a subset\n              of people, and in fact,\n              <a href=\"https://github.com/carbon-language/carbon-lang/blob/trunk/docs/project/goals.md#legacy-compiled-libraries-without-source-code-or-ability-to-rebuild\" target=\"_blank\">Carbon’s goal document</a>\n              lists “We consider it a non-goal to support legacy code for which the source code is no longer available”.\n            </p><p>\n              In other words, the language is not for everyone. That’s fine! I am still very interested in it. I care\n              about Carbon since I believe that it’s trying to solve the hardest problem C++ is currently facing.\n            </p><p>\n              This isn’t any  technical issue (there are many, many of those), no, and it’s not even a\n              broad concern such as memory safety.\n            </p><p>\n              It’s the problem of C++ slowly calcifying and struggling to modernize. It’s about ABI, about dozens of\n              tools but no agreed upon standards, and it’s about backwards compatibility. It’s about allowing existing\n              C++ code to , modernize and change, in spite of decades of technical debt, multiple\n              implementations, and many different users with different expectations and requirements.\n            </p><p>This is, in other words, an , and a .</p><p>\n              If you believe that certain multi-million line C++ codebases are still going to exist in twenty years,\n              <em>then you should understand the business case for Carbon</em>.\n            </p><h3>A short lesson in history</h3><p>\n              Let’s briefly summarize the backstory for those who haven’t kept track. You could (very roughly) say that\n              Google is developing Carbon due to conflicts with WG21, and disagreements about the future of the C++\n              language.\n            </p><p>\n              What matters is that Google contributed to WG21 for many years, and that it has a vested interest in the\n              future of the language, due to owning many,  million lines of C++ code. It’s hard to\n              overstate how critical C++ is for Google’s infrastructure, and for modern technology in general.\n            </p><p>\n              The short summary is that Google’s developers (not just Google’s, mind you) disagreed with other parts of\n              the committee about the\n              <a href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2137r0.html\" target=\"_blank\">future direction of the C++ language</a>. There are a lot of reasons for this, and\n              <a href=\"https://cor3ntin.github.io/posts/abi/\" target=\"_blank\">a lot of ink</a> has been spilled on the\n              topic. Eventually, after trying to work with WG21 for many years, Google basically threw in the towel.\n              (You cannot blame them. They tried hard, and the WG21 process is notoriously slow and frustrating.)\n            </p><p>\n              At this point, a lot of people might think that the core disagreement between Google and WG21 was about\n              ‘memory safety’, or something like that.\n            </p><p>\n              The current memory safety hype is a pretty big deal for C++, but the ball was already rolling several\n              years ago. All of this started with concerns about C++’s complexity\n              and .\n              It turns out that fixing certain issues would require backwards incompatible changes (bad!). Coordinating\n              this across the entire C++ ecosystem would be more or less impossible.\n            </p><p>\n              I’ll not get into the details and instead point at Chandler Carruth’s\n              <a href=\"https://youtu.be/rHIkrotSwcc?t=1599\" target=\"_blank\">‘There are no zero-cost abstractions’</a>\n              for an example: It pins down how first of all,  has a runtime overhead, and\n              second of all, how fixing this would require an ABI-break and a language change.\n            </p><p>\n              (That doesn’t mean Google doesn’t care about memory safety, of course. They do. But memory safety isn’t\n              what started the whole conflict, even though it’s currently carrying the torch. That’s why memory safety\n              is still relevant to all of this, especially since making C++ memory safe without compromising the vision\n              of the standard committee looks more or less impossible.)\n            </p><h2>Migration &amp; Language Evolution</h2><p>\n              First of all, that Carbon has  as one of its goals should be clear. The\n              Carbon people are\n              <a href=\"https://github.com/carbon-language/carbon-lang/blob/trunk/docs/project/goals.md#interoperability-with-and-migration-from-existing-c-code\" target=\"_blank\">very explicit about this</a>. It’s also a common theme in\n              <a href=\"https://youtu.be/omrY53kbVoA?t=634\" target=\"_blank\">their talks</a>.\n            </p><p>\n              This is, first and foremost, about moving  from the “We mustn’t break existing code, so we\n              had to squeeze in this new feature/syntax in some awkward way .” approach to language\n              evolution. ( and the (proposed) reflection operator () are sending\n              their regards.)\n            </p><p>\n              This approach to language evolution kind of sucks. It’s not like the committee doesn’t\n               the problem, or doesn’t  to evolve the language. The committee is not\n              evil, and it’s not your enemy. C++ is just incredibly hard to evolve for all sorts of reasons, which would\n              honestly justify an article on their own (ABI, multiple implementations and the committee process, no\n              unified ecosystem, no editions or epochs system, no unified migration tooling, widespread dynamic linking,\n              etc.)\n            </p><p>Carbon’s goal is to move away from that.</p><p>\n              How? Via automated tooling, a well-defined process of language evolution with clear guarantees, etc.\n              Carbon is still highly experimental, so the details are still WIP. If I had to guess, I’d say they’re\n              planning to follow in the footsteps of other modern languages. As an example, consider how Rust manages:\n            </p><ul><li>\n                Have a new ’edition’ every three years or so. Each edition is allowed to make certain breaking changes,\n                but modules from separate editions can be compiled and linked together.\n              </li><li>\n                Ship automated migration tooling with the language, which allows an automatic migration of code to the\n                new edition whenever possible.\n              </li><li>\n                If you want to eg. introduce a new keyword, you  it one edition ahead of time.\n                <a href=\"https://doc.rust-lang.org/book/appendix-01-keywords.html#raw-identifiers\" target=\"_blank\">Raw Identifier syntax</a>\n                allows migration and use of old code that still uses this keyword as an identifier.\n              </li></ul><p>In contrast to this, I don’t think there’s any feasible roadmap to get C++ to this state.</p><p>It’s only possible with an ecosystem split, and that’s exactly the point.</p><p>\n              Let me reiterate this. If there’s one thing you take from this article, it’s this here: The\n               is to make it possible to take existing C++ code and to put it onto a path\n              towards a modern, well-defined process for future evolution and changes.\n            </p><p>\n              This is the point. If you want to be cynical, it’s about cutting the dependency on the standard committee,\n              and it’s about allowing any forwards-looking, backwards-incompatible changes , without\n              having to worry about someone else’s ancient binaries from the 80s.\n            </p><p>\n              I just want to make clear that I believe that Carbon is radically different from\n              <a href=\"https://hsutter.github.io/cppfront/\" target=\"_blank\">Cpp2</a> (ie. Herb Sutter’s experimental\n              project to evolve C++).\n            </p><p>\n              The major difference is that Cpp2 tries to leverage the existing C++ language to its full extent, while\n              Carbon tries to minimize its dependency on C++ wherever possible.\n            </p><p>\n              Cpp2 takes the same approach C++ originally did: It transpiles its own code to the host language, and is\n              thus deeply and intrinsically linked to it. It reuses the C++ standard library with all of its problems,\n              it aims to maintain the C++ ecosystem instead of splitting it.\n            </p><p>\n              Perhaps most importantly, Cpp2 also cannot go  than C++: It cannot directly interface with\n              the compiler, since it’s written to be used by “any standard-compliant C++20 compiler”.\n            </p><p>\n              It should be obvious that it’s basically impossible for Cpp2 to make meaningful reductions to C++’s\n              technical debt. Yes, it can be “C++, except with better defaults and syntax.”, but that’s all it can\n              feasibly be as long as full backwards compatibility is an explicit goal. Reducing C++’s technical debt on\n              a deeper level is  for Cpp2.\n            </p><p>\n              It  reduce the number of ways there are to initialize objects by simplifying syntax. It\n               make any changes that would require an ABI-break, it cannot add null-safety to the\n              language (eg.  can still be null,  can still be valueless), and\n              it can’t prevent your code from blowing up in exciting ways due to lifetime issues.\n              Carbon has the advantage that it  make these changes. (eg. Carbon is planning to move away\n              from exceptions, in favor of treating errors as values.)\n            </p><p>\n              Just to be clear, this is fine! I am not saying Cpp2 is bad, and I’m curious to see how the project\n              develops. I am just highlighting that Carbon and Cpp2 are <em>completely different projects</em> with\n              completely different scopes and goals.\n            </p><p>\n              It is written by Herb Sutter, someone who very clearly  C++ as it is, and who wants to make\n              it easier to use. It’s about having a new syntax, and making it  to apply best practices\n              to your C++ code.\n            </p><p>\n              This is a great idea, and a much less invasive proposal than Carbon. Carbon isn’t that. Carbon is about\n              <em>reworking the language from the ground up</em>. It’s about building a  language that can\n              support almost all of the same semantics, but is still critically different. It’s about reworking the\n              fundamentals, and building stronger abstractions.\n            </p><p>\n              So in short, Cpp2 works  C++, and Carbon is trying to  a better C++ from\n              scratch, while cutting its dependency on C++ almost completely.\n            </p><p>\n              Is Carbon feasible? I’ll be honest, I have no clue. C++ code is  and this project is\n              (more or less) unprecedented. (Which is, again, why I am interested in it.)\n            </p><p>The reasons why I believe it  be technically feasible at all are simple:</p><ol><li>\n                Carbon doesn’t attempt to do the impossible: The goal is a tool-assisted migration of idiomatic code,\n                not a fully automated migration of  code. (What does ‘idiomatic’ mean? Who knows. Probably\n                something like ‘well-annotated and easy to handle for static analyzers’. Figuring out how to draw the\n                boundary of which code can be migrated is part of the project.)\n              </li><li>\n                Carbon is capable of leveraging its underlying tooling to do a  of the hard work. For\n                example, resolving C++ templates and function calls is handled by Clang and LLVM. This should not be\n                much of a surprise. Clang can be used as a library, and this is exactly what you’d expect it to excel\n                at. (Swift is\n                <a href=\"https://www.swift.org/documentation/cxx-interop/status/\" target=\"_blank\">already doing this for its C++ interop</a>.)\n              </li><li>\n                Carbon already demonstrated that its chosen abstractions are capable of supporting some pretty “fun” C++\n                features.\n              </li></ol><p>Let me quickly substantiate some of that.</p><p>\n              So, here’s the thing. Carbon can\n              <em>convert your C++ to Carbon and then run it against the old test suite</em>. (Or that’s the plan, at\n              least.)\n            </p><p>(You do have a test suite, right?)</p><p>\n              If the code compiles and all tests pass, this should give you confidence in the resulting code\n              proportional to your confidence in your own test suite. (This is especially helpful for changes\n               the initial automated migration, even if it’s just clean-up work.)\n            </p><p>This approach is  for all sorts of reasons.</p><p>\n              First of all, it means that Carbon can leverage\n              <em>existing C++ test suites to test its own migration and interop capabilities</em>. This is great.\n            </p><p>\n              Second of all, it puts  burden on the user and sets a minimal bar for what Carbon means with\n              ‘migration of idiomatic C++’: You should  have some tests in your code. If you critically\n              depend on something, then you should have a test for it.\n            </p><h3>Generalization and unification of C++ features</h3><div><pre tabindex=\"0\"><code data-lang=\"cpp\"></code></pre></div><p>\n              If you have no idea what you’re looking at: This is legal C++. Calling  a ‘pointer’ is a\n              stretch, in practice it is just an  relative to the location of an object of this class in\n              memory.\n            </p><p>\n              Two funfacts: First, this can also be used to refer to methods. Second, this value can be null, and it’s\n              null-value is , since  would point to an actual field.\n            </p><p>\n              When I see a feature like this, my first question would be whether Carbon is even capable of\n               this specific type of behavior, and it turns out that, yes, they have thought about\n              this.\n            </p><p>\n              Carbon is building  on top of  (which can broadly be\n              understood as C++0x Concepts or Rust traits).\n            </p><p>\n              There’s a simple reason for that: Carbon wants to support  checked generics\n              (roughly, you’ll know that a generic function can be instantiated without having to look into the body of\n              the function. This is not the case for templates.) As a consequence,  which\n              you can “do” with a value needs to be implemented as an interface, so that you can specify that an\n              incoming value fulfills this constraint.\n            </p><p>\n              Consequently,  are implemented via a so-called\n               interface, which (as far as I can tell) generalizes expressions of the form\n              , whether  is a field, a static member function, a method, a member access\n              pointer, or who knows what else. Any  which implements  (where\n               is the class of ) can be used as .\n            </p><p>\n              The pattern of unifying abstractions as interfaces gets used a lot: It turns out that deep within Carbon,\n              function calls are implemented as a synthesized type which implements some  interface.\n              This is used to unify functions, methods, lambdas, etc. Every single thing in Carbon which you can “call”\n              is just some value implementing the  interface.\n            </p><p>\n              Sorry, I’m basically just rehashing parts of Chandler Carruth’s (highly technical) talk here. For the full\n              picture, please just go and watch it. He’s a great speaker, and I don’t trust myself to get every\n              technical detail right.\n            </p><p>\n              The point is, if you’re wondering what the Carbon people are working on, then it’s this kind of stuff.\n              They’re building  which are general enough to to make all sorts of gnarly C++\n              semantics (eg. member access pointers) work, but have a  simpler underlying model. (eg. it\n              unifies everything that can be called,  gives you the ‘concept’/interface for free).\n            </p><p>\n              Is this going to work for the rest of the language? Who knows! C++ is complicated, probably too\n              complicated to manage. That’s the whole reason why Carbon even exists.\n            </p><h3>Digression: Why not Rust™? Why not C++?</h3><p>\n              Rust is really just too different for an automated conversion of C++ code to Rust code to be feasible,\n              it’s as simple as that. I even\n              <a href=\"https://herecomesthemoon.net/2025/01/type-inference-in-rust-and-cpp/\" target=\"_blank\">wrote an article</a>\n              getting into the differences in type inference alone.\n            </p><p>\n              You have no class inheritance, no templates, no specialization, no ad-hoc function overloads, no implicit\n              conversions, and there’s still the whole deal with the borrow checker. Any conversion of modern\n              general-purpose C++ code to Rust basically amounts to a rewrite, which is just not something you can do\n              with classic automation tooling.\n            </p><p>\n              Carbon has the luxury of being able to support both templates  checked generics (ie. something\n              like Rust traits or C++0x concepts), and a way to migrate between them.\n            </p><p>\n              As for a C++-to-more-modern-C++-migration, it just doesn’t solve the question of language evolution.\n              You’re still heavily limited by what you can do, unless you also commit to a proper fork of C++ and\n              possibly Clang.\n            </p><p>\n              Which…might be viable, but makes it much harder to implement clean abstractions from the get-go. It also\n              doesn’t help that a fork runs a pretty severe risk of being ‘usable’ right from the get-go (meaning that\n              people will want to use it, and the boundary between C++ and Carbon will be muddier).\n            </p><p>\n              As I said, Carbon is a moonshot project to allow modern C++ codebases to evolve. (They might stop being\n              called “C++” in the process, but that’s probably fine. The only constant in life is change, or something\n              like that.)\n            </p><p>\n              The north star goal is, of course, that of a gradual but mostly automated migration of existing C++ code\n              to Carbon code, followed by  migrations to fix and improve this code using Carbon’s\n              modern, more powerful semantics (eg. null safety).\n            </p><p>\n              From this angle, and with the historical background in mind, let’s address the elephant in the room\n              and take a stab at describing how some people feel about Carbon, by rephrasing my interpretation of its\n              goals in the most cynical way possible. I’m deeply sorry to anyone who’s working on Carbon, since this is\n              going to feel like I’m twisting a proverbial knife:\n            </p><blockquote><p>\n                Carbon’s primary goal is a large-scale migration of Google’s enormous pile of (highly specific,\n                exception-less, Abseil and Protobuf-using, Clang-based, Bazel-built) C++ technical debt into a modern\n                language capable of supporting Google’s needs, and\n                <em>over whose governance Google is capable of exerting a significant amount of control.</em></p></blockquote><p>\n              There we go. Do\n              you see the elephant yet?\n            </p><p>\n              It’s pretty hard to miss since I highlighted it. (Sorry, I know that it’s the second time I made that\n              joke.)\n            </p><p>\n              This is about the least charitable way to phrase it, of course. I’m bringing this up for the obvious\n              reasons: Carbon is spearheaded by a big tech company, and people have various concerns.\n            </p><p>\n              These include the concern that Google trying to ’take control’ of C++ via a divide-and-conquer approach,\n              that Carbon will favor Google’s style of C++ at the expense of others, and the classic sentiment that\n              Carbon will eventually be abandoned and dropped (potentially hanging early adopters out in the dry).\n            </p><p>\n              As I already gestured at before, all of this is about , and by extension about governance.\n            </p><p>\n              As long as we’re willing to say that Carbon is about reducing the reliance on the C++ Standard Committee,\n              it’s pretty clear that that governance-shaped hole has to be filled , and that someone (or\n              some group of people) has to decide the future direction of the language.\n            </p><p>\n              I’ll be honest, I can make no guarantees here. I am not working on Carbon, and the dynamics here are far beyond my scope.\n            </p><p>\n              I can point out that Carbon is an Apache-licensed open source project,\n              <a href=\"https://github.com/carbon-language/carbon-lang/blob/trunk/CONTRIBUTING.md\" target=\"_blank\">open for contributors right now</a>, and that it has an explicit “The intent is that […] Carbon remains a community-driven project, avoiding\n              situations where any single organization controls Carbon’s direction.”\n              <a href=\"https://github.com/carbon-language/carbon-lang/blob/trunk/docs/project/faq.md#how-does-carbon-make-decisions\" target=\"_blank\">disclaimer</a>\n              in its FAQ, but that’s not going to convince you if you’re worried about bad intentions.\n            </p><p>\n              So. What I  tell you is that I believe that putting governance of the language into the hands\n              of the open-source community is critical for Carbon’s long-term success, and that Carbon’s developers\n              understand this.\n            </p><p>\n              Whether Carbon will find widespread adoption depends on whether  trust\n              Carbon’s stewards to handle the language with enough responsibility that migrating their own C++ code to\n              Carbon seems like a safe offer.\n            </p><p>\n              This sort of trust is hard to establish as long as there’s a single owner,  if that\n              owner is Google.\n            </p><p>\n              Second: That Carbon finds any public adoption at all is also pretty important  the primary\n              goal was just to use it purely within Google. This might come as a surprise, but it’s pretty simple:\n              People who’re expected to use Carbon first need to learn Carbon. This is  easier\n              when Google can rely on a broad ecosystem of tutorials, libraries and discussion boards outside of its\n              intranet.\n            </p><p>\n              So in other words, for Carbon to become successful, it’s critical that there’s a public community, and\n              that enterprise users of C++  Carbon.\n            </p><p>These are huge incentives to push the language towards independent community ownership.</p><p>\n              Both of these points (trust by enterprise users and need for a public community) were\n               for <a href=\"https://go.dev/\" target=\"_blank\">Go</a> (which was also\n              spearheaded by Google), primarily due to Go’s simplicity, the fact that there was far less competition in\n              the programming language space when Go released, and the fact that it was a language for greenfield\n              projects. (That is, it didn’t require convincing ancient C++ coders to perform a massive migration and\n              rework their tool chain.)\n            </p><p>\n              My understanding is that\n              <a href=\"https://news.ycombinator.com/item?id=32153320\" target=\"_blank\">Carbon’s leads understand all of this</a>, and want the project to be community driven. For now, that’s more than good enough for me. For a\n              project this early in its life-cycle, it’s nice to see that they’re thinking about this at all, and have\n              made an explicit commitment to community ownership.\n            </p><h2>Conclusion: There is no free lunch.</h2><p>\n              The prospect of building a  to C++—arguably single most important programming language\n              currently in existence—sounds like it should be doomed to fail.\n            </p><p>\n              I’ll repeat what I said before, and what should be common knowledge: C++ is an incredibly complex\n              programming language. It’s under-annotated, has multiple implementations (governed by a 2000+ page ISO\n              Standard document), carries four decades of technical baggage, is full of undefined behavior, and has a\n              frequently abused Turing-complete quasi-code-generation meta-programming language built into it.\n            </p><p>\n              All of that should make it near impossible to succeed C++. Complexity is in fact a form of job security.\n              So why am I still relatively confident in Carbon’s potential?\n            </p><p>Simple, it’s mainly since the priorities look correct to me. Carbon understands that</p><ol><li>\n                C++’s inability to evolve, modernize, deprecate, migrate and standardize is  critical issue\n                which the language is facing today.</li><li>\n                You cannot improve on this without making concessions. This goes both ways: There is old C++ code which\n                you will not be able to support. At the same time, there are C++ features which you  to\n                support, whether you want to or not.\n              </li><li>\n                This is a herculean task that requires a massive initial investment (a whole new programming language),\n                and a complete rethinking of tooling, communication, software engineering and language development\n                practices.\n              </li></ol><p>\n              The inability to evolve is an issue for people who’re just starting to learn C++, and who stumble into\n              every single footgun that hasn’t been taken care of over the past thirty years.\n            </p><p>\n              It’s an issue for people who care for high-quality code, readability or memory safety, and see no viable\n              path towards getting their C++ codebase into that state.\n            </p><p>\n              It’s an issue for <em>committee and compiler contributors</em>, who need to carefully consider how a new\n              feature will interact with <em>literally everything else</em> the language already supports.\n            </p><p>\n              You might disagree with that assessment. It might not be an issue . That’s\n              fine. C++ (for a given version, anyway) will stay exactly as it is. It’s not going to go away anytime\n              soon, and that’s a good thing. People depend on that. Critical infrastructure depends on that.\n            </p><p>\n              As for myself, I am incredibly glad to see that  is trying to take this bull by the horns,\n              and willing to face this charging billion lines-of-code mountain of complexity and technical debt head-on.\n            </p><p>\n              At last but not at least just since it would be  if we (humanity, as a whole)\n              could actually pull it off, and don’t need to pass tales warning people about the dangers of using\n               across the generations.\n            </p><p>\n              It might take a while, but that’s fine. This is a long-term project. It  to be a long-term\n              project to make this work. Once you start thinking about it from that perspective, everything makes a lot\n              more sense.\n            </p><p>\n              Remember, those millions of lines of C++ code are not going to go away anytime soon. They’ll still be\n              there in a few decades. It’s either a large-scale migration (in some form or another), or nothing.\n            </p><p>\n              In the meantime, if you’re remotely interested, I’ll reiterate that I highly recommend Carbon’s talks, eg.\n              <a href=\"https://youtu.be/bBvLmDJrzvI\" target=\"_blank\">this one</a>.\n            </p><p>\n              Writing this took significantly longer than expected. The total number of footnotes written and deleted is\n              about forty.\n            </p><p>Let me know if you got something out of it—It means a lot to me.</p><p>\n              Questions, suggestions, comments, writing advice, reading recommendations, music suggestions, pictures of\n              pets and basically anything else you can think of are all welcome via my contact e-mail at the bottom of\n              the page.\n            </p>","contentLength":31331,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/rust/comments/1il2b71/carbon_is_not_a_programming_language_sort_of/"},{"title":"I release Beta of my code editor Gladius","url":"https://www.reddit.com/r/rust/comments/1il108b/i_release_beta_of_my_code_editor_gladius/","date":1739057724,"author":"/u/njs5i","guid":466,"unread":true,"content":"<p>After several years of coding, I think I have \"good enough\" Beta release of my CLI, keyboard-only code editor Gladius. </p><p>I would like to especially thanks all contributors of the project so far.</p>","contentLength":192,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null}],"tags":["dev","reddit","rust"]}