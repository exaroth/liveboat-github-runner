{"id":"46aP2QbqUqBrWfYqAibo8xS24qkvbDNgWZUrxgZ6XNcyUn6fFxkgS1aSWJWwPwaqFp34erWr8NxVvd6jro8uiaPvDUjw","title":"top scoring links : kubernetes","displayTitle":"Reddit - Kubernetes","url":"https://www.reddit.com/r/kubernetes/top/.rss?sort=top&t=day&limit=6","feedLink":"https://www.reddit.com/r/kubernetes/top/?sort=top&t=day&limit=6","isQuery":false,"isEmpty":false,"isHidden":false,"itemCount":6,"items":[{"title":"generic Raw helm chart with rich features","url":"https://www.reddit.com/r/kubernetes/comments/1k3qz0e/generic_raw_helm_chart_with_rich_features/","date":1745168036,"author":"/u/Coding-Sheikh","guid":428,"unread":true,"content":"   submitted by   <a href=\"https://www.reddit.com/user/Coding-Sheikh\"> /u/Coding-Sheikh </a>","contentLength":36,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"The subtle art of waiting","url":"https://blog.frankel.ch/subtle-art-waiting/","date":1745167039,"author":"/u/nfrankel","guid":425,"unread":true,"content":"<div><p>It might sound strange to wait in Kubernetes.\nThe self-healing nature of the Kubernetes platform is one of its biggest benefits.\nLet’s consider two pods: a Python application and a PostgreSQL database.</p></div><div><p>The application starts very fast and eagerly tries to establish a connection to the database.\nMeanwhile, the database is initializing itself with the provided data;\nthe connection fails.\nThe pod ends up in the  state.</p></div><div><p>After a while, Kubernetes requests the application pod’s state.\nBecause it’s failed, it terminates it and starts a new pod.\nAt this point, two things can happen:\nthe database pod isn’t ready yet, and it’s back to square one or it’s ready, and the application finally connects.</p></div><div><div><pre><code data-lang=\"yaml\"></code></pre></div></div><div><p>With the above probe, Kubernetes waits for an initial ten seconds before requesting the pod’s status.\nIf it fails, it waits for another ten seconds.\nRinse and repeat 30 times before it fails definitely.</p></div><div><p>You may have noticed the HTTP  endpoint above.\nKubernetes offers two exclusive <a href=\"https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#Probe\" target=\"_blank\" rel=\"noopener\">Probe</a> configuration settings:\n or .\nThe former is suitable for web applications, while the latter is for other applications.\nIt implies we need to know which kind of container the pod contains and how to check its status, provided it can.\nI’m no PostgreSQL expert, so I searched for a status check command.\nThe <a href=\"https://github.com/bitnami/charts/blob/main/bitnami/postgresql/templates/primary/statefulset.yaml#L417-L427\" target=\"_blank\" rel=\"noopener\">Bitnami Helm Chart</a> looks like the following when applied:</p></div><div><div><pre><code data-lang=\"yaml\"></code></pre></div></div><div><p>Note that the above is a simplification, as it gladly ignores the database name and an SSL certificate.</p></div><div><p>The startup probe speeds things up compared to the default situation if you configure it properly.\nYou can set a long initial delay, and then shorter increments.\nYet, the more diverse the containers, the harder it gets to configure, as you need to be an expert in each of the underlying containers.</p></div><div><p>It would be beneficial to look for alternatives.</p></div>","contentLength":1808,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/kubernetes/comments/1k3qlpd/the_subtle_art_of_waiting/"},{"title":"Built a simple UI tool for node group-level observability in AWS EKS — KubePeek","url":"https://www.reddit.com/r/kubernetes/comments/1k3nas5/built_a_simple_ui_tool_for_node_grouplevel/","date":1745157979,"author":"/u/captain_sangam","guid":426,"unread":true,"content":"<p>Hey folks! I’ve been working on <a href=\"https://www.kubepeek.com/\"></a> — a lightweight web UI that gives real-time visibility into your .</p><p>While there are other observability tools out there, most skip or under-serve the . This is a simple V1 focused on that gap — with more features on the way.</p><ul><li>Roadmap includes GKE, AKS, AI-powered optimization, pod interactions, and more</li></ul><p>Would love feedback, feature requests, or contributions.</p>","contentLength":395,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"🎡 Kubernetes Deployments, Pods, and Services explained through a theme park analogy","url":"https://www.reddit.com/r/kubernetes/comments/1k3kcl4/kubernetes_deployments_pods_and_services/","date":1745147995,"author":"/u/mmk4mmk_simplifies","guid":424,"unread":true,"content":"<p>Hi everyone — as someone helping my team ramp up on Kubernetes, I’ve been experimenting with simpler ways to explain how things work.</p><p>I came up with this :</p><ul><li>🎡  = the ride managers ensuring rides stay available</li><li>🎟️  = the ticket counters connecting guests to the rides</li></ul><p>And I've added a visual I created to map it out: I’m curious how others here explain these concepts — or if you’d suggest improvements to this analogy.</p>","contentLength":431,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"How often do you delete kafka data stored on brokers?","url":"https://www.reddit.com/r/kubernetes/comments/1k3kcit/how_often_do_you_delete_kafka_data_stored_on/","date":1745147986,"author":"/u/Appropriate_Club_350","guid":427,"unread":true,"content":"<p>I was thinking if all the records are saved to data lake like snowflake etc. Can we automate deleting the data and notify the team? Again use kafka for this? (I am not experienced enough with kafka). What practices do you use in production to manage costs? </p>","contentLength":257,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"KSail - An open-source Kubernetes SDK","url":"https://www.reddit.com/r/kubernetes/comments/1k3i8rm/ksail_an_opensource_kubernetes_sdk/","date":1745138658,"author":"/u/nikolaidamm","guid":423,"unread":true,"content":"<p>I am, <a href=\"https://github.com/devantler\">u/devantler</a>, the maintainer of <a href=\"https://github.com/devantler-tech/ksail\">KSail</a>. KSail is a CLI tool built with the vision of becoming a full-fledged SDK for Kubernetes. KSail strives to bridge the gaps between usability, productivity, and functionality for Kubernetes development. It is easy to use and relies on mainstream approaches like GitOps, declarative configurations, and concepts known from the Kubernetes ecosystem. Today KSail works quite well locally with clusters that can run in Docker or Podman:</p><pre><code>&gt; ksail init \\ # to create a new custom project (★ is default) --provider &lt;★Docker★|Podman&gt; \\ --distribution &lt;★Native★|K3s&gt; \\ --deployment-tool &lt;★Kubectl★|Flux&gt; \\ --cni &lt;★Default★|Cilium&gt; \\ --csi &lt;★Default★&gt; \\ --ingress-controller &lt;★Default★&gt; \\ --gateway-controller &lt;★Default★&gt; \\ --secret-manager &lt;★None★|SOPS&gt; \\ --mirror-registries &lt;★true★|false&gt; &gt; ksail up # to create the cluster &gt; ksail update # to apply new manifests to the cluster with your chosen deployment tool </code></pre><p>If this seems interesting to you, I hope that you will give it a spin, and help me on the journey to making the DevEx for Kubernetes better. If not, I am still interested in your feedback! Check out KSail here:</p><p>I am also actively looking for maintainers/contributions, so if you feel this project aligns with your inner ambitions, and you find joy in using a few hobby hours writing code, this might be an option for you! 🧑‍🔧</p><p>Feel free to share the project with your friends and colleagues! 👨‍👨‍👦‍👦🌍</p>","contentLength":1509,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null}],"tags":["dev","reddit","k8s"]}