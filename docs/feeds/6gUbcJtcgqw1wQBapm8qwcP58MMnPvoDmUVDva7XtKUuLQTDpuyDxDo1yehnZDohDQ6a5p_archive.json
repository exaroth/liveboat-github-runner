{"id":"6gUbcJtcgqw1wQBapm8qwcP58MMnPvoDmUVDva7XtKUuLQTDpuyDxDo1yehnZDohDQ6a5p","title":"Slashdot: Developers","displayTitle":"Dev - Slashdot - Dev","url":"http://rss.slashdot.org/Slashdot/slashdotDevelopers","feedLink":"https://developers.slashdot.org/","isQuery":false,"isEmpty":false,"isHidden":false,"itemCount":15,"items":[{"title":"Dev Gets 4 Years For Creating Kill Switch On Ex-Employer's Systems","url":"https://yro.slashdot.org/story/25/08/22/0039200/dev-gets-4-years-for-creating-kill-switch-on-ex-employers-systems?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1755856800,"author":"BeauHD","guid":288,"unread":true,"content":"Davis Lu, a former Eaton Corporation developer, has been sentenced to four years in prison for sabotaging his ex-employer's Windows network with malware and a custom kill switch that locked out thousands of employees once his account was disabled. The attack caused significant operational disruption and financial losses, with Lu also attempting to cover his tracks by deleting data and researching privilege escalation techniques. BleepingComputer reports: After a corporate restructuring and subsequent demotion in 2018, the DOJ says that Lu retaliated by embedding malicious code throughout the company's Windows production environment. The malicious code included an infinite Java thread loop designed to overwhelm servers and crash production systems. Lu also created a kill switch named \"IsDLEnabledinAD\" (\"Is Davis Lu enabled in Active Directory\") that would automatically lock all users out of their accounts if his account was disabled in Active Directory. When his employment was terminated on September 9, 2019, and his account disabled, the kill switch activated, causing thousands of users to be locked out of their systems.\n \n\"The defendant breached his employer's trust by using his access and technical knowledge to sabotage company networks, wreaking havoc and causing hundreds of thousands of dollars in losses for a U.S. company,\" said Acting Assistant Attorney General Matthew R. Galeotti. When he was instructed to return his laptop, Lu reportedly deleted encrypted data from his device. Investigators later discovered search queries on the device researching how to elevate privileges, hide processes, and quickly delete files. Lu was found guilty earlier this year of intentionally causing damage to protected computers. After his four-year sentence, Lu will also serve three years of supervised release following his prison term.","contentLength":1854,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python Surges in Popularity. And So Does Perl","url":"https://developers.slashdot.org/story/25/08/16/0658254/python-surges-in-popularity-and-so-does-perl?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1755354840,"author":"EditorDavid","guid":287,"unread":true,"content":"Last month, Python \"reached the highest ranking a programming language ever had in the TIOBE index,\" according to TIOBE CEO Paul Jansen. \n\n\"We thought Python couldn't grow any further, but AI code assistants let Python take yet another step forward.\"\n According to recent studies of Stanford University (Yegor Denisov-Blanch), AI code assistants such as Microsoft Copilot, Cursor or Google Gemini Code Assist are 20% more effective if used for popular programming languages. The reason for this is obvious: there is more code for these languages available to train the underlying models. This trend is visible in the TIOBE index as well, where we see a consolidation of languages at the top. Why would you start to learn a new obscure language for which no AI assistance is available? This is the modern way of saying that you don't want to learn a new language that is hardly documented and/or has too few libraries that can help you.\n \nTIOBE's \"Programming Community Index\" attempts to calculate the popularity of languages using the number of skilled engineers, courses, and third-party vendors. It nows gives Python a 26.14% rating, which TechRepublic notes \"is well ahead of the next two programming languages on this month's leaderboard: C++ is at 9.18% and C is 9.03%.\" But the first top six languages haven't changed since last year...\n\n\nPythonC++C JavaC#JavaScript\nSince August of 2024 SQL has dropped from its #7 rank down to #12 (meaning Visual Basic and Go each rise up one rank from their position a year ago, into the #7 and #8 positions). \nIn the last year Perl has risen from the #25 position to #9, beating out Delphi/Oracle Pascal at #10, and Fortran at #11 (last year's #10). TIOBE CEO Jansen \"told TechRepublic in an email that many people were asking why Perl was becoming more popular, but he didn't have a definitive answer. He said he double-checked the underlying data and found the increase to be accurate, though the reason for the shift remains unclear.\"","contentLength":1982,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Dodgy Huawei Chips Nearly Sunk DeepSeek's Next-Gen R2 Model","url":"https://developers.slashdot.org/story/25/08/14/2247214/dodgy-huawei-chips-nearly-sunk-deepseeks-next-gen-r2-model?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1755216120,"author":"BeauHD","guid":286,"unread":true,"content":"DeepSeek's development of its next-gen R2 AI model was severely delayed after months of failed training attempts on Huawei's Ascend chips, which suffered from unstable hardware, slow interconnects, and immature software. The Register reports: Following the industry rattling launch of DeepSeek R1 earlier this year, the Chinese AI darling faced pressure from government authorities to train the model's successor on Huawei's homegrown silicon, three unnamed sources have told the Financial Times. But after months of work and the help of an entire team of Huawei engineers, unstable chips, glacial interconnects, and immature software proved insurmountable for DeepSeek, which was apparently unable to complete a single successful training run. The failure, along with challenges with data labeling, ultimately delayed the release of DeepSeek R2 as the company started anew, using Nvidia's H20 GPUs instead. The company has reportedly relegated Huawei's Ascend accelerators to inference duty.","contentLength":992,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"GitHub No Longer Independent at Microsoft As CEO Steps Down","url":"https://developers.slashdot.org/story/25/08/11/1525253/github-no-longer-independent-at-microsoft-as-ceo-steps-down?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1754925900,"author":"msmash","guid":285,"unread":true,"content":"GitHub CEO Thomas Dohmke announced Monday he will step down to pursue entrepreneurial endeavors, with Microsoft restructuring the subsidiary's leadership rather than appointing a direct replacement. \n\nMicrosoft developer division head Julia Liuson will oversee GitHub's revenue, engineering and support operations, while chief product officer Mario Rodriguez will report to Microsoft AI platform VP Asha Sharma.","contentLength":411,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"How Python is Fighting Open Source's 'Phantom' Dependencies Problem","url":"https://developers.slashdot.org/story/25/08/11/025214/how-python-is-fighting-open-sources-phantom-dependencies-problem?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1754878020,"author":"EditorDavid","guid":284,"unread":true,"content":"Since 2023 the Python Software Foundation has had a Security Developer-in-Residence (sponsored by the Open Source Security Foundation's vulnerability-finding \"Alpha-Omega\" project). And he's just published a new 11-page white paper about open source's \"phantom dependencies\" problem â€” suggesting a way to solve it. \n\n\"Phantom\" dependencies aren't tracked with packaging metadata, manifests, or lock files, which makes them \"not discoverable\" by tools like vulnerability scanners or compliance and policy tools. So Python security developer-in-residence Seth Larson authored a recently-accepted Python Enhancement Proposal offering an easy way for packages to provide metadata through Software Bill-of-Materials (SBOMs). From the whitepaper:\n\n\n Python Enhancement Proposal 770 is backwards compatible and can be enabled by default by tools, meaning most projects won't need to manually opt in to begin generating valid PEP 770 SBOM metadata. Python is not the only software package ecosystem affected by the \"Phantom Dependency\" problem. The approach using SBOMs for metadata can be remixed and adopted by other packaging ecosystems looking to record ecosystem-agnostic software metadata... \n\nWithin Endor Labs' [2023 dependencies] report, Python is named as one of the most affected packaging ecosystems by the \"Phantom Dependency\" problem. There are multiple reasons that Python is particularly affected: \n\n- There are many methods for interfacing Python with non-Python software, such\nas through the C-API or FFI. Python can \"wrap\" and expose an easy-to-use\nPython API for software written in other languages like C, C++, Rust, Fortran,\nWeb Assembly, and more. \n- Python is the premier language for scientific computing and artificial\nintelligence, meaning many high-performance libraries written in system\nlanguages need to be accessed from Python code. \n\n- Finally, Python packages have a distribution type called a \"wheel\", which is\nessentially a zip file that is \"installed\" by being unzipped into a directory,\nmeaning there is no compilation step allowed during installation. This is great\nfor being able to inspect a package before installation, but it means that all\ncompiled languages need to be pre-compiled into binaries before installation... \n\nWhen designing a new package metadata standard, one of the top concerns is reducing the amount of effort required from the mostly volunteer maintainers of packaging tools and the thousands of projects being published to the Python Package Index... By defining PEP 770 SBOM metadata as using a directory of files, rather than a new metadata field, we were able to side-step all the implementation pain... \n We'll be working to submit issues on popular open source SBOM and vulnerability scanning tools, and gradually, Phantom Dependencies will become less of an issue for the Python package ecosystem. \n\nThe white paper \"details the approach, challenges, and insights into the creation and acceptance of PEP 770 and adopting Software Bill-of-Materials (SBOMs) to improve the measurability of Python packages,\" explains an announcement from the Python Software Foundation. And the white paper ends with a helpful note. \n\n\"Having spoken to other open source packaging ecosystem maintainers, we have come to learn that other ecosystems have similar issues with Phantom Dependencies. We welcome other packaging ecosystems to adopt Python's approach with PEP 770 and are willing to provide guidance on the implementation.\"","contentLength":3476,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Rust's Annual Tech Report: Trusted Publishing for Packages and a C++/Rust Interop Strategy","url":"https://developers.slashdot.org/story/25/08/10/0449256/rusts-annual-tech-report-trusted-publishing-for-packages-and-a-crust-interop-strategy?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1754836440,"author":"EditorDavid","guid":283,"unread":true,"content":"Thursday saw the release of Rust 1.89.0\n\n\nBut this week the Rust Foundation also released its second comprehensive annual technology report. \n\nA Rust Foundation announcement shares some highlights:\n\n- Trusted Publishing [GitHub Actions authentication using cryptographically signed tokens] fully launched on crates.io, enhancing supply chain security and streamlining workflows for maintainers. \n- Major progress on crate signing infrastructure using The Update Framework (TUF), including three full repository implementations and stakeholder consensus. \n- Integration of the Ferrocene Language Specification (FLS) into the Rust Project, marking a critical step toward a formal Rust language specification [and \"laying the groundwork for broader safety certification and formal tooling.\"] \n- 75% reduction in CI infrastructure costs while maintaining contributor workflow stability. [\"All Rust repositories are now managed through Infrastructure-as-Code, improving maintainability and security.\"] \n- Expansion of the Safety-Critical Rust Consortium, with multiple international meetings and advances on coding guidelines aligned with safety standards like MISRA. [\"The consortium is developing practical coding guidelines, aligned tooling, and reference materials to support regulated industries â€” including automotive, aerospace, and medical devices â€” adopting Rust.\"] \n- Direct engagement with ISO C++ standards bodies and collaborative Rust-C++ exploration... The Foundation finalized its strategic roadmap, participated in ISO WG21 meetings, and initiated cross-language tooling and documentation planning. These efforts aim to unlock Rust adoption across legacy C++ environments without sacrificing safety. \nThe Rust Foundation also acknowledges continued funding from OpenSSF's Alpha-Omega Project and \"generous infrastructure donations from organizations like AWS, GitHub, and Mullvad VPN\" to the Foundation's Security Initiative, which enabled advances like including GitHub Secret Scanning and automated incident response to \"Trusted Publishing\" and the integration of vulnerability-surfacing capabilities into crates.io. \n\nThere was another announcement this week. In November AWS and the Rust Foundation crowdsourced \"an effort to verify the Rust standard library\" â€” and it's now resulted in a new formal verification tool called \"Efficient SMT-based Context-Bounded Model Checker\" (or ESBMCESBMC)\n\nThis winning contribution adds ESBMC â€” a state-of-the-art bounded model checker â€” to the suite of tools used to analyze and verify Rust's standard library. By integrating through Goto-Transcoder, they enabled ESBMC to operate seamlessly in the Rust verification workflow, significantly expanding the scope and flexibility of verification efforts... \nThis achievement builds on years of ongoing collaboration across the Rust and formal verification communities... The collaboration has since expanded. In addition to verifying the Rust standard library, the team is exploring the use of formal methods to validate automated C-to-Rust translations, with support from AWS. This direction, highlighted by AWS Senior Principal Scientist Baris Coskun and celebrated by the ESBMC team in a recent LinkedIn post, represents an exciting new frontier for Rust safety and verification tooling.\n","contentLength":3303,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"'Hour of Code' Announces It's Now Evolving Into 'Hour of AI'","url":"https://developers.slashdot.org/story/25/08/10/0110212/hour-of-code-announces-its-now-evolving-into-hour-of-ai?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1754796840,"author":"EditorDavid","guid":282,"unread":true,"content":"Last month Microsoft pledged $4 billion (in cash and AI/cloud technology) to \"advance\" AI education in K-12 schools, community and technical colleges, and nonprofits (according to a blog post by Microsoft President Brad Smith). But in the launch event video, Smith also says it's time to \"switch hats\" from coding to AI, adding that \"the last 12 years have been about the Hour of Code, but the future involves the Hour of AI.\" \n\nLong-time Slashdot reader theodp writes:\n\nThis sets the stage for Code.org CEO Hadi Partovi's announcement that his tech-backed nonprofit's [annual educational event] Hour of Code is being renamed to the Hour of AI... Explaining the pivot, Partovi says: \"Computer science for the last 50 years has had a focal point around coding that's been â€” sort of like you learn computer science so that you create code. There's other things you learn, like data science and algorithms and cybersecurity, but the focal point has been coding. \n\n\"And we're now in a world where the focal point of computer science is shifting to AI... We all know that AI can write much of the code. You don't need to worry about where did the semicolons go, or did I close the parentheses or whatnot. The busy work of computer science is going to be done by the computer itself. \n\n\"The creativity, the thinking, the systems design, the engineering, the algorithm planning, the security concerns, privacy concerns, ethical concerns â€” those parts of computer science are going to be what remains with a focal point around AI. And what's going to be important is to make sure in education we give students the tools so they don't just become passive users of AI, but so that they learn how AI works.\" \n\nSpeaking to Microsoft's Smith, Partovi vows to redouble the nonprofit's policy work to \"make this [AI literacy] a high school graduation requirement so that no student graduates school without at least a basic understanding of what's going to be part of the new liberal arts background [...] As you showed with your hat, we are renaming the Hour of Code to an Hour of AI.\"","contentLength":2075,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Winners Announced in 2025's 'International Obfuscated C Code Competition'","url":"https://developers.slashdot.org/story/25/08/03/2216259/winners-announced-in-2025s-international-obfuscated-c-code-competition?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1754259540,"author":"EditorDavid","guid":281,"unread":true,"content":"Started in 1984, it's been described as the internet's longest-running contest. And yesterday 2025's International Obfuscated C Code Contest concluded â€” with 23 new winners announced in a special four-and-a-half-hour livestreamed ceremony! \nProgrammers submitted their funniest programs showcasing C's unusual/obscure subtleties while having some fun. (And demonstrating the importance of clarity and style by setting some very bad examples...) Among this year's winners were an OpenRISC 32-bit CPU emulator, a virtual machine capable of running Doom, and some kind of salmon recipe that makes clever use of C's U\"string\" literal prefix... \n\nBut yes, every entry's source code is ridiculously obfuscated. (\"Before you set off on your adventure to decode this program's logic, make sure you have enough food, ammo, clothes, oxen, and programming supplies,\" read the judge's remarks on the winner of this year's \"diabolical logistics\" prize. \"You'll be driving for 2170 miles through a wild wilderness inspired by Oregon Trail...\") And one entrant also struggled mightily in adapting a rough port of their program's old Atari 2600 version, but was never gonna give it up... \n\n\nThanks to long-time Slashdot reader achowe for bringing the news (who has submitted winning entries in four different decades, starting in 1991 and continuing through 2024)... \nIncluding a 2004 award for the best abuse of the contest's guidelines. (\"We are not exactly sure how many organisations will be upset with this entry, but we are considering starting an IOCCC standards body just to reign in the likes of Mr Howe....\")","contentLength":1604,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"The Toughest Programming Question for High School Students on This Year's CS Exam: Arrays","url":"https://developers.slashdot.org/story/25/08/03/0351204/the-toughest-programming-question-for-high-school-students-on-this-years-cs-exam-arrays?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1754246280,"author":"EditorDavid","guid":280,"unread":true,"content":"America's nonprofit College Board lets high school students take college-level classes â€” including a computer programming course that culminates with a 90-minute test. But students did better on questions about If-Then statements than they did on questions about arrays, according to the head of the program. Long-time Slashdot reader theodp explains:\nStudents exhibited \"strong performance on primitive types, Boolean expressions, and If statements; 44% of students earned 7-8 of these 8 points,\" says program head Trevor Packard. But students were challenged by \"questions on Arrays, ArrayLists, and 2D Arrays; 17% of students earned 11-12 of these 12 points.\" \n\n\"The most challenging AP Computer Science A free-response question was #4, the 2D array number puzzle; 19% of students earned 8-9 of the 9 points possible.\" \nYou can see that question here. (\"You will write the constructor and one method of the SumOrSameGame class... Array elements are initialized with random integers between 1 and 9, inclusive, each with an equal chance of being assigned to each element of puzzle...\") Although to be fair, it was the last question on the test â€” appearing on page 16 â€” so maybe some students just didn't get to it. \n\ntheodp shares a sample Java solution and one in Excel VBA solution (which includes a visual presentation). \n\nThere's tests in 38 subjects â€” but CS and Statistics are the subjects where the highest number of students earned the test's lowest-possible score (1 out of 5). That end of the graph also includes notoriously difficult subjects like Latin, Japanese Language, and Physics. \n\nThere's also a table showing scores for the last 23 years, with fewer than 67% of students achieving a passing grade (3+) for the first 11 years. But in 2013 and 2017, more than 67% of students achieved that passsing grade, and the percentage has stayed above that line ever since (except for 2021), vascillating between 67% and 70.4%. \n\n2018: 67.8%\n2019: 69.6%\n2020: 70.4%\n2021: 65.1%\n2022: 67.6%\n2023: 68.0%\n2024: 67.2%\n2025: 67.0%","contentLength":2043,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"5 Million People Tried Microsoft's AI Coding Tool 'GitHub Copilot' in the Last 3 Months","url":"https://developers.slashdot.org/story/25/08/03/037202/5-million-people-tried-microsofts-ai-coding-tool-github-copilot-in-the-last-3-months?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1754235240,"author":"EditorDavid","guid":279,"unread":true,"content":"Microsoft's AI coding assistant \"GitHub Copilot\" has now had 20 million \"all-time users,\" a GitHub spokesperson told TechCrunch.\n\n\nThat means 5 million people have tried out GitHub Copilot for the first time in the last three months â€” the company reported in April the tool had reached 15 million users. \nMicrosoft and GitHub don't report how many of these 20 million people have continued to use the AI coding tool on a monthly or daily basis â€” though those metrics are likely far lower. \nMicrosoft also reported that GitHub Copilot, which is among the most popular AI coding tools offered today, is used by 90% of the Fortune 100. The product's growth among enterprise customers has also grown about 75% compared to last quarter, according to the company... In 2024, Nadella said GitHub Copilot was a larger business than all of GitHub was when Microsoft acquired it in 2018. In the year since, it seems GitHub Copilot's growth rate has continued in a positive direction.","contentLength":977,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Fiverr Ad Mocks Vibe Coding - with a Singing Overripe Avocado","url":"https://developers.slashdot.org/story/25/08/03/0141234/fiverr-ad-mocks-vibe-coding---with-a-singing-overripe-avocado?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1754185380,"author":"EditorDavid","guid":278,"unread":true,"content":"It's a cultural milestone. Fiverr just released an ad mocking vibe coding. \nThe video features what its description calls a \"clueless entrepreneur\" building an app to tell if an avocado is ripe â€” who soon ends up blissfully singing with an avocado to the tune of the cheesy 1987 song \"Nothing's Gonna Stop Us Now.\" The avocado sings joyously of \"a new app on the rise in a no-code world that's too good to be true\" (rhyming that with \"So close. Just not tested through...\") \n\n\"Let them say we're crazy. I don't care about bugs!\" the entrepreneur sings back. \"Built you in a minute, now I'm so high off this buzz...\" \n\nBut despite her singing to the overripe avocado that \"I don't need a backend if I've got the spark!\" and that they can \"build this app together, vibe-coding forever. Nothing's going to stop us now!\" â€” the build suddenly fails. (And it turns out that avocado really was overripe...) Fiverr then suggests viewers instead hire one of their experts for building their apps... \n\nThe art/design site Creative Bloq acknowledges Fiverr \"flip-flopping between scepticism and pro-AI marketing.\" (They point out a Fiverr ad last November had ended with the tagline \"Nobody cares that you use AI! They care about the results â€” for the best ones higher Fiverr experts who've mastered every digital skill including AI.\") But the site calls this new ad \"a step in the right direction towards mindful AI usage.\"\n\nJust like an avocado that looks perfect on the outside, once you inspect the insides, AI-generated code can be deceptively unripe. \n\nFiverr might be feeling the impact of vibecoding themselves. The freelancing web site saw the company's share price fall over 14% this week, with one Yahoo! Finance site saying this week's quarterly results revealed Fiverr's active buyers dropped 10.9% compared to last year â€” a decrease of 3.4 million buyers which \"overshadowed a 9.8% increase in spending per buyer.\"\n \n\nEven when issuing a buy recommendation, Seeking Alpha called it \"a short-term rebound play, as the company faces longer-term risks from AI and active buyer churn.\"","contentLength":2092,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Anthropic Revokes OpenAI's Access To Claude Over Terms of Service Violation","url":"https://developers.slashdot.org/story/25/08/01/2237220/anthropic-revokes-openais-access-to-claude-over-terms-of-service-violation?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1754105400,"author":"BeauHD","guid":277,"unread":true,"content":"An anonymous reader quotes a report from Wired: Anthropic revoked OpenAI's API access to its models on Tuesday, multiple sources familiar with the matter tell WIRED. OpenAI was informed that its access was cut off due to violating the terms of service. \"Claude Code has become the go-to choice for coders everywhere, and so it was no surprise to learn OpenAI's own technical staff were also using our coding tools ahead of the launch of GPT-5,\" Anthropic spokesperson Christopher Nulty said in a statement to WIRED. \"Unfortunately, this is a direct violation of our terms of service.\" According to Anthropic's commercial terms of service, customers are barred from using the service to \"build a competing product or service, including to train competing AI models\" or \"reverse engineer or duplicate\" the services. This change in OpenAI's access to Claude comes as the ChatGPT-maker is reportedly preparing to release a new AI model, GPT-5, which is rumored to be better at coding.\n \nOpenAI was plugging Claude into its own internal tools using special developer access (APIs), instead of using the regular chat interface, according to sources. This allowed the company to run tests to evaluate Claude's capabilities in things like coding and creative writing against its own AI models, and check how Claude responded to safety-related prompts involving categories like CSAM, self-harm, and defamation, the sources say. The results help OpenAI compare its own models' behavior under similar conditions and make adjustments as needed. \"It's industry standard to evaluate other AI systems to benchmark progress and improve safety. While we respect Anthropic's decision to cut off our API access, it's disappointing considering our API remains available to them,\" OpenAI's chief communications officer Hannah Wong said in a statement to WIRED. Nulty says that Anthropic will \"continue to ensure OpenAI has API access for the purposes of benchmarking and safety evaluations as is standard practice across the industry.\"","contentLength":2014,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Stack Overflow Data Reveals the Hidden Productivity Tax of 'Almost Right' AI Code","url":"https://developers.slashdot.org/story/25/07/31/1314207/stack-overflow-data-reveals-the-hidden-productivity-tax-of-almost-right-ai-code?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1753967700,"author":"msmash","guid":276,"unread":true,"content":"Developers are growing increasingly frustrated with AI coding tools that produce deceptively flawed solutions, according to Stack Overflow's latest survey of over 49,000 programmers worldwide. The 2025 survey exposes a widening gap between AI adoption and satisfaction: while 84% of developers now use or plan to use AI tools, their trust has cratered. \n\nOnly 33% trust AI accuracy today, down from 43% last year. The core problem isn't broken code that developers can easily spot and discard. Instead, two-thirds report wrestling with AI solutions that appear correct but contain subtle errors requiring significant debugging time. Nearly half say fixing AI-generated code takes longer than expected, undermining the productivity gains these tools promise to deliver.","contentLength":768,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"AI Code Generators Are Writing Vulnerable Software Nearly Half the Time, Analysis Finds","url":"https://developers.slashdot.org/story/25/07/30/150216/ai-code-generators-are-writing-vulnerable-software-nearly-half-the-time-analysis-finds?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1753891260,"author":"msmash","guid":275,"unread":true,"content":"BrianFagioli writes: AI might be the future of software development, but a new report suggests we're not quite ready to take our hands off the wheel. Veracode has released its 2025 GenAI Code Security Report, and the findings are pretty alarming. Out of 80 carefully designed coding tasks completed by over 100 large language models, nearly 45 percent of the AI-generated code contained security flaws. \n\nThat's not a small number. These are not minor bugs, either. We're talking about real vulnerabilities, with many falling under the OWASP Top 10, which highlights the most dangerous issues in modern web applications. The report found that when AI was given the option to write secure or insecure code, it picked the wrong path nearly half the time.","contentLength":752,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Claude Code Users Hit With Weekly Rate Limits","url":"https://developers.slashdot.org/story/25/07/29/0156200/claude-code-users-hit-with-weekly-rate-limits?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1753754100,"author":"msmash","guid":274,"unread":true,"content":"Anthropic will implement weekly rate limits for Claude subscribers starting August 28 to address users running its Claude Code AI programming tool continuously around the clock and to prevent account sharing violations. The new restrictions will affect Pro subscribers paying $20 monthly and Max plan subscribers paying $100 and $200 monthly, though Anthropic estimates fewer than 5% of current users will be impacted based on existing usage patterns. \n\nPro users will receive 40 to 80 hours of Sonnet 4 access through Claude Code weekly, while $100 Max subscribers get 140 to 280 hours of Sonnet 4 plus 15 to 35 hours of Opus 4. The $200 Max plan provides 240 to 480 hours of Sonnet 4 and 24 to 40 hours of Opus 4. Claude Code has experienced at least seven outages in the past month due to unprecedented demand.","contentLength":813,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null}],"tags":["dev","slashdot"]}