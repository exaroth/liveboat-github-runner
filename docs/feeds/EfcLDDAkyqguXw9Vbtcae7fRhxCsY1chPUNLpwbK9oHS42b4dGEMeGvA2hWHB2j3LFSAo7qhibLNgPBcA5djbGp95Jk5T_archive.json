{"id":"EfcLDDAkyqguXw9Vbtcae7fRhxCsY1chPUNLpwbK9oHS42b4dGEMeGvA2hWHB2j3LFSAo7qhibLNgPBcA5djbGp95Jk5T","title":"top scoring links : programming","displayTitle":"Reddit - Programming","url":"https://www.reddit.com/r/programming/top/.rss?sort=top&t=day&limit=6","feedLink":"https://www.reddit.com/r/programming/top/?sort=top&t=day&limit=6","isQuery":false,"isEmpty":false,"isHidden":false,"itemCount":6,"items":[{"title":"Why is Git Autocorrect too fast for Formula One drivers?","url":"https://blog.gitbutler.com/why-is-git-autocorrect-too-fast-for-formula-one-drivers/","date":1737342691,"author":"/u/DreamyRustacean","guid":411,"unread":true,"content":"<p>A while ago, I happened to see <a href=\"https://x.com/dhh/status/1853955671647260806?ref=blog.gitbutler.com\" rel=\"noreferrer\">a tweet</a> from <a href=\"https://x.com/dhh?ref=blog.gitbutler.com\" rel=\"noreferrer\">@dhh</a> where he mistyped a Git command as  and was surprised to notice that Git figured out that he probably meant  and then gave him  to verify if that's what he wanted to run before it ran it anyways.</p><p>As David is a semi-professional <a href=\"https://x.com/dhhracing?ref=blog.gitbutler.com\" rel=\"noreferrer\">race car driver</a> in addition to being a fellow Ruby programming nerd, he naturally noticed that the amount of time that Git afforded him to react was impossible for even Formula One drivers.</p><p>Of course this seems like a ludicrous bit of Git functionality, but I figured if this was surprising to David, you too might wonder why Git gave him (and possibly gives you) about the length of time that it takes a human eye to blink in order to:</p><ul><li>determine if it's correct</li><li>attempt to cancel the command</li></ul><p>What could possibly be the reason to wait ? So little time is essentially equivalent to simply running the command.</p><p>Well, it's a combination of a misunderstanding, a misconfiguration, and the suggestion, 17 years ago, of a somewhat questionable unit of time by the Git maintainer himself.</p><h2>How was this designed to work?</h2><p>It's important to note that this is  the default functionality of Git.</p><p>The  response to typing a command that doesn't exist is to simply not run anything, figure out which commands you might have meant by string similarity and then just exit. </p><p>If most of you type , you'll probably get this instead:</p><pre><code>❯ git pushy\ngit: 'pushy' is not a git command. See 'git --help'.\n\nThe most similar command is\n        push</code></pre><p>Originally, if you typed an unknown command, it would just say \"this is not a git command\". Then in 2008, Johannes Schindelin (somewhat jokingly) introduced a <a href=\"https://public-inbox.org/git/alpine.DEB.1.00.0807222100150.8986@racer/?ref=blog.gitbutler.com\" rel=\"noreferrer\">small patch</a> to go through all the known commands, show you what is most similar to what you typed and if there is only one closely matching, simply run it.</p><p>Then Alex Riesen introduced <a href=\"https://public-inbox.org/git/20080722210354.GD5113@blimp.local/?ref=blog.gitbutler.com\" rel=\"noreferrer\">a patch</a> to make it configurable via the  setting. In this initial patch, this setting was simply a boolean. </p><p>Since Git config settings that expect a boolean will interpret a  value as , you could originally set  to  to have it automatically run the corrected command rather than just tell you what is similar.</p><p>As part of the conversation around this patch, Junio Hamano, to this day the Git maintainer, <a href=\"https://public-inbox.org/git/7vsku1jz4u.fsf@gitster.siamese.dyndns.org/?ref=blog.gitbutler.com\">suggested</a>:</p><pre><code>Please make autocorrect not a binary but optionally the number of\ndeciseconds before it continues, so that I have a chance to hit ^C ;-)</code></pre><p>Which was what the setting value was changed to in the patch that was eventually accepted. This means that setting  to  logically means \"wait 100ms (1 decisecond) before continuing\".</p><p>Now, why Junio thought  was a reasonable unit of time measurement for this is never discussed, so I don't really know why that is. Perhaps 1 full second felt too long so he wanted to be able to set it to half a second? We may never know. All we truly know is that this has never made sense to anyone ever since.</p><p>, the reason why it waits 100ms for David is that at some point he presumably learned about this setting, quite reasonably assumed that it was a boolean and set it to what Git config also generally considers to be a 'true' value in order to enable it:</p><pre><code>❯ git config --global help.autocorrect 1</code></pre><p>Not understanding that in this context, this means \"wait 1 decisecond, then do whatever you think is best\" rather than \"please turn this feature on\".</p><p>So, clearly you can set it to  for a full second or whatever. However, over the years, this setting has gathered a few other options that it will recognize. </p><p>According to the <a href=\"https://git-scm.com/docs/git-config?ref=blog.gitbutler.com#Documentation/git-config.txt-helpautoCorrect\" rel=\"noreferrer\">documentation</a>, here are the values it can be set to:</p><ul><li>0 (default): show the suggested command.</li><li>positive number: run the suggested command after specified deciseconds (0.1 sec).</li><li>\"immediate\": run the suggested command immediately.</li><li>\"prompt\": show the suggestion and prompt for confirmation to run the command.</li><li>\"never\": don’t run or show any suggested command.</li></ul><p>Honestly, \"prompt\" is probably what most people would find the most reasonable, rather than a specific amount of time to wait for you to cancel the command.</p><p>If you  want to have it prompt you, you can run this:</p><pre><code>❯ git config --global help.autocorrect prompt\n\n❯ git pushy\nWARNING: You called a Git command named 'pushy', which does not exist.\nRun 'push' instead [y/N]?</code></pre><p>To keep picking on David, he followed up after doing some quick testing to see what the logic could be and it turns out that Git won't just take wild guesses. </p><p>There is a point where it will simply assume you're way off and not guess anything:</p><p>However, it's interesting to play around with this a bit:</p><pre><code>❯ git bass\nWARNING: You called a Git command named 'bass', which does not exist.\nRun 'rebase' instead [y/N]? n\n\n❯ git bassa\ngit: 'bassa' is not a git command. See 'git --help'.\n\n❯ git dm\ngit: 'dm' is not a git command. See 'git --help'.\n\nThe most similar commands are\n        am\n        rm\n\n❯ git dma\nWARNING: You called a Git command named 'dma', which does not exist.\nRun 'am' instead [y/N]?</code></pre><p>So,  is close enough to  for it to guess that this could be what you mean. But  is not close enough for it to  think you maybe meant .</p><p>Also,  could mean  or , but interestingly it matches on the end of the string and not necessarily from the beginning. Also,  confidently matches .</p><p>As some of you may have guessed, it's based on a fairly simple, modified Levenshtein distance algorithm - which is basically a way to figure out how expensive it is to change one string into a second string given single character edits, with some operations being more expensive than others. </p><p>It has a hard coded cutoff, so once it's too expensive for any of the known commands, it just assumes you really messed up, which is why some of these don't match anything and others, even though quite different, match several options.</p><p>In going through a bunch of the related autocorrect Git code in order to research this little blog post, I realized that there could be a relatively simple and largely backwards compatible fix. </p><p>Since a  value is so fast, it's in all human terms functionally equivalent to \"immediately\", I wrote up a <a href=\"https://lore.kernel.org/git/09e516e7-37a5-4489-a30b-f26dd2462fc3@revi.email/T/?ref=blog.gitbutler.com#t\" rel=\"noreferrer\">small patch</a> to interpret a  as \"immediately\" rather than \"wait 100ms\".</p><p>Junio came back to request that instead of special casing the \"1\" string, we should properly interpret any boolean string value (so \"yes\", \"no\", \"true\", \"off\", etc), so version two of my patch is currently in flight to additionally do that. </p><p>If I can get this landed, maybe future versions of Git will no longer test the mettle of Formula One drivers.</p><p>Anyhow, hope you enjoyed that little trip down this old alley of seemingly strange Git functionality. As is often the case with Git, there is some hidden method to the apparent madness, and like any open source project, there is a path to make it slightly better!</p>","contentLength":6695,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1i5gqao/why_is_git_autocorrect_too_fast_for_formula_one/"},{"title":"An illustrated guide to Amazon VPCs","url":"https://www.ducktyped.org/p/why-is-it-called-a-cloud-if-its-not","date":1737334562,"author":"/u/egonSchiele","guid":410,"unread":true,"content":"<p><em>In this section, I talk about why VPCs were invented and how they work. This is critical to understand because almost everything you do in AWS will happen inside of VPC. If you don't understand VPCs, it will be difficult to understand any of the other networking concepts.</em></p><p>If you're reading this, maybe you have one of these</p><p>and you just found out that to put your app on AWS, you need all of this:</p><p>And you have no idea what VPCs, subnets and so on are.</p><p>This is the story of VPCs (Virtual Private Cloud)s, our first big topic. Many moons (and suns) ago, some AWS engineers were sitting in a room. They had a serious issue.</p><p>\"Guys, lets talk business. Why aren't more companies moving to AWS?\" they said.</p><p>\"Maybe because all instances run in a single shared network, which means users can access each other's instances, and see each other's data,\" someone said.</p><p>\"Maybe because it's hard for them to move their existing servers to AWS, because of IP address conflicts,\" someone else said.</p><p>\"Wait… what are IP address conflicts?”</p><p><em>Now we both have servers with the same IP address!</em></p><blockquote><p>Sidebar: You can find your local IP address using `ipconfig getifaddr en1` (works for Macs for wireless internet connections).</p></blockquote><p>Bam: IP address conflict. Every server in a network needs to have a unique IP address for the same reason that every house in a city needs to have a unique address. Otherwise, if someone has a package, they wouldn't know which house to deliver it to.</p><p>This was a huge problem for AWS! I mean, see how serious these engineers look:</p><p>This IP conflict issue meant people with on-prem servers had no easy way to gradually move to AWS. Think of all the potential customers they were losing! </p><p>I'm giving you this background so you can understand why VPCs were invented. IP address conflicts weren't the only issue. In AWS, everyone's servers used to be on the same network, which meant if you were careless, it was easy for anyone to connect to your server and look at all kinds of sensitive data!</p><p>For both these reasons, Amazon needed to give each customer their own private network, instead of having them all on the same shared network. And so VPCs were born.</p><p>So there are two problems we're trying to solve:</p><ol><li><p>The fact that users can access each other's instances because they're in one big shared network.</p></li></ol><blockquote><p>Maybe you're wondering, \"why can't we just change the IP addresses so all machines have a unique IP address?\" Well, in networking, you set up some things based around specific IP addresses (I'll get to exactly what stuff later), so that idea would require a lot of work in practice.</p></blockquote><p>Separate networks would also solve the security problem.</p><p>By the way, why am I spending so long on VPCs? Isn't this post about putting one of these</p><ol><li><p>Because everything we will build happens in a VPC, so it's the starting point for things.</p></li><li><p>Because a VPC is not something you can see, and I like to visualize my internet architecture. Other people visualize it in a way that's really confusing for me, and I want to make it less confusing for you.</p></li></ol><p><a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html\" rel=\"\">AWS docs</a></p><p>And they'll draw an image that looks like this:</p><p>But less pretty obviously – this is what theirs look like:</p><ul></ul><p>Both of those are physical places. But what is the VPC? Is it a big tarp that sits on top of the data centers? Is it a dark fog? Is it a general feeling of unease that blankets the region, as all the data centers play Radiohead's \"Fitter, Happier\" on repeat?</p><p>We've talked about why AWS needed VPCs, and the idea behind VPCs, but how are they implemented? How do they actually work?</p><p>Your instances in AWS always run inside a VPC. But in real life, of course, your instances are just running on servers in AWS datacenters.</p><p>Suppose I have an instance A on server 1, and I want to talk to another instance B on server 2.</p><p>The mapping service is what ensures that we can never connect to each other's instances. Through the mapping service, all my instances are connected together, and they can have any IP address I want, because it's like they're namespaced to me. The mapping service is what creates the private network inside AWS for me.</p><p>So when you think VPC, picture a service that connects all these instances together.</p><p>Going back to this image, we can now understand what it means:</p><p>That VPC box just means the scope of the mapping service. A mapping service can connect EC2 instances that are on servers in different availability zones, which is why the VPC is overlaid over the two availability zones. But the mapping service can't connect instances in different regions, so the VPC doesn't span regions.</p><p>So we find out that they don't play \"Fitter, Happier\" in the data centers after all. Maybe it's just a recording of Jeff Bezos singing \"Money\" by Pink Floyd.</p><p>Throughout this guide, I'll show you how to create AWS resources using Terraform. I find Terraform easier to follow than point-and-click on the AWS console, because you can just copy the code and run it.</p><p>Here's the Terraform code to create a VPC:</p><pre><code>resource \"aws_vpc\" \"main\" {\n  cidr_block       = \"10.0.0.0/16\"\n}</code></pre><p><a href=\"https://gist.github.com/egonSchiele/04278baccb63693f4f31aeb88fa8bb8e\" rel=\"\">The full code listing is here</a></p><ul><li><p>In AWS, every customer has their own private network called the VPC.</p></li><li><p>Without private networks, we run into IP address collisions.</p></li><li><p>Without private networks, everyone is on the same network, which is really bad for security.</p></li><li><p>VPCs are implemented using the mapping service.</p></li></ul>","contentLength":5288,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1i5e5ru/an_illustrated_guide_to_amazon_vpcs/"},{"title":"Understanding How Compression Works","url":"https://cefboud.github.io/posts/compression/","date":1737314542,"author":"/u/Cefor111","guid":412,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1i56j96/understanding_how_compression_works/"},{"title":"MicroPie - An ultra-micro Python web framework that gets out of your way","url":"https://patx.github.io/micropie/","date":1737311631,"author":"/u/Miserable_Ear3789","guid":408,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1i55clr/micropie_an_ultramicro_python_web_framework_that/"},{"title":"All Lisp Indentation Schemes Are Ugly","url":"https://aartaka.me/lisp-indent.html","date":1737291608,"author":"/u/aartaka","guid":413,"unread":true,"content":"<a href=\"https://aartaka.me/about.html\">By Artyom Bologov</a><p>\nOnce you get used to Lisp, you stop noticing the parentheses and rely on indentation instead.\nThat's partially why there are several alternative syntaxes based solely on indentation.\n<a href=\"https://aartaka.me/wisp.html\">Like Wisp</a>,\n<a href=\"https://srfi.schemers.org/srfi-110\">or sweet expressions</a>.\nBut then, the question stands: how to indent the code, actually?\nEspecially so—in Lispy syntax.\n\n</p><section><p>\nA solution that will likely satisfy a proponent of any indentation style:\n\"Just put it all on one line lol.\"\nOf course, lines are not infinitely readable and there's a column cap,\n(whether natural or enforced.)\nSo this line (adapted from\n<a href=\"https://github.com/aartaka/cl-blc\">cl-blc</a>,)\nwhile devoid of indentation problems, is unreadable:\n\n</p><figure><pre lang=\"lisp\">(list (tree-transform-if predicate transformer (first tree) depth) (tree-transform-if predicate transformer (second tree) depth))\n</pre><figcaption>Absurdly long line of a Lisp code</figcaption></figure><p>\nThat's the problem statement: some forms need multiple lines and indentation.\nBut what kind of indentation?\n\n</p></section><section><p>\nThere's an established style of indentation: align the function arguments on the same column:\n\n</p><figure><pre lang=\"lisp\">(list (tree-transform-if predicate transformer (first tree) depth)\n      (tree-transform-if predicate transformer (second tree) depth))\n(inc! d (/ (* (mtx:get x i k)\n              (mtx:get x j k))\n           (1+ (* (vec:get dl l)\n                  (vec:get eval k)))))\n(let ((s (if (&lt; j i) j i))\n      (l (if (&lt; j i) i j)))\n  (+ (* s 1/2 (- (* 2 d-size) (1+ s)))\n     l\n     (- s)))\n</pre><figcaption>Examples of function-like indentation</figcaption></figure><p>\nThis style if useful in reflecting the code structure: just look at what's indented and what's outdented.\nIt works especially well for short function/macro/form names, like  or .\nNot so well for long ones:\n\n</p><figure><pre lang=\"lisp\">(tree-transform-if predicate\n                   transformer\n                   (second tree)\n                   depth)\n</pre><figcaption>A problematic function indentation</figcaption></figure><p>\nNineteen!\nNineteen spaces of indentation!\nIt's getting unruly.\nSuch an indent, when used in deeply nested code, makes it too wide and unreadable.\nIf you add the strict one-per-line alignment of arguments, it's also painfully long line-wise.\nLet's handle the verticality first:\n\n</p></section><section><p>\nNo sane Lisper would write a  with every keyword on its own line:\n\n</p><figure><pre lang=\"lisp\">(loop for\n      i\n      below\n      10\n      collect\n      i)\n</pre></figure><p>\n(Some pretty-printers do that too (I'm looking at you, ECL!), but that's a topic for another day.)\n\n</p><p>\nWe don't have to put every argument on its own line.\nThat's the intuition behind the space-filling indent:\n\n</p><figure><pre lang=\"lisp\">(loop for i below 10\n      collect i)\n</pre></figure><p>\nOne can go as far as splitting the argument list in arbitrary places.\nRegardless of semantics.\n(Looking at you, SBCL!)\nPutting some keyword arguments on the first line, and then some on the second/third/etc.\nThis utilizes the space efficiently enough to be used.\nBut what if one's stuck really deep in nesting levels?\n\n</p></section><section><p>\nNow what I'm about to suggest is likely not to your taste:\n\n</p><figure><pre lang=\"lisp\">(tree-transform-if\n predicate transformer (second tree) depth)\n</pre><figcaption>My indentation style suited for deeply nested code</figcaption></figure><p>\nThis style of indentation\n(putting function name on one line, and arguments on the other)\nwas frowned upon more than once in my practice:\n\n</p><ul><li> It messes up with nesting identification: one space is not enough.\n</li><li> It makes the code too vertical.\n</li><li> And it certainly isn't idiomatic.\n</li></ul><p>\nBut what this style achieves is perfect indentation control.\nYou only get one space of indentation per form.\nComplex algorithms are easier to read when written in this style.\n\n</p><p>\nAnd!\nThis style also plays well with most indentation tools, even the simplest ones.\nI had this situation more than once:\n\n</p><ul><li> Writing a  macro in Scheme;\n</li><li> And realizing that Emacs/Geiser indentation functions think that this macro is a procedure.\n</li></ul><p>\nIndenting all the arguments of the /-like macro in this sick style helps:\n\n</p><figure><pre lang=\"scheme\">;; From\n(mtx:with-column (uab-col uab index-ab)\n                 (mtx:set!\n                  ppab 0 index-ab\n                  (blas:dot hi-hi-eval uab-col)))\n;; To\n(mtx:with-column\n (uab-col uab index-ab)\n (mtx:set!\n  ppab 0 index-ab\n  (blas:dot hi-hi-eval uab-col)))\n</pre><figcaption>Sick indent helps you to manage macros</figcaption></figure></section><section><p>\nI worked on a deeply nested corporate codebase functions.\nIn Clojure.\nAnd I realized why threading macros exist.\nTo make the logic more sequential and readable, true.\nBut also to tame excessive nesting!\n\n</p><p>\nUnfortunately, threading/arrow macros don't always work.\nCommon Lisp in particular is extremely unfriendly to threading macros.\nArrows imply a consistent thread-first or thread-last functions.\nBut CL's standard lib is too inconsistent for that to work.\nSo we're left with picking an indentation style we don't necessarily like.\n\n</p></section><section><p>\nI often prefer the macro-like indentation, because I sometimes write deeply nested code.\nBut I see the value in all the other indentation schemes!\n\n</p></section>","contentLength":4702,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1i4xwk5/all_lisp_indentation_schemes_are_ugly/"},{"title":"UNLINK vs DEL - A deep dive into how it works internally in Redis.","url":"https://www.pankajtanwar.in/blog/unlink-vs-del-a-deep-dive-into-how-it-works-internally-in-redis","date":1737268352,"author":"/u/the2ndfloorguy","guid":409,"unread":true,"content":"<p>A couple of days back, I found myself debating the differences between <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/redis/redis\">Redis</a>'  and  commands with my friend <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.linkedin.com/in/sarthak-dalabehera\">Sarthak</a> in a social media <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.linkedin.com/posts/pankajtanwarbanna_in-redis-whenever-a-key-is-deleted-or-expired-activity-7280448080246710272-I4FY/\">comment section</a>. An interesting take; I come across that the majority of the people seemed to believe is <em>\" is a blocking command. while  is non-blocking - so  is better\"</em>. I don't fully agree with this characterisation.</p><p>It's somewhat true - but it's not the full story. As an engineer, it's my moral duty to unnecessarily dive into the rabbit hole and dig into the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/redis/redis\">Redis codebase</a> to see the actual implementation. Let's see what's actually happening under the hood.</p><p>DEL vs UNLINK - the only difference is the way they free the value (freeing the key is straightforward). Respectfully, It will be completely wrong to just say one is blocking and another is not.</p><p>UNLINK is a smart command: it's not always non-blocking/async. It calculates the deallocation cost of an object, and if it is very small (cost of freeing &lt; 64), it will just do what DEL is supposed to do and free the object ASAP. Otherwise, the object is sent to the background queue for processing.</p><p>For my internet friends who aren't familiar with <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/redis/redis\">Redis</a> - it's a super popular, distributed in-memory key-value database. As the name suggests, both  and  commands do the same thing - they remove the keys from Redis.</p><p>A quick Google search tells you why <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://redis.io/docs/latest/commands/unlink/\">UNLINK</a> was introduced in Redis 4.0, if we already had DEL.  is very similar to  but it performs the memory reclaiming in a different thread - so it's not blocking other operations, while DEL is. In simple terms, UNLINK just unlinks the key from the keyspace, and actual key removal happens later, asynchronously - so it's faster.</p><blockquote><p>Fun fact - In redis 6.0, a new configuration  was introduced - so if this is set to true, your DEL command runs like UNLINK.</p></blockquote><p>But how it's implemented internally?</p><p>It doesn't take a genius to find the very famous <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/redis/redis/blob/unstable/src/db.c\"></a> in redis codebase, and head over to <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/redis/redis/blob/unstable/src/db.c#L928\"></a> method - thanks to Github symbol search.</p><div><pre><code><div>client c</div><div>cserverlazyfree_lazy_user_del</div></code></pre></div><p>Not surprised - It just proxies the  method with the lazy flag which is sent as the value of  redis server config. I'm sure for , they are gonna just set it to always true - neat.</p><div><pre><code><div>client c lazy</div><div>cdbcargvj KEY_DELETED</div><div> deleted   lazy cdbcargvj</div><div>cdbcargvj</div><div>ccdbcargvj</div><div>NOTIFY_GENERIC</div><div>cargvjcdbid</div><div>cnumdel</div></code></pre></div><p>There is too much to go through - but this beautiful ternary operator got my attention - the lazy flag decides which method to call. Now, we will go deeper into  and come back to  in UNLINK code analysis.</p><blockquote><p>Hold on - Redis using  as variable name? Where are all those clean code evangelists lecturing me about meaningful variable names? never mind.</p></blockquote><p>Let's get into . Let me guess - it shouldn't be hard deleting a key from a hash table. Ah, not really. My immature high-level language lover mind took garbage collectors for granted. For a language like C, it's very very interesting and important to pay attention to how memory gets released.</p><div><pre><code><div>redisDb db robj key</div><div>db key DB_FLAG_KEY_DELETED</div></code></pre></div><p>Ah, it's a proxy to  with  argument set as 0. Cool. Let's go to  .</p><div><pre><code><div>redisDb db robj key async flags</div><div> slot keyptr</div><div>    dictEntry de dbkeys slot keyptrplinktable</div><div>db slot valtypeval</div><div>dbhexpires val</div><div> need to incr to retain val </div><div>keyvaldbidflags</div><div>dbkeyvaltype</div><div> greater than  so freeObjAsync doesnt work </div><div>keyde dbid</div><div>dbkeys slot de</div><div> the key because it is shared with the main dictionary</div><div>dbexpires slot keyptr</div><div>dbkeys slot de plink table</div></code></pre></div><p>Ahh I too found it overwhelming !! But I did find a couple of things really interesting here.</p><p>The method <code>int slot = getKeySlot(key-&gt;ptr);</code> calculates the slot for the given key. Redis uses a hash slot mechanism to distribute keys across nodes in a cluster. Shamelessly plugging <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://x.com/the2ndfloorguy/status/1873751525752762779\">my tweet</a> that explains the mechanism in a little detail.</p><p>Redis moved away from the traditional way of removing the key long back. <code>kvstoreDictTwoPhaseUnlinkFind</code> method finds the key in the main dictionary using the slot number and the key. This is the first phase - it does not delete the key instead it sets up  and . In the second phase - key will be safely removed. <code>kvstoreDictTwoPhaseUnlinkFree</code> is what I'm referring to here. This immediately releases the memory.</p><p>The  code block does a bunch of really nice things, like scheduling the memory to be freed up asynchronously. And also setting up the value of entry in main dict to NULL to mark it for deletion. We will dive into it in the UNLINK section.</p><h3><a href=\"https://www.pankajtanwar.in/blog/unlink-vs-del-a-deep-dive-into-how-it-works-internally-in-redis#4-delete-expiration-data\" aria-hidden=\"true\" tabindex=\"-1\"></a>4. Delete expiration data</h3><p>Interesting thing to note is redis maintains 2 dictionary - the main key dictionary and expiration dictionary. So, as a key is deleted - it needs to be removed from the expiration dict as well - manually. This is what -  method does.</p><p>Well - so what have you learnt here? The normal DEL command implementation is quite straight forward. Synchronously remove the key and release the memory using the two-phase linking mechanism. This is done in both the main key dictionary and expiration dictionary. And if there is an inner reference - recursive deletion comes to the rescue.</p><p>As we already covered the core logic and the code is generic with the  flag being passed down, lets' dive straight into how async delete is actually happening.</p><div><pre><code><div>keyde dbid</div><div>dbkeys slot de</div></code></pre></div><p>Wohoo, jump to .</p><div><pre><code><div>robj key robj obj dbid</div><div>    size_t free_effort keyobjdbid</div><div> possible This rarely happens however sometimes the implementation</div><div> of parts of the Redis core may call  to protect</div><div> objects then call </div><div>free_effort  LAZYFREE_THRESHOLD  objrefcount </div><div>lazyfree_objects</div><div>lazyfreeFreeObjectobj</div></code></pre></div><p>Damn, that's smart - it <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/redis/redis/blob/unstable/src/lazyfree.c#L129\">calculates</a> the cost of deleting the object. Once it gets how expensive it is (free_effort indicates efforts in terms of CPU, time and memory usage may be?) - it decides to either free the memory immediately or delay it for later once it has enough CPU cycles to do it.</p><p> is set as 64. And the check  ensures that object is no-longer referenced anywhere else otherwise it might get stuck in removing it's references recursively.</p><p> is just an atomic increment counter operation on global variable  that has the number of objects currently being freezed lazily. It helps redis in scheduling the operations in the background.</p><p> is responsible for creating a job in background IO (BIO) to lazily free the object.  is a callback function defined <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/redis/redis/blob/unstable/src/lazyfree.c#L13\">on line 13 of this file</a>.</p><h2><a href=\"https://www.pankajtanwar.in/blog/unlink-vs-del-a-deep-dive-into-how-it-works-internally-in-redis#how-effort-for-deleting-the-key-is-calculated\" aria-hidden=\"true\" tabindex=\"-1\"></a>How effort for deleting the key is calculated?</h2><p>Redis' codebase says - the return value is not always the actual number of allocations the object is composed of, but a number proportional to it.</p><ul><li>for strings, it is always 1 as it does not require multiple allocations to free - so constant effort</li><li>for list objects - it is the number of elements in the quicklist.</li><li>for set objects - it is the number of elements in the hash table as set is backed by hashtable.</li><li>for sorted set objects - it is the length of skiplist</li><li>for hash objects - it is the number of elements in the hash table</li><li>for stream objects - it is the number of RAX nodes + consumer groups + entries in pending entry list (PEL)</li><li>for module - the process of calculating the value in this case seems a bit complicated for me to understand. It uses .</li></ul><h2><a href=\"https://www.pankajtanwar.in/blog/unlink-vs-del-a-deep-dive-into-how-it-works-internally-in-redis#the-magic-number-lazyfree_threshold--64\" aria-hidden=\"true\" tabindex=\"-1\"></a>The magic number LAZYFREE_THRESHOLD = 64</h2><p>Although, there is no clear explanation of  as 64, so it seems a bit arbitrary. A couple of my internet stranger friends and chatGPT says this number was chosen by  redis developers post a massive benchmarking. The consideration was trade-off such as performance vs blocking, memory management and avoiding overhead.</p><p>Now that I’ve wrapped up my ramblings, I invite your comments on it. If you find any technical inaccuracies, let me know, please. I'm active on X (twitter) as&nbsp;<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/the2ndfloorguy\">@the2ndfloorguy</a>&nbsp;and if you are interested in what an unfunny &amp; strange programmer will do next, see you there!</p><h4><a href=\"https://www.pankajtanwar.in/blog/unlink-vs-del-a-deep-dive-into-how-it-works-internally-in-redis#references-that-ive-used\" aria-hidden=\"true\" tabindex=\"-1\"></a>References, that I've used.</h4>","contentLength":7653,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1i4sdkx/unlink_vs_del_a_deep_dive_into_how_it_works/"}]}