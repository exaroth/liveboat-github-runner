{"id":"82kPqomaPXmNomrHzpZWfbkQxiiNUBTAYKxHR5qZBEpf","title":"Hacker News: Show HN","displayTitle":"HN Show","url":"https://hnrss.org/show?points=60","feedLink":"https://news.ycombinator.com/shownew","isQuery":false,"isEmpty":false,"isHidden":false,"itemCount":18,"items":[{"title":"Show HN: Modest – musical harmony library for Lua","url":"https://github.com/esbudylin/modest","date":1738492350,"author":"esbudylin","guid":168,"unread":true,"content":"<p>This is a project I've been building in my spare time over the past few months. It's a library that provides methods for working with musical harmony ‒ intervals, notes, chords. For example, it can parse almost any chord symbol (Fmaj7, CminMaj9, etc) and turn it into notes, or it can identify a chord from a given set of notes.</p><p>I started this project with the idea of using formal grammar to parse chord symbols. I wanted to use it instead of a hand-written parser, which is the common approach among similar libraries. Lua caught my attention because of Lpeg, a Parsing Expression Grammar library that is both fast and easy to use. An additional motivation for using Lua was the lack of comparable libraries for it, even though the language is commonly used in audio programming.</p><p>However, despite being a Lua library, the project itself is written in Fennel — a \"lispy\" language that transpiles to Lua. Fennel has features that make writing code for the Lua platform much more pleasant: a concise syntax, macros, and destructuring — a feature Lua sorely lacks!</p><p>In the process, I definitely learned a lot about music theory, although my new knowledge is quite one-sided. By working on this library, I know a thing or two about types and structure of chords, but I learned almost nothing about their composition and transformation. Perhaps these will be the directions I explore next in the project.</p>","contentLength":1402,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42907765"},{"title":"Show HN: TalkNotes – A site that turns your ideas into tasks","url":"https://www.talknotes.tech/","date":1738410213,"author":"ajlkshdaksjd","guid":166,"unread":true,"content":"<div><h3>Turn any audio into smart notes</h3><div>Turn hours of note taking into seconds. Record voice notes or upload recorded audio, and let the AI transcribe &amp; structure them into actionable text. Create todo lists, notes, flashcards, transcripts, and more! Works in 100+ languages.</div></div>","contentLength":266,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42897662"},{"title":"Show HN: Perforator – cluster-wide profiling tool for large data centers","url":"https://github.com/yandex/perforator","date":1738396834,"author":"BigRedEye","guid":165,"unread":true,"content":"<p>Hey HN! We are happy to share Perforator – our internal cluster-wide profiler with great support for native languages and a built-in AutoFDO pipeline to simplify sPGO builds. Perforator allows you to profile most binaries without having to recompile or adjust the build process. We use it at Yandex to profile each pod inside a large cluster at modest speed (99Hz), collecting petabytes of profiles every day.</p><p>Inspired by Google-Wide Profiling, we started continuous profiling years ago with simple tools like poormansprofiler.org. With the rise of eBPF, we came up with a simple and elegant solution providing detailed profiles without noticeable overhead. Pretty wild when you can see the guts of your production binaries in a flamegraph without them even noticing.</p><p>- Our main contribution is infrastructure for continuous PGO using AutoFDO. Google and Meta have done tremendous work on building PGO infrastructure, and we made the last missing piece of the puzzle to make this work well and scalable.</p><p>- Native binaries are profiled through eh_frame analysis, interpreted/JIT-compiled languages are profiled through perf-pid.map or hardcoded structure offsets.</p><p>- We render profiles in multiple ways, the most common one is a fast implementation of FlameGraphs, rendering 1M frames in 100ms.</p><p>- We provide Helm charts to easily deploy Perforator on your k8s cluster.</p><p>- You can use Perforator in standalone mode as a replacement for perf record.</p><p>I'd love to answer your questions about the tool!</p>","contentLength":1489,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42896716"},{"title":"Show HN: Uscope, a new Linux debugger written from scratch","url":"https://github.com/jcalabro/uscope","date":1738343221,"author":"jcalabro","guid":164,"unread":true,"content":"<p>Hi! I've been building a debugger on my nights and weekends because it's fun, and I personally need a better debugger for my work. GDB and LLDB pain me greatly; we can and will do better!</p><p>As explained in the README, it's still very early-days and it's not ready for use yet, but check back often because it's improving all the time!</p><p>Thanks for taking a look!</p>","contentLength":356,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42889407"},{"title":"Show HN: voidDB – A transactional key-value DB written in Go for 64-bit Linux","url":"https://github.com/voidDB/voidDB","date":1738331106,"author":"joel-ling","guid":163,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42887581"},{"title":"Show HN: Ldump – serialize any Lua data","url":"https://github.com/girvel/ldump","date":1738315792,"author":"girvel","guid":162,"unread":true,"content":"<p>Some time ago, I was implementing saves for my LOVE2D game. I wanted to do a full dump of the game state -- which included closures (AI), complex graphs, sets with tables as keys and also fundamentally non-serializable data (coroutines and userdata), that require user-defined serialization/deserialization logic. I went through every Lua serialization library -- none covered all data types/cases. So I wrote my own.</p><p>It is a polished version, thoroughly annotated, tested and documented. It is made to be as functional and customizable as possible (or at least I did everything I could think of). I would be happy to hear suggestions/corrections for both code and documentation -- even nitpicky ones.</p>","contentLength":700,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42886079"},{"title":"Show HN: Ahey – A simple pub-sub service built on top of web push","url":"https://ahey.io/","date":1738280369,"author":"vasanthv","guid":161,"unread":true,"content":"<section><p>\n\t\t\t\t\tAhey is a simple pub-sub service built on top of web push. It lets you send unlimited push notifications to\n\t\t\t\t\tany browser with just a simple HTTP POST request. Works in all major browsers. </p><div>Already have an account? <a href=\"https://ahey.io/login\">Log in</a></div></section>","contentLength":229,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42883363"},{"title":"Show HN: Audiocube – A 3D DAW for Spatial Audio","url":"https://www.audiocube.app/","date":1738242754,"author":"noahfk","guid":160,"unread":true,"content":"<h2><strong>It’s Not Just Another VST Plugin…</strong></h2><p>Audiocube is a standalone 3D DAW, built with a custom audio, physics, and graphical engine - enabling more depth and control than any plugin. </p><p>Move your workflow away from a cluttered and compromised VST-based setup, and embrace a modern solution for immersive audio creation and exploration. </p>","contentLength":329,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42877399"},{"title":"Show HN: Mcp-Agent – Build effective agents with Model Context Protocol","url":"https://github.com/lastmile-ai/mcp-agent","date":1738167967,"author":"saqadri","guid":159,"unread":true,"content":"<p>Hey HN, I spent my xmas break building an agent framework called mcp-agent [1](<a href=\"https://github.com/lastmile-ai/mcp-agent\">https://github.com/lastmile-ai/mcp-agent</a>) for Model Context Protocol [2]. It makes it easy to build AI apps with MCP servers, and implements every pattern from the popular Building Effective Agents blog [3] as well as OpenAI’s Swarm [4]. I’m sharing it early to get community feedback on where to take it from here, and to ask for contributions.</p><p>For those who aren’t familiar with MCP, I think of it as a standardized interface to let AI communicate with software via tool calls, resources and prompts.</p><p>mcp-agent provides a higher level interface to build apps with MCP. It handles the connection management of MCP servers so you don’t have to. It also implements the Building Effective Agents patterns:\n- Augmented LLM (an LLM with access to one or more MCP servers)\n- Router, Orchestrator-Worker, Evaluator-Optimizer, and more\n- Swarm</p><p>The key design principles are composability and reusability – every pattern is an AugmentedLLM itself, so you can chain them into more complex workflows.</p><p>Some background: I worked on LSP [5] and language servers at Microsoft, and saw firsthand how standards and protocols can revolutionize developer workflows. Before LSP every IDE had its own esoteric ways of providing language services. LSP changed all that, and arguably made every language server better, since they can focus on improving a single implementation for all clients.</p><p>I think AI development is in a similar pre-LSP space right now. There are tons of frameworks [6], every model provider has its own way of handling messages, tool calls, streaming, etc. I really think we need a protocol to standardize these patterns.</p><p>Pretty soon every service is going to expose an MCP interface, and mcp-agent is about letting developers orchestrate these services into applications (i.e. build “MCP apps”). This can cover any use of an AI model that needs to interact with the world around it:\n- RAG pipelines and Q&amp;A chatbots\n- Process automation via AI workflows/async tasks\n- Multi-agent orchestration, with human in the loop</p><p>The repo contains examples [7] to build RAG agents, streamlit apps and more. There’s a lot left to build, like streaming support, server auth and tighter integration with MCP clients.</p><p>But I wanted to share early in the hopes that you can guide me:\n- If you find this useful, please let me know. If it’s useful to you, I will dedicate all my time to improving it.\n- I really welcome contributions. If you want to collaborate, please reach out on github to help take this forward.</p><p>I want to help standardize AI development, so developers a few years from now can look back with horror at the pre-MCP days.</p>","contentLength":2710,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42867050"},{"title":"Show HN: Distr – open-source distribution platform for on-prem deployments","url":"https://github.com/glasskube/distr","date":1738167715,"author":"louis_w_gk","guid":158,"unread":true,"content":"<p>Distr is designed to help software engineers distribute and manage their applications or agents in customer-controlled or shared-responsibility environments. You only need a Docker Compose file or Helm chart—everything else for on-prem is handled by the platform.</p><p>We’re are an open source dev tool company. Over the past couple of months, we’ve spoken with dozens of software companies to understand their challenges with on-prem deployments. We analyzed the internal tools they’ve built and the best practices from existing solutions, combining them into a prebuilt, Open Source solution that works out of the box and integrates seamlessly.</p><p>Distr consists of two key components:</p><p>1. Hub - Provides a centralized view of all deployments and controls connected agents. - Comes with a simple GUI but also supports API and SDK access for seamless integration. - Fully Open- Surce and self-hostable, or you can use our fully managed platform.</p><p>2. Lightweight Agents - Pre-built agents for Helm (Kubernetes) and Docker Compose (VM) that run alongside your application. - Handle lifecycle tasks like guided installation, updates, and rollbacks. - Provide basic metrics (health status, application version) and logs</p><p>If you already have a customer portal or self-service interface for on-prem deployments, you can seamlessly integrate all features into your existing portal or application using our API or SDK. Alternatively, you can use our pre-built, white-labeled customer portal.</p><p>Here’s what an integration into your existing customer portal could look like:</p><pre><code>  import {DistrService} from \"@glasskube/distr-sdk\";\n  \n  const customerHasAutoUpdatesEnabled = false; // replace with your own logic\n  const deploymentTargetId = 'da1d7130-bfa9-49a1-b567-c49728837df7';\n  const service = new DistrService({\n      apiKey: 'distr-8c24167aeb5fd4bb48b6d2140927df0f'\n  });\n  \n  const result = await service.isOutdated(deploymentTargetId);\n  if(result.deploymentTarget.deployment?.latestStatus?.type !== 'ok') {\n      // let the user decide whether to allow updates from an instable state, e.g. with:\n      if(!confirm('The deployment is not in a stable state. Do you want to update anyway?')) {\n          return;\n      }\n  }\n  if(result.outdated) {\n      if(customerHasAutoUpdatesEnabled) {\n          await service.updateDeployment({deploymentTargetId});\n          // notify customer about the update\n      } else {\n          const newerVersionsAvailable = result.newerVersions;\n          // notify customer about the newer versions, e.g. via email\n      }\n  }\n\n\n</code></pre>\nWith the SDK/API, you can:\n- Display real-time deployed version and deployment status directly within the application, notifying customers when their deployed version is outdated.\n- Allow customers to trigger updates from within your app using a simple API call<p>If you’re distributing software and want to streamline updates or enhance monitoring, we’d love your feedback and are here to answer any questions.</p><p>Getting started is easy—just bring your Docker Compose file or Helm chart, and we’ll guide you through the rest.</p>","contentLength":3076,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42866951"},{"title":"Show HN: Open-Source Alternative to OpenAI Platform, for Local Models","url":"https://github.com/transformerlab/transformerlab-app","date":1738162980,"author":"aliasaria","guid":157,"unread":true,"content":"<p>Hi everyone, we’re a small team, supported by Mozilla, who are working on re-imagining a UI for training, tuning and testing local LLMs. Everything is open source. If you’ve been training your own LLMs or have always wanted to, we’d love for you to play with the tool and give feedback on what the future development experience for LLM engineering could look like.</p>","contentLength":370,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42865658"},{"title":"Show HN: DeepSeek Your HN Profile","url":"https://hn-wrapped.kadoa.com/","date":1738096506,"author":"hubraumhugo","guid":156,"unread":true,"content":"<p>Let DeepSeek analyze your HN profile to give you highlights and trends.</p>","contentLength":71,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42857604"},{"title":"Show HN: Design/build of some parametric speaker cabinets with OpenSCAD","url":"https://calbryant.uk/blog/speakers/","date":1738070920,"author":"naggie","guid":155,"unread":true,"content":"<p>This post documents a saga of speaker design dating back to 2019. Since then, I’ve been gradually working on a CAD model for a new set of what started as (yet another) subwoofer, but became some compact 2-way office ribbon speakers.</p><p>The idea was to create a fully parametric design that could be easily adapted to any drivers, enclosure volume etc – yet still retain the original aesthetic.</p><p>OpenSCAD is my <a href=\"https://calbryant.uk/blog/10-ways-to-get-the-best-out-of-openscad/\">CAD package of choice</a> – it’s a code-CAD system so I’m right at home. There are, however limitations which make certain things excessively hard or long-winded; even impossible!</p><p>With this project, I wanted to push the boundaries of what is possible with OpenSCAD and what I could make in my garage. I wanted these speakers to look like they could have been bought from a high-end audio store.</p><p>I didn’t want a simple box like most speakers. Moving toward more higher-end speakers, more exotic shapes are used – often with compound curves and automotive grade finishes.</p><p>For a while the design was for a custom modelled bass-reflex subwoofer, but I decided to make some 2-way speakers after taking a look at <a href=\"https://sites.google.com/site/undefinition/bookshelf-speakers/speedster\" target=\"_blank\" rel=\"noopener\">Paul Carmody’s Speedster</a> design; I was more excited about the idea of building a pair of full-range speakers considering I had already build a <a href=\"https://calbryant.uk/blog/large-horn-subwoofer-build/\">sizeable subwoofer</a>. So, I decided to build some Speedsters instead.</p><p>For about 6 years I had some Mission SX2 speakers. They were finished in piano black and were curvy – I wondered how the complicated-looking shape was made.</p><p>As it turns out, each curve was just a circular arc – the complexity came from the intersection of these arcs at the edges – elegant!</p><p>I also had some old Sony speakers with a flat conical profile at the front. I figured this would work well with the speedster design, considering the tweeter is inset somewhat.</p><p>I decided I’d like to lean into the compound curve idea a bit more – elongate the design, move the center of the main curve forward, and pitch the top up towards the back for a kind of forced perspective.</p><p>I mocked up the shape by intersecting 5 cylinders – one for each panel except the bottom. Moving around, I deviated from the SX2 design by moving the center of the side curves to the front, and angling the top for a slight incline.</p><p>After some time I realised I could optimise the design quite a bit by intersecting 4 circles instead, and then extruding to intersect with a single cylinder. This, and setting the number of faces () throughout the design reduced the eventual build time to 3 minutes instead of around an hour.</p><p>The extrusion approach also allowed me to use  to round the sharp edges of some of the panels. As it’s OpenSCAD, I couldn’t round the other edges – these would have to be rounded later by sanding as a post-process.</p><p>In the above image, you can see the derivation of the curve of the left panel – using an offset, large circle.</p><p>Given I intended to subtractively mill the design from 18mm MDF or birch ply, I had to convert the shape into a series of panels with no overhangs. The approach I used was simple – to intersect an “infinite” panel with the edges of the basic shape, and subtract the adjacent panels from each.</p><p>This approach is illustrated above. From the combination intersection, you can see how 2 possible side and rear panel sizes could be derived – the rear could be wider and extend to the sides, or the side panels could be longer and extend to the rear.</p><p>The side panel intersections were the most tricky as they had to be at an angle and offset determined by the centre of the circle defining the curve as well as the depth. This was necessary to ensure the panel was of even thickness on both sides.</p><p>Given the design was not a simple box, I needed a way of arriving at the same internal volume as the box design. I used a similar method to calculate the shape of the internal volume, and then used <a href=\"https://admesh.readthedocs.io/en/latest/\" target=\"_blank\" rel=\"noopener\">admesh</a> to measure the volume of the shape. It was then a simple matter of iterating on the depth until the volume matched the box design. Note that I kept the front panel the same size – this is important for the acoustic design as the baffle step affects the frequency response.</p><p>I wonder if my design (vs a box) is acoustically superior in one way: thanks to the curved design, there are no parallel surfaces – this could reduce standing waves and resonances.</p><p>Beyond this, a disclaimer – I know I’m modifying the original design which is something Mr. Carmody warns against. I think I’m being sensible though!</p><p>I made a generalised negative cut-out to support any circular driver. The design accepts the panel thickness, driver inset, bezel thickness etc. It also supports either a conical or rounded flare for when the driver is inset.</p><p>On the reverse of the front panel, a chamfer is added to reduce turbulence behind the driver. See <a href=\"http://www.troelsgravesen.dk/chamfer.htm\" target=\"_blank\" rel=\"noopener\">this article</a> for more information – it’s important!</p><p>I thought a long time about how I would construct the design. Most importantly, how would I align and clamp the panels for gluing?</p><p>I considered using dowels, brad nails, clamps and jigs. I remembered my <a href=\"https://calbryant.uk/blog/large-horn-subwoofer-build/\">horn-loaded subwoofer</a> and how I used screws to align and clamp the panels as recommended in the design; it worked excellently!  I could manufacture pre-determined holes with a calibrated profile, I could use regular cabinet screws to allow fast assembly with no clamps at all.</p><p>One downside is that I would have fill the resulting holes; a good compromise in my opinion. Another is that depending on how I manufacture the panels, it may be difficult to get accurate holes.</p><p>Most of the design was implicit, meaning I didn’t actually know the specific co-ordinates of a lot of the features such as most of the geometry of the rear panel. This was fine, except for placing screw holes.</p><p>For a long time the design had some “guesses” with hard-coded offsets to determine he position of the screw holes. This is because there’s no way of addressing a corner, edge or surface in openscad – it’s <a href=\"https://en.wikipedia.org/wiki/Constructive_solid_geometry\" target=\"_blank\" rel=\"noopener\">CSG</a> only and not a <a href=\"https://en.wikipedia.org/wiki/Boundary_representation\" target=\"_blank\" rel=\"noopener\">BREP</a> system.</p><p>This meant that for a truly parametric and fully qualified design, I’d have to derive the locations manually. I won’t go into detail but it was basic trigonometry, just a lot of it.</p><p>I used some simple techniques to align the screw holes – placing debugging cylinders at the calculated positions to check they were correct, using the orthogonal view aligned to a plane to validate the positions.</p><p>The crossover in the speedster design is a fairly complex (and therefore bulky and inefficient) third-order design. This would make it a pain to manually construct in a reproducible manner, so I wanted to create a PCB for this purpose.</p><p>Luckily, <a href=\"https://www.nullmethod.com/\" target=\"_blank\" rel=\"noopener\">Greg Ose</a> had kindly <a href=\"https://github.com/gregose/speedster-crossover\" target=\"_blank\" rel=\"noopener\">designed one on github</a>. It was fairly large as it was designed to accommodate variety of possible inductor/capacitor/resistor sizes – not a problem on a rectangular speedster design but a little challenging to fit inside my design.</p><p>In the end I designed an access panel at the bottom of the speaker to allow easy installation of the crossover. This was a lot of effort but worth it – what if I had sealed in the crossover and it developed a fault?</p><div><div><div><table><tbody><tr><td><pre tabindex=\"0\"><code></code></pre></td><td><pre tabindex=\"0\"><code data-lang=\".scad\"></code></pre></td></tr></tbody></table></div></div><a href=\"https://calbryant.uk/blog/speakers/access_panel.scad\" target=\"_blank\">Download</a><a href=\"javascript:;\">Copy</a></div><p>The above is the algorithm set to calculate the right number of screws to achieve a minimum space between each, and then fit them evenly.</p><p>The design held the crossover together with 20mm standoffs, attached to the access panel in a vertical orientation.</p><p>To properly seal the speaker drivers, rear connectors and access panel, I had to find some kind of gasket material. It’s possible to buy foam tape, but that seemed quite messy.</p><p>I thought the best way would be to manufacture the gaskets to be the perfect shape, complete with bolt holes. I first experimented with a 3D printed design using TPU filament, but the resulting gaskets felt too hard and I didn’t think it would seal well.</p><p>In the end I found some 1mm self-adhesive EVA foam. If I could get some time with a laser cutter I could make them easily and get a great seal!</p><h3>Nesting &amp; post processing</h3><p>I like the idea of a fully automated build chain; in addition to being full parametric, my design produces renders of all the parts, optimised STLs and even places the parts on individual beds/plates.</p><p>This was more necessary when I was targeting CAMBAM or PyCAM, which are quite basic so don’t include the ability to automatically place parts. Iterating the design would involve a lot of manual placement and check steps if I didn’t automate this process!</p><p>I combined <a href=\"https://github.com/secnot/rectpack\" target=\"_blank\" rel=\"noopener\">rectpack</a> with <a href=\"https://pypi.org/project/numpy-stl/\" target=\"_blank\" rel=\"noopener\">numpy-stl</a> to produce a script that not only nests parts, but also places the parts on the minimum number of beds. Given the opportunity, it also bounds checks the result and places the parts down flat to ensure it is manufacturable on a given machine.</p><p>As the design was fully parametric, I could change a single variable to move to a floorstanding design. Of course the acoustic design would have to change, but this makes it easy to experiment with different designs create variants with far less effort.</p><p>All of the panels and screw positions are recalculated to fit the new dimensions. I would probably have to break up the design into sections and add more braces to make a floorstander feasible though.</p><p>As detailed in my OpenSCAD article, the Makefile for the project produces some crisp looking renders.</p><p>The above shows how the panels are assembled. Below, all panels.</p><p>I had designed the speaker to be manufactured using a CNC router. I had access to one via a <a href=\"https://calbryant.uk/blog/cnc-routing-speeds-and-feeds/\">friend</a> – we spent a whole year of Wednesday evenings getting it to work, ultimately to conclude that the Mach3 based controller was a dead-end – too unreliable. We had plans on building a new machine, but that plan got put on hold due to work commitments from us both.</p><p>One day I had a realisation – the speaker could probably be printed using my X1 Carbon as the build plate was nearly as big as the speaker was tall; perhaps I could divide up a panel or something…</p><p>As it turns out, I could, without even dividing any panels. I did this by making the speaker wider, shallower and shorter; as well as changing the bottom panel to take up some height from the side panels. Literally millimeters made the difference!</p><p>Given this marginal fit, the nesting system I developed was less useful, especially considering bambu slicer can do it better natively. The script was still useful for bounds checks and to give an initial go at layout.</p><p>PLA was my natural choice. It’s the easiest to print with, and given the speakers won’t be left in the sun outside I think the relatively low temperature tolerance won’t be an issue.</p><p>The density of MDF is around 500kg/m^3 versus PLA at around 1240kg/m^3. So this means I could print at 50% infill and exceed the density of MDF.</p><p>First I tried 90% infill. It did not go well. There was terrible curling with the default settings with the X1 carbon; unacceptable! I reduced to infill to 50% which helped – less plastic, less shrinkage in theory.</p><p>I attempted to improve bed adhesion by cleaning the plate with isopropyl alcohol and spraying it with hairspray. This helped, but the part ended up pulling the bed up with it…</p><p>I took a look at the settings. As it turns out, the plate is called a “cool plate” for a reason! The default settings leave it at 35c, which is far less than the 60c I used to use with my old printer (a janky Anet A8).</p><p>Whacking up the temperature fixed the problem entirely – only after wasting about 3 spools messing around. Luckily I got a deal on some cheap PLA – £10 a reel from “TECHBEARS” – a company I’ve never heard of. Not issues though, beyond the original curling.</p><p>Before I knew it I had printed all 18 parts. It took about a week of constant printing. Having the AMS unit really helped, as it automatically moved to the next spool.</p><p>Heat-set brass inserts that have knurled edges are commonly available. They are generally pushed in with a soldering iron, and secure themselves in the plastic as they cool. They are an alternative to making a thread, using loose nuts or standoffs.</p><p>Generally the inserts have a shank and a protruding lip at the top an bottom. I experimented quite a bit with the size of the hole; what I found was:</p><ul><li>If you get it to small, the plastic builds up and the insert wanders</li><li>If you get it too big, the insert doesn’t grip as well and can fall out</li><li>Use a pair of tweezers to steer the insert so it ends up straight</li><li>Be ready to hold the insert with the tweezers in case the soldering iron catches</li></ul><p>A balance between the two is necessary. I found about halfway between the two diameters was optimal. Any squeeze-out can be removed with a narrow drill bit and hammer.</p><p>A test fit showed that everything fit well, which was a relief as I didn’t allow any margin in most cases. Some bolts were a bit tight on the access panel, that’s it.</p><p>I decided to use epoxy glue to assemble the parts – cyanocrylate would have worked, but may not have sealed the edges as well. It is important to make sure there are no air leaks which would compromise the acoustic performance.</p><p>I keyed in the surfaces using some 40 grit sandpaper to aid adhesion – little effort was required. I cleaned the surfaces with isopropyl alcohol – important to remove any oils and more importantly hairspray residue from the 3D printing process.</p><p>The screws were perfect for aligning and clamping the panels, removing process variance. I used plasterboard screws as they’re cheap and I have thousands of them. I designed a calibration part to prevent any movement, and to ensure no expansion of the substrate plastic with appropriate tightness. The calibration part also served as a mechanism to measure the compressed foam depth with several layers divided for increased accuracy.</p><p>Assembling the panels in the following order made sure every part was fully constrained and easy to align:</p><ol></ol><p>Surprisingly, I used only one 25ml “Gorilla glue” Epoxy syringe – there was exactly the right amount for both speakers! I had no idea how much I’d need.</p><p>It was important to me to make sure the final result didn’t  3D printed. As such, I needed a smooth finish without showing any joins or layer lines.</p><p>To achieve this I used my random orbital sander with 60, then 120 grit – making sure to use low speed as the PLA can melt easily and burrs will form everywhere. I also made sure to avoid over-rounding the edges and particularly corners – one slip and they’re done for!</p><p>I rounded the sharp edges that I couldn’t round in the design with 120 grit sandpaper by hand. I also did the bass port by hand, which was a pain until I found a tube to wrap the sandpaper around.</p><p>After this I used “Big boy” 2-part fine surface filler after a quick wipe with isopropyl alcohol. I reckon about a 3 golf ball sized blobs are sufficient per speaker – it cures quickly so don’t use too much at once, and limit the activator. I reckon 15mm of activator was enough per golf ball sized blob.</p><p>The consistency was that of margarine at first, but within minutes it became like hard-to-push plasticine. I used the included plastic scraper to push it around and fill the screw holes.</p><p>Given it cured so quickly, the above was the result. A bit of a mess, but it didn’t matter – it just meant more sanding.</p><p>After sanding with 240 grit, the result was starting to feel smooth – no layer lines to be felt at all. I did, however, notice some of the screw holes had pitting so I had to iterate a few times. It was only some time after that I realised the pitting was probably caused by sanding dust getting into the filler – I should have cleaned the surface first with air or water!</p><p>Next I gave the cabinets another clean with isopropyl alcohol to remove any grease before taking them to the spray tent (which was really a beach tent) and masking the brass inserts.</p><p>I put some long woodscrews in the feet holes to act as a stand. This worked well, and allowed me to spray each cabinet in one go by holding the cabinets by the braces. I sprayed on a few layers of adhesion promoter and left them overnight in the kitchen where it was warm.</p><p>After this I sprayed the cabinets with 3 coats of black primer. In retrospect, I should have used plastic primer but it seemed to work well. I followed the primer with some Hicote bed liner – a thick, textured paint that is supposed to be durable.</p><p>A word of warning – the bed liner gets everywhere! I left the parts to cure overnight in the kitchen.</p><p>After curing the speakers looked fantastic – you couldn’t see the panel joins at all! A little texture and a few screw holes were visible though; I could have taken more time to deal with them but I only have finite patience…</p><p>I ended up getting a great deal on a Creality Falcon 10W CR-Laser cutter in the end, after asking around to see who had access to a cutter.</p><p>With lightburn, I was able to cut the gaskets out of 1mm EVA foam straight away after minimal experimentation. It’s a great bit of kit – 10W is a lot of power for foam. I reckon the 5W one would have worked just as well (albeit slower).</p><p>I was able to run at 10,000mm/min at 80% power in a single pass. That meant cutting time was reduced too well under a minute.</p><p>The gaskets fitted well, despite being a little fiddly. The speaker drivers were fine, though the bolts were tight due to the brass inserts being slightly off.</p><p>I was happy to see that my experiment with the foam thickness resulted in the drivers fitting correctly.</p><p>When fitting the crossover I found the speaker wire I had didn’t take to solder well at all. Substituting for some mains flex, I had no problems.</p><p>Before closing I put a “couple of handfuls” of polyester stuffing inside, making sure to get all empty space. This increases the apparent volume of the speaker. <a href=\"https://pypi.org/project/numpy-stl/\" target=\"_blank\" rel=\"noopener\">https://pypi.org/project/numpy-stl/</a></p><div><ol start=\"1\"><li><p>I measured directly instead of trusting the driver datasheets&nbsp;</p></li></ol></div><p>I measured the response at near field (using room EQ wizard) to make sure the polarity of the drivers (with respect to each other and left/right) are correct – else I could unknowingly end up with a notch in the crossover frequency – or worse, cancel bass between the speakers. I have a calibrated measurement mic for this.</p><p>I have read that the Foundtek ribbon driver can have reversed polarity sometimes in forums. It’s also possible that the crossover design or my wiring could have a mistake.</p><p>According to the original speedster design, the crossover should be around the 3000Hz region. We should not see a dip at this frequency – if we do, it’s likely the drivers are out of phase. They should be pushing and pulling at the same time around this crossover point.</p><p>The above shows a dip at 3.5kHz – the drivers could be out of phase. I swapped the polarity of one of the tweeters to see what it did to the response.</p><p>As it turns out, swapping the polarity of the tweeter fixed the dip! The response above is much smoother. I’m glad I checked it!</p><p>A friend pointed out the peak at around 70Hz and suggested it could be a <a href=\"https://en.wikipedia.org/wiki/Room_modes\" target=\"_blank\" rel=\"noopener\">room mode.</a> Plugging the numbers into <a href=\"https://amcoustics.com/tools/amroc?l=260&amp;w=210&amp;h=250&amp;r60=0.6\" target=\"_blank\" rel=\"noopener\">this generator</a> seemed to confirm it! I shall use Room EQ Wizard and something like <a href=\"https://github.com/HEnquist/camilladsp\" target=\"_blank\" rel=\"noopener\">CamillaDSP</a> should I feel the need to correct it. Not sure I can justify another MiniDSP.</p><p>Note that I was using my Sony amplifier and could not turn off the DBFB feature, so the plot is influenced by not only the room, noisy children, but also this feature.</p><p>Later on I tried the Fosi amplifier. The large 70Hz peak was gone! This means the room mode theory was a distraction; the cause was the DBFB feature of the Sony amplifier.</p><p>However, <a href=\"https://www.reddit.com/r/diyaudio/comments/1i96okh/i_built_some_paul_carmody_speedsters_with_a/\" target=\"_blank\" rel=\"noopener\">a few comments on reddit</a> suggest the roll off into the high frequencies looks bad. I agree that the measurement method wasn’t right – I am likely getting a bad reading due to acute roll-off in that position due to the dispersion of the tweeter. I will have to measure at a greater distance to get a more accurate reading.</p><p>As for the polarity between the speakers, I generated a 60Hz tone and checked that the SPL increased when driving both speakers at once. Much like when setting the phase of a subwoofer, the SPL in the listening position should increase when the speakers are in phase. It did!</p><div><ol start=\"2\"><li><p>UMIK-1 – and several others for some reason.&nbsp;</p></li></ol></div><p>I was surprised at how neat the speakers looked. They didn’t look “DIY” which was one of my aims.</p><p>If I were to make them again, I’d make sure the screw holes were properly filled, and use more filler elsewhere as it’s possible to see the 3D printed texture and screw holes in some places with the right light.</p><p>I’d also make sure the bass port has enough paint – it’s a bit thin in places, but I don’t mind for now as it’s not visible during use where I’ve got it set up.</p><p>Bed liner paint was a good choice – I like the even finish. Perhaps I could experiment with sanding the finish and possibly waxing it or something on a test piece.</p><h3>Construction &amp; design method</h3><p>I’m pleased to say the design method of creating a shape and intersecting panels, combined with clamping screws worked extremely well. There were no issues (in the end) with panel warping or accumulating errors.</p><p>I was a little worried about accumulating errors, but thanks to the accuracy of the screw clamping method, decent 3D printer and viscous glue, there were no issues.</p><p>Given it’s parametric I dare say I’ll make some other speakers in the future with the same design. Possibly the <a href=\"https://sites.google.com/site/undefinition/bookshelf-speakers/virage\" target=\"_blank\" rel=\"noopener\">Virage</a> now that I have the Paul Carmody bug.</p><p><strong>TL;DR: Great! Best speakers I’ve heard, possibly ever.</strong></p><p>First I hooked them up to my office amplifier, a 25 year old Sony. Unfortunately even at max volume they were not loud enough. The amp was clearly struggling – playing a sine wave would result in audible clipping.</p><p>Why was it struggling? It has no problem driving the 6 ohm speakers it came with. The answer lies in the crossover – it’s a third order design and therefore inefficient compared to a simple first-order crossover. These speakers need power!</p><p>Despite this, vocals sounded amazing and there was a surprising amount of bass – as is characteristic of the speedster design.</p><p>The speakers were rather boomy in my office. I suspect this is due to the DBFB feature of the amp – bass enhancement tuned to the sony speakers it came with. Given this and the power problem, I reserved judgement until I got a proper amplifier.</p><p>So what amplifier would make sense? Requirements:</p><ul><li>Small form factor, it’s on my desk</li><li>Enough power to drive the speakers</li><li>Good sound quality – no distortion</li></ul><p>I consulted <a href=\"https://www.audiosciencereview.com\" target=\"_blank\" rel=\"noopener\">Audio Science Review</a> to find a suitable amplifier. The reviews here are objective and based on scientific assessment by Amid. I settled on <a href=\"https://www.audiosciencereview.com/forum/index.php?threads/fosi-audio-v3-amplifier-review.45757/\" target=\"_blank\" rel=\"noopener\">a Fosi V3</a> and got a good deal.</p><p>After this they sound far better. No longer boomy, and a great sound-stage. “Holographic” is the meaningless audiophile word I’d use.</p><div><ol start=\"3\"><li><p>SINAD, SNR, FFT, THD, IMD, etc.&nbsp;</p></li></ol></div><p>I could design a larger set of speakers next – possibly a floorstanding design. Maybe also, I could use this design base for a SFF PC case!</p><p>If I get the chance, I’d love to compare my speedsters with a set made from wood. While the density is approximately the same as MDF, the damping qualities of PLA may not be as good. This could be mitigated by the lack of parallel surfaces, however.</p><p>Also I’ve been told by no less than 5 people, given we’ve converted the garage into a fitness studio for my wife’s PT business, I have to build a new workshop in the garden for future projects…</p><div><ol start=\"4\"><li><p>Instigated mainly by Oliver, who owns the DIY CNC router. I say, Oliver, I will, as soon as you build your new CNC machine!&nbsp;</p></li></ol></div><p>Thanks to Paul Carmody for the original speedster design, Greg Ose for the crossover PCBs.</p><p>Please <a href=\"https://calbryant.uk/cdn-cgi/l/email-protection#d4b7b5b8b8b5bafab6a6adb5baa094b3b9b5bdb8fab7bbb9\">email me</a> with any corrections or feedback.</p>","contentLength":23566,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42852048"},{"title":"Show HN: Meelo, self-hosted music server for collectors and music maniacs","url":"https://github.com/Arthi-chaud/Meelo","date":1738053090,"author":"arti_chaud","guid":154,"unread":true,"content":"<p>I've been working on this alternative for Plex for almost 3 years now. It's main selling point is that it correctly handles multiple versions of albums and songs. As of today, it only has a web client.</p><p>It tries to be as flexible as possible, but still requires a bit of configuration (including regexes, but if metadata is embedded into the files, it can be skipped).</p><p>I just released v3.0, making videos first-class data, and scanning + metadata matching faster.</p>","contentLength":460,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42850109"},{"title":"Show HN: I Created ErisForge, a Python Library for Abliteration of LLMs","url":"https://github.com/Tsadoq/ErisForge","date":1737991794,"author":"tsadoq","guid":153,"unread":true,"content":"<p>ErisForge is a Python library designed to modify Large Language Models (LLMs) by applying transformations to their internal layers. Named after Eris, the goddess of strife and discord, ErisForge allows you to alter model behavior in a controlled manner, creating both ablated and augmented versions of LLMs that respond differently to specific types of input.</p><p>It is also quite useful to perform studies on propaganda and bias in LLMs (planning to experiment with deepseek).</p><p>Features\n- Modify internal layers of LLMs to produce altered behaviors.\n- Ablate or enhance model responses with the AblationDecoderLayer and AdditionDecoderLayer classes.\n- Measure refusal expressions in model responses using the ExpressionRefusalScorer.\n- Supports custom behavior directions for applying specific types of transformations.</p>","contentLength":813,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42842123"},{"title":"Show HN: I Made an iOS Podcast Player with Racket","url":"https://defn.io/2024/11/16/podcatcher/","date":1737968176,"author":"Bogdanp","guid":152,"unread":true,"content":"<p>I made a podcast player for iOS. It's called <a href=\"https://apps.apple.com/app/podcatcher-podcast-player/id6736467324\">Podcatcher</a> and\nit's live on the iOS App Store! As with <a href=\"https://defn.io/2020/01/02/ann-remember\">most</a><a href=\"https://defn.io/2022/11/20/ann-franz\">things</a> I've made in the past several years, it's\n<a href=\"https://github.com/Bogdanp/Noise\">implemented</a> using a combination of Racket and Swift. This\napproach continues to be a very fun and productive way for me to\nwrite apps, and working on these projects has allowed me to refine\nit further. For example, I've recently added async support to Noise\nand made it compliant with Swift Concurrency while maintaining\nbackwards-compatibility with the existing implementation based on\ns.</p><p>Why a podcast player? Because I listen to podcasts a lot (like a lot,\na lot, a hundred hours a month a lot) and the podcast player I used\nto use recently made some changes I didn't like, so I decided to make\nan app suited to my liking and listening style. As you might expect\nfrom a modern podcast player, it's got audio enhancements like an\nequalizer that boosts voices, silence trimming, variable speed with\npitch adjustment, and a \"shower mode\" that boosts voices further,\ntrading quality for loudness when you need it. It's also free, has no\nads or tracking, and it's local-first except for the podcast directory\nand sync. There is a backend component that ingests podcast feeds\nperiodically and sends push notifications to the app to update its local\ndatabase when new episodes get released.</p><p>Compared to some of the other apps, cross-device sync via iCloud is\nmaybe the main thing that is currently missing, and the UI is less\nfancy/custom, but that's what I prefer anyway. In a future release, I\nplan to add a sleep timer, support for favorites &amp; bookmarks and a watch\ncompanion app. I'm also open to suggestions, so let me know what you\nthink if you give it a try!</p><p>On the Racket and OSS side of things, the following changes directly\nresulted from my work on the app, either because they were needed to\nmake the project work at all (i.e. some of the build changes, and the\nwork to support OpenSSL) or because working on the app exposed certain\nproblems (i.e. the performance issue with the XML library, and the\nredirect issue in http-easy).</p><p>Plus, <a href=\"https://github.com/Bogdanp/Noise/compare/746ff04b2d84cbf0e47ce0cd2036223a728fb660...8b8b7526d8dcc7aed7fa3423b7d634c774a123eb\">the changes to Noise</a> I mentioned earlier. I am\nstill debating whether or not I want to make the app itself source\navailable, like I've done for Franz and Remember. Maybe if there's\ninterest.</p><p>In terms of lines of code per language, the app looks like this:</p><pre><code>-------------------------------------------------------------------------------\nLanguage                     files          blank        comment           code\n-------------------------------------------------------------------------------\nSwift                           68            621             25           6392\nRacket                          73            590             42           4965\n-------------------------------------------------------------------------------\nSUM:                           141           1211             67          11357\n-------------------------------------------------------------------------------\n</code></pre><p>The Racket numbers include the API component, which is about 1800 lines\nof code on its own, but the Racket code is a lot more dense than the\nSwift code, which has only one external library dependency, compared to\nthe Racket core which has several:</p><ul></ul><p>The Swift part also includes about 1.5k lines of code representing\nstructs and ser/de code generated by Noise.</p>","contentLength":3344,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42838875"},{"title":"Show HN: Making AR experiences is still painful – had to make my own editor","url":"https://ordinary.space/","date":1737963163,"author":"boriskourt","guid":151,"unread":true,"content":"<div><h3>With Ordinary Objects, ideating, designing and testing  experiences is faster and more fun than ever before. Discover novel use-cases, create variants and fine tune prototypes until they excite and are intuitive to use.</h3></div>","contentLength":219,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42838355"},{"title":"Show HN: DeepSeek My User Agent","url":"https://www.jasonthorsness.com/20","date":1737929019,"author":"jasonthorsness","guid":150,"unread":true,"content":"<p><a href=\"https://github.com/deepseek-ai/DeepSeek-R1\">DeepSeek R1</a> is a new model and service that exposes\nchain-of-thought to the user. You can use it live for free at\n<a href=\"https://chat.deepseek.com/\">chat.deepseek.com</a>, or via an API at\n<a href=\"https://platform.deepseek.com/\">platform.deepseek.com</a> that is currently significantly less\nexpensive than OpenAI o1. OR, simply click  to see what the model thinks about your user\nagent, browser capabilities, and IP location headers. If you dare.</p><p>⚠️ </p><p>Well it was good while it lasted. Shortly after this article was published, the DeepSeek API started\nhaving issues. Now, <a href=\"https://platform.deepseek.com/\">platform.deepseek.com</a> is returning 404, and\n<a href=\"https://status.deepseek.com/\">status.deepseek.com</a> shows a red banner. Only one conclusion can be\ndrawn: DeepSeek My User Agent has brought down DeepSeek 💀. Check out the\n<a href=\"https://news.ycombinator.com/item?id=42834648\">best judgements</a> on Hacker News.</p><p>⚠️ </p>","contentLength":717,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42834648"}],"tags":["dev","hn"]}