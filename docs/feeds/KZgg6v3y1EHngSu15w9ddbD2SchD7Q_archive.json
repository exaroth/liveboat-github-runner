{"id":"KZgg6v3y1EHngSu15w9ddbD2SchD7Q","title":"Dev News - Last 2 days","displayTitle":"Dev News - Last 2 days","url":"","feedLink":"","isQuery":true,"isEmpty":false,"isHidden":false,"itemCount":64,"items":[{"title":"Years ago I saw a programming presentation using pirate language. I don't know the presenter, I don't know what it was about, but it was funny and impressive and would like to see it again, but can't find it in the abyss of the youtube.","url":"https://en.wikipedia.org/wiki/International_Talk_Like_a_Pirate_Day","date":1737968740,"author":"/u/keszegrobert","guid":575,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1ib410o/years_ago_i_saw_a_programming_presentation_using/"},{"title":"Facebook considers Linux and related topics a \"cybersecurity threat\", according to Distrowatch","url":"https://www.reddit.com/r/linux/comments/1ib3vaf/facebook_considers_linux_and_related_topics_a/","date":1737968106,"author":"/u/Sirius707","guid":573,"unread":true,"content":"<blockquote><p>Starting on January 19, 2025 Facebook's internal policy makers decided that Linux is malware and labelled groups associated with Linux as being \"cybersecurity threats\". Any posts mentioning DistroWatch and multiple groups associated with Linux and Linux discussions have either been shut down or had many of their posts removed.</p><p>We've been hearing all week from readers who say they can no longer post about Linux on Facebook or share links to DistroWatch. Some people have reported their accounts have been locked or limited for posting about Linux.</p><p>The sad irony here is that Facebook runs much of its infrastructure on Linux and often posts job ads looking for Linux developers.</p><p>Unfortunately, there isn't anything we can do about this, apart from advising people to get their Linux-related information from sources other than Facebook. I've tried to appeal the ban and was told the next day that Linux-related material is staying on the cybersecurity filter. My Facebook account was also locked for my efforts.</p></blockquote>","contentLength":1011,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"One in four 2020 Tesla Model 3 failed the Danish periodic inspection in 2024","url":"https://fdm.dk/nyheder/bilist/2025-01-populaer-tesla-model-dumper-med-et-brag-til-syn","date":1737967966,"author":"asp1","guid":197,"unread":true,"content":"<h2>Tesla har mere end hver 3. af alle fejl</h2><h2></h2>","contentLength":39,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42838855"},{"title":"Once You're Laid Off, You'll Never Be the Same Again","url":"https://mertbulan.com/2025/01/26/once-you-are-laid-off-you-will-never-be-the-same-again/","date":1737966161,"author":"mertbio","guid":196,"unread":true,"content":"<p>It happened on the afternoon of May 4th. A message from a colleague—who has since become a good friend—popped up on my screen, urging me to check my emails. When I opened my inbox, there it was: an email from the COO. The email announced an impending company-wide layoff and mentioned that, within a few minutes, I’d receive another email letting me know whether I was impacted. A short while later, the second email arrived. I was among those affected—along with most of my team.</p><p>The situation felt surreal. One by one, my colleagues posted in our team chat, confirming they’d been impacted too. Before our accounts were locked, we quickly jumped on a call. We had just 30 minutes to have one final conversation as a team, to say our goodbyes. It was a bittersweet moment, sharing those last words with people I’d worked so closely with.</p><p>It was difficult to process what was happening. Just ten months earlier, the company had gone through another round of layoffs. And at the beginning of the year, during the company’s kick-off event, the president assured us there wouldn’t be any more layoffs. They even said the company was performing well financially. So, why was this happening?</p><p>Looking back, my colleagues and I were not entirely surprised by the layoff. There were several warning signs that hinted something was coming. I want to share these signs so you can be better prepared if you ever face a similar situation.</p><h3>1. Cancellation of Team Events</h3><p>One of the earliest indicators was the sudden cancellation of team events. When I heard from other teams that their off-site events were canceled without any clear explanation, it immediately raised red flags. These cancellations often signal that the company is going to announce something about the team structure and doesn’t want you to be with your team in the same place. This is because one of your teammates—or you—might be impacted, and you’d need to cancel flights, hotels, etc. To avoid dealing with these logistical issues, the company preemptively cancels the event.</p><h3>2. Unexpected Notifications About Packages</h3><p>Some employees at the company received notifications about packages scheduled to arrive at their homes. This happens because services like DHL notify you through their app when a package is on the way. If your company requires you to return your work equipment, like a laptop, after being laid off, they often arrange for these shipping boxes to be delivered in advance. If you unexpectedly see a notification about a package from your company’s IT provider, it’s a strong sign that a layoff is imminent—and you may be impacted.</p><h3>3. Lack of Vision from Leadership</h3><p>The absence of a clear vision from leadership is one of the most common signs of an impending layoff. During off-site or kick-off events, you might notice that leaders seem unsure of the company’s direction. When this lack of clarity is followed by team restructuring, and then another restructuring just a few months later, it becomes evident that the leadership is struggling to find focus. Ultimately, this cycle often ends with a layoff, accompanied by yet another round of restructuring for those who remain.</p><h3>4. Sudden, Vague Meetings</h3><p>Another sign is the appearance of unexpected, vague meetings on your calendar. These meetings are marked as “important” with no clear agenda, and attendance is mandatory. If this happens, it’s often a precursor to a layoff announcement. Public companies, in particular, may choose to send layoff notices via email to align the timing with when they notify investors.</p><h3>5. Timing Around Quarterly Results</h3><p>If your company is publicly traded, layoffs are frequently announced in conjunction with quarterly earnings reports. This can be especially stressful because, leading up to every financial results announcement, employees may anxiously wait to see if layoffs will accompany the news. If no layoffs are announced, you know you’re safe—for at least one more quarter.</p><p>When I looked back on my time at the company and all the things I had accomplished, I was surprised to be impacted by the layoffs. It wasn’t because I thought I was better than others—it was because I believed I was doing more than what was expected of me. However, during a layoff, it seems that who you are and what you do doesn’t matter. In most cases, the decision is made by people who don’t even know you. This realization made me question the concept of work, which is part of the reason I’m writing this blog post.</p><p>I was hired as a Backend Developer. When I joined my team, I noticed a project that needed a developer to implement the client-side feature in React Native. Although I had no prior experience with React Native, I had worked with React before, so I volunteered for the task. I shipped the feature without any issues, received positive feedback from my team and lead, and eventually, my title was changed to Developer, making me a full-stack developer.</p><p>In some instances, I worked on projects independently, always aligning with my team and ensuring my work was reviewed. I would implement the backend first and then move on to the client-side. This was my expected role, and in performance reviews, I was consistently rated as a high performer. Yet, I was always doing more than what was expected of me.</p><p>Sometimes, I worked on small features I thought would enhance the app. These features might not have been used by many, but they provided significant value to heavy users. Occasionally, I shipped these under the radar. I created dashboards to measure the impact of my team’s work, helping us focus on features that would bring the most value to users. I also built proof-of-concept features based on user requests to show leadership how easily they could be implemented, advocating for their prioritization. Additionally, I participated in hackdays, creating projects to showcase innovative ideas.</p><p>On several occasions, I was selected for special projects outside my team. These projects often came directly from the CEO, and I was chosen because I constantly wanted to do more for the company and our users. For some of these projects, I worked more than eight hours a day, including weekends. A few of these initiatives were mentioned in financial reports, praised by the CEO during all-hands meetings, or retweeted multiple times by the CEO on Twitter.</p><p>Over time, I gained the attention of senior management in my business unit, which consisted of about 400 people. I began directly interacting with the VP of Product and the VP of Engineering, both of whom were four or five levels above me. Occasionally, the VP of Product would message me directly to ask if a feature was feasible to implement. Later, the VP of Engineering started scheduling regular one-on-one meetings with me, which was highly uncommon. During these calls, he told me multiple times that if I continued working at this level, I could quickly climb the ladder to become a Staff Developer. He wasn’t the only one saying this to me.</p><p>Beyond my immediate role, I also sought ways to contribute to the broader company. Whenever a new tool was introduced, I would explore it, write detailed articles about my findings, and share them to help other teams use the tool more effectively.</p><p>I referred many friends and former colleagues to the company because I believed in its mission. If I recall correctly, I referred over ten people, four of whom received offers, and three were ultimately hired. I also encouraged many others to consider joining the company.</p><p>I even initiated discussions about translating our website into Turkish to support the many customers we had in Turkey. A few weeks before the layoff announcement, I was helping a team working on this project find a Turkish-speaking content designer because they noticed my willingness to assist.</p><p>Additionally, I tried to convince friends who were CTOs at major e-commerce companies to migrate their websites to our platform. Whenever I received job offers from e-commerce companies on LinkedIn, I used those opportunities to promote our platform instead. I passed along leads to the sales team and later noticed that one of those companies had indeed moved to our platform.</p><p>I’m not sharing all of this to brag but to highlight that, in the end, none of it mattered. On the day I announced I had been laid off, I received numerous messages from colleagues, even those I hadn’t worked with directly, telling me that I had inspired and motivated them. While those messages were heartwarming, they didn’t change the reality: to the company, I was just a row in an Excel sheet.</p><p>Layoffs were uncommon when I started working, and being a developer felt like an incredibly safe job. In most professions, the unspoken rule was simple: if you performed well and the company was financially stable, your job was secure.</p><p>But today, companies are announcing layoffs alongside record-breaking financial results. You work hard, focus on impactful projects, and receive praise from your lead—only to find yourself let go by someone who likely doesn’t even know you exist. It feels as though the trust between companies and employees is now broken. Companies, it seems, are either unaware of this shift or unwilling to address it. And frankly, I’m not sure how they could fix it.</p><p>What’s particularly strange is that the layoffs predominantly affect individual contributors—the people who have little say in deciding the company’s direction. These are the team members closest to the users, the ones who spend hours planning how to improve the product. But after those plans are made, leadership often swoops in and redirects efforts toward entirely different goals. You trust their judgment, work on their priorities, and deliver on time. Then, when the arbitrary goals they set aren’t met, the company decides to cut staff. Those who made the poor decisions remain, and some are even promoted, while the people carrying out the work are let go. It feels surreal—like <a rel=\"nofollow noopener\" target=\"_blank\" href=\"https://www.youtube.com/watch?v=u48vYSLvKNQ\">an episode from Silicon Valley</a>—but this is how big companies operate.</p><p>I’m not alone in feeling this way. Many friends and ex-colleagues who’ve been laid off in recent years share similar experiences. They’ve lost trust in their employers. They believe their efforts won’t matter in the long run and anticipate being part of the next layoff cycle. As a result, they only do what’s strictly required to avoid a performance improvement plan. No one goes above and beyond anymore; no one takes initiative to improve things. Why? Because it doesn’t matter. They’ve seen firsthand that it changes nothing.</p><p>For those like me who’ve experienced layoffs, work has become just that—work. You do what’s assigned, and if your company squanders your potential or forces you to waste time on unnecessary projects, you simply stop caring. You collect your paycheck at the end of the month, and that’s it. This is the new modern work: no more striving to be 40% better every year.</p><p>Since I was working for a German entity of a company, I want to address a common myth about job security in Germany. Many people believe that it’s nearly impossible to be fired in Germany. While this is partially true for individuals who have completed their probation period, it doesn’t hold up in the context of layoffs. If a company decides to lay off, for instance, 40 employees, German law doesn’t prevent this. Instead, the law enforces a social scoring system to determine who is affected, prioritizing the protection of the most vulnerable employees, such as those with children. In this sense, when it comes to layoffs, the difference between Germany and the US is minimal.</p><p>When I talk to friends who were laid off in recent years, we often reflect on what we could have done differently. Here are some of the lessons we’ve learned:</p><ul><li><strong>Stick to your contract hours.</strong> If your contract says 40 hours, work 40 hours—no more, no less. Protect your personal time and well-being.</li><li><strong>Avoid going above and beyond with initiatives.</strong> Many companies encourage impactful work to earn promotions, but instead of chasing internal advancements, focus on switching companies to achieve your next career step.</li><li><strong>Always keep interviewing.</strong> One of the biggest mistakes I’ve seen is stopping interviews after starting a new job, trusting in the company. Instead, continuously explore opportunities so that if a layoff happens, you already have other options lined up.</li><li><strong>Leverage external offers for salary growth.</strong> Companies often resist giving substantial raises to existing employees but pay top dollar for new hires. Regularly interview elsewhere, and if you get an offer with a 20% or higher salary increase, consider taking it. Many people have seen their compensation triple or quadruple this way in just a few years.</li><li><strong>Don’t overthink your résumé.</strong> Worrying about short experiences on your CV isn’t worth it. You can always tailor your résumé—leave out brief roles, or consolidate short-term jobs as freelance experience. Ultimately, your résumé is just a starting point; your skills will be assessed during the interview process.</li></ul><p>You’ve probably noticed that I didn’t mention the name of the company I was laid off from. That’s because I believe it’s irrelevant. Everything I’ve shared reflects the current state of the tech industry. It might differ at very small companies, but once you work at a company with more than 100 employees, you’ll likely encounter many of the same patterns I’ve described.</p><p>I’ve wanted to write about this topic for a long time, but it’s been difficult to find the energy. The subject itself is a deep disappointment for me, and every time I reflect on layoffs, it makes me profoundly sad. It’s a stark reminder of how companies treat workers as disposable. Before you join, they go to great lengths to make you feel valued and excited to accept their offer. You meet multiple people, and some even offer signing bonuses. But when layoffs come, you’re reduced to a name on a list. During the exit interview, a random person from the company reads a prepared script and can’t answer your questions. The HR team that once worked to make you feel valued doesn’t even conduct an actual conversation with you. That random person becomes the last connection you have to a company you spent years at.</p><p>The layoff fundamentally changed how I perceive work now. I don’t think that I’ll be the same person again.</p>","contentLength":14447,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42838700"},{"title":"hashify: Fast perfect hashing without runtime dependencies","url":"https://www.reddit.com/r/rust/comments/1ib38cg/hashify_fast_perfect_hashing_without_runtime/","date":1737965348,"author":"/u/StalwartLabs","guid":582,"unread":true,"content":"<p>I'd like to announce the release of <a href=\"https://github.com/stalwartlabs/hashify\">hashify</a>, a new Rust procedural macro crate for generating perfect hashing maps and sets at compile time with <strong>zero runtime dependencies</strong>. Hashify provides two approaches tailored to different dataset sizes. For smaller maps (fewer than 500 entries), it uses an optimized method inspired by <a href=\"https://www.gnu.org/software/gperf/\">GNU's perf</a>, while for larger maps, it relies on the <a href=\"https://arxiv.org/abs/2104.10402\">PTHash Minimal Perfect Hashing</a> algorithm to ensure fast and compact lookups.</p><p>Hashify was built with performance in mind. <a href=\"https://github.com/stalwartlabs/hashify/blob/main/benches/phf_bench.rs\">Benchmarks</a> show that tiny maps are over  than the Rust <a href=\"https://crates.io/crates/phf\">phf</a> crate (which uses the <a href=\"http://cmph.sourceforge.net/papers/esa09.pdf\">CHD algorithm</a>), and large maps are about . It’s an excellent choice for applications like compilers, parsers, or any lookup-intensive algorithms where speed and efficiency are critical.</p><p>This initial release uses the FNV-1a hashing algorithm, which performs best with maps consisting of short strings. If you’re interested in using alternative hashing algorithms, modifying the crate is straightforward. Feel free to open a GitHub issue to discuss or contribute support for other algorithms.</p><p>Looking forward to hearing your feedback! The crate is available on <a href=\"https://crates.io/crates/hashify\">crates.io</a>.</p><p>: If you’re attending <a href=\"https://fosdem.org/2025/\">FOSDEM'25</a> this Saturday in Brussels, I’ll be presenting <a href=\"https://github.com/stalwartlabs/mail-server\">Stalwart Mail Server</a> (a Rust-based mail server) at 12 PM in the <a href=\"https://fosdem.org/2025/schedule/event/fosdem-2025-4571-stalwart-mail-server/\">Modern Email devroom</a>. Come by if you’re curious about Rust in email systems, or catch me before or after the presentation to talk about Rust, hashify, or anything else Rust-related.</p>","contentLength":1477,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Node module whose effect can be achieved by typing 2 (!) characters","url":"https://github.com/davidmarkclements/flatstr/blob/master/index.js","date":1737965146,"author":"/u/Totally_Dank_Link","guid":577,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1ib36bo/node_module_whose_effect_can_be_achieved_by/"},{"title":"Show HN: Making AR experiences is still painful – had to make my own editor","url":"https://ordinary.space/","date":1737963163,"author":"boriskourt","guid":182,"unread":true,"content":"<div><h3>With Ordinary Objects, ideating, designing and testing  experiences is faster and more fun than ever before. Discover novel use-cases, create variants and fine tune prototypes until they excite and are intuitive to use.</h3></div>","contentLength":219,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42838355"},{"title":"Calico vs Cilium as CNI","url":"https://www.reddit.com/r/kubernetes/comments/1ib2dx9/calico_vs_cilium_as_cni/","date":1737962080,"author":"/u/Flimsy_Tomato4847","guid":565,"unread":true,"content":"<p>I am building an onprem Cluster with 2 HA Proxy Setup, 3 Master and 2 Worker Nodes. For Services I want to implement an nginx Ingress to route the traffic to the endpoints. </p><p>Planning to implement Harbor as Image Registry in Gitlab and then use Security Features for „hardening“ the Cluster network.</p><p>What do you think is for this use case the better CNI ? </p><p>Cilium is since the Cisco takeover in critics because we all know that in long term Cisco is mostly interested in money and not in developing products. I know that Cncf gratuated means that at least one project contributor is not from Cisco. </p><p>So i am a bit more interested in Calico and Security Features.</p>","contentLength":661,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Lifelong Learning: 88+ Resources I Don't Regret as a Senior Software Engineer","url":"https://thetshaped.dev/p/lifelong-learning-88-plus-resources-i-do-not-regret-as-senior-software-engineer","date":1737954912,"author":"/u/pepincho","guid":576,"unread":true,"content":"<p>The Internet is flooded with content, materials, and resources.</p><p>Knowing the most useful newsletters, books, courses, creators, and tools is hard.</p><p>In this article, I want to share some incredible resources that I’ve found valuable in my experience and day-to-day job.</p><p>Each resource on this list taught me something new and helped me learn and grow as an engineer.</p><p>As a Senior Software Engineer, I need to keep up with the industry trends, updates, libraries, tools, vulnerabilities, etc, so that I can apply this knowledge at my job.</p><p>Here are most of the newsletters I read every week.</p><p>I use these four newsletters to stay up-to-date with the Web and JavaScript world.</p><p><strong>I’d suggest avoiding reading all these newsletter at once because you’ll feel overwhelmed.</strong></p><p>Depending on your current needs, priorities, and career aspirations, you might want to choose a few of them and come to the rest when needed.</p><p>Books are a great way to learn and grow as an individual.</p><p>We can learn from a lot of people even though they’re not in front of us.</p><p>We can learn from their mistakes and see what lessons they have learned.</p><p>However, I’ve found that if I read a book and don’t apply my knowledge from it as soon as possible, the value from reading the book drops drastically.</p><p><strong>Think in advance how reading a particular book will help you in your day-to-day tasks, job, and personal life. If you can’t apply the knowledge immediately, postpone reading it.</strong></p><p>Each book has taught me something or sparked a new idea and way of thinking.</p><p>It’s not necessary to apply everything from each book but rather look for the things that most suits you at the moment and adapt them to your lifestyle.</p><p>A great mistake I made in the past was to try to apply everything on 100%.</p><p><strong>The true wisdom comes when you find the 10-20% of the book to apply at the moment.</strong></p><p>At each phase of our lives we need different things, so think twice before applying anything directly. Be conscious.</p><ul><li><p>Don’t try to read and follow everything at once.</p></li><li><p>Think in advance how reading a particular book will help you in your day-to-day tasks, job, and personal life.</p></li><li><p>If you can’t apply the knowledge immediately, postpone reading the book or newsletter.</p></li><li><p>As you might see, there’re no courses. My preferred way is to read and apply what I read immediately in my day-to-day job or side-projects.</p></li></ul><p>That's all for today. I hope this was helpful.</p><p>What are the 1-2 resources you’ve found life changing? Share them in the comments 👀 👇</p><p>Become a better React Software Engineer. Join 17,400+ engineers who are improving their skills every week.</p><p>I share daily practical tips to level up your skills and become a better engineer.</p><p><em>Thank you for being a great supporter, reader, and for your help in growing to 17.6K+ subscribers this week 🙏</em></p><p><em>You can also hit the like ❤️ button at the bottom to help support me or share this with a friend. It helps me a lot! 🙏</em></p>","contentLength":2890,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1ib0lvg/lifelong_learning_88_resources_i_dont_regret_as_a/"},{"title":"Hedy: Textual programming made easy","url":"https://www.hedy.org/","date":1737954667,"author":"0x54MUR41","guid":195,"unread":true,"content":"<h2>Textual programming made easy!</h2><p>Many schools and teachers around the world want to teach their students programming. Initially this is often done with playful tools, ranging from the Beebot robot to\nScratch Junior or Scratch. After using such tools, kids often want to move to more powerful, textual programming languages, like Python.</p><p>Python however is hard, because it is only available in English, and requires learners to learn complex programming concepts and syntax at once.\nHedy is the easy way to get started with textual programming languages! Hedy is free to use, open source, and unlike any other textual programming language in three ways.</p><ol><li>Hedy is multi-lingual, you can use Hedy in your own language</li><li>Hedy is gradual, so you can learn one concept and its syntax a time</li><li>Hedy is built for the classroom, allowing teachers to fully customize their student's experience</li></ol>","contentLength":871,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42837636"},{"title":"Orbitiny Desktop Environment Released (Originally Announced as LQDE)","url":"https://www.reddit.com/r/linux/comments/1iayzwm/orbitiny_desktop_environment_released_originally/","date":1737949743,"author":"/u/sash-au","guid":570,"unread":true,"content":"<p>Finally, after about a month after the original announcement (LQDE), the  has been released.</p><p>Built from the ground up using  and coded in C++,  is a new, 100% portable, innovative and traditional but modern looking desktop environment for Linux.  because it has features <strong>not seen in any other desktop environment before</strong> while <strong>keeping traditional aspects of computing alive</strong> (desktop icons, menus etc).</p><p>Portable because you can run it on any distro and on any live CD and that's because everything gets saved inside the directory that gets created when the archive is extracted (this can be changed so that the settings go to $HOME/.config/orbitiny).</p><p>One of these innovative features is  but more on that later in this post.</p><p>It comes with its own set of utilities and applications. It has a device manager which can disable / enable devices by right-clicking the device and selecting  and all that <strong>without black-listing the whole kernel module</strong> so it targets the selected device only and nothing more.</p><p>It has its own <strong>fully featured and innovative file manager</strong>, a fully featured <strong>desktop panel with 18 plugins</strong> with <strong>full and natural Drag&amp;Drop</strong> support, a dedicated search utility, one integrated with the file manager while the other is a stand-alone one, a , <strong>hot-plug detection with desktop notifications</strong> and more.</p><p> is  a derivative of or based on any other project. It started with a blank / main window - the one that you'd create in Qt Creator when you start a new project.</p><p>So what is so special and innovative in ? I don't know where to start, here are some of the features that sets it apart from other DEs (I've probably missed some).</p><ul><li> - On the blank area of the desktop, draw a gesture pattern (like in a web browser) but on the desktop to perform an action, like for example, launch a custom command or use one of the built-in supported actions available to choose from. Up to 12 gestures are supported for both left and right mouse buttons, 12 per button + additional configurations for middle clicks. Gestures are drawn on the blank area of the desktop and they work regardless whether icons are turned off or on.</li><li> When a file is  or  to the clipboard, a little icon emblem with a \"cut\" or \"copy\" symbol is attached to the icon to indicate that the file is on the clipboard, either copied or cut. If the file is a directory, and contents of that directory change (like a file is created or deleted), an emblem is attached to let you know that the folder contents have changed.</li><li> - Drag a text file over another text file to add the contents of the dragged file to the target file.</li><li> - If there is ASCII content on the clipboard, right click the files and select \"\" and the content will be appended to the end of the file. Prepending is also available. If the selected file is a folder, the text content will be pasted into that folder and a file gets generated automatically. There is also image pasting. If the clipboard has an image, right click + paste will generate an image file.</li><li> - Select a set of folders on the desktop and click \"Paste\" and the content from theclipboard will be pasted <strong>to all of the selected folders</strong>. Text content will also be pasted automatically by generating a unique file name and a file (works with images too).</li><li><strong>Custom Desktop Directories</strong> - Choose any folder and use it as a desktop directory. It doesn't have to be .</li><li> - Each screen is a separate desktop so on one screen you can have one desktop with its own set of icons (by selecting a desktop directory of your choice) and on another screen, you can have another desktop with its own icon by selecting a different desktop folder. Of course, works with wallpapers too. So it's like two different computers running on two screens</li><li><strong>Beautiful and Non-Blocking Custom Context Menus</strong>. Non-blocking means your traditional shortcuts you have assigned in X11, will continue to work when a context menu is open, the shortcut won't get caught/blocked by it like it is the case with many other applications that use standard context menus. The context menus are custom made, not using the QMenu component.</li><li> - Select several folders, right click and select Open Terminal and a new terminal will open for all of the selected folders.</li><li><strong>Built-in Run Drop-down Box (Combo Box)</strong> in the context menus allows you to run a command against the selectedfiles (highly experimental and new).</li><li><strong>Multi Profile Support on the Panel</strong> - Right click the edge button on the panel and create a new profile or select one of the previously created ones to get a new configuration / sets of applets. You can switch between profiles like you switch different TV channels.</li><li><strong>Full Drag&amp;Support on the Panel</strong> - Drop any File/Folder from the Desktop or a File Manager or Drag and Re-arrange any applet, any icon on the panel. <strong>No special \"Edit Mode\" is required</strong>. Just grab the applet on the panel or a file from the desktop / file manager and drop it straight onto the panel and an icon for it gets created or the dragged one gets re-positioned. So to be clear: Launch Thunar, Nemo, Dolphin or whatever and drop any file / folder from it onto the panel, either on the Quick Launch or anywhere else and a file icon gets created. This, Drag&amp;Drop Support . The panel can be resized, and placed on any corner of the screen by dragging its handle or you can put it on the middle of the screen if you wish, or turn it into a dock with auto-resizing, or a deskbar that takes the width or the height of the screen. It's highly configurable. I use it as a deskbar as I am used to it.</li><li><strong>A Comprehensive Start Menu / Application Launcher</strong> applet and again with full Drag&amp;Drop support. You can re-arrange icons within the menu, from / in the menu, and there is designated area for a sidebar too on the menu which you can also attach / remove icons from and in to it.</li><li> - Perform custom actions on the selected files. Commands can be edited in the configuration file.</li><li> inside the right-click context menu.</li><li> - click any edge on the desktop to launch a dashboard window that shows you running tasks + installed applications. Search/Filter is available. At the moment, the running applications only work with X11.</li><li> - All the files needed to run along with the applications it comes with can be downloaded to a USB flash drive (or a folder) along with the settings so you can just take the whole folder with you and run it on any Linux computer and the settings will remain the same so the settings are also portable.</li><li> support. All the components mentioned here support both WINE and DOSBOX. This means, if you drop a Windows or DOS exe onto the panel and click on it to launch it or double click it from the file manager or the desktop, its path will be handed over to either WINE or DOSBOX to run it.</li><li> - Remember this? Well, if you double click on a MAFF file, it will extract it in the /tmp dir and launch it for you, same as if you are clicking an HTML file.</li><li> - Some of the panel applets such as the launcher applet, quick launch and the drawer menu along with its items allow you to add two commands per launcher. One for left-click and another one for middle-click.</li><li><strong>Multi-content Search Support in File Manager</strong> - The file manager supports searching for content inside files but it also gives you an option to search for an additional word on the same line the match is found.</li><li> - To increase / decrease the icon size, along the standard CTRL + Wheel to zoom in / out, you can also click and hold the right-hand mouse button and use the scroll wheel – up/down.</li><li><strong>Double-Clicking a Blank Desktop Area</strong> Run a preset gesture or an individual command when the blank area of the desktop is clicked. Hold-Down Right-Hand Mouse Button and Double Click - Run a preset gesture or an individual command</li></ul><p>Right now, it serves more like a desktop shell because it doesn't have a session manager and other utilities such as a power manager, screensaver, screen config etc but if I get enough motivation, I intend to develop that too.</p><p>The application can run in  and  mode.</p><p>To run in portable mode, make sure a file named \".portable_mode\" (without the quotes) exists in </p><p> If running in , it will return the path to the folder/dir that contains all the files. if running in e, it will return </p><p> Returns the path to <strong>$BASE_DIR/shared directory</strong>.</p><pre><code> To make sure the package remains portable across live CDs and distros, save/download all yours files to the \"shared\" folder and then when assigning commands to launchers, do something like $SHARED_DIR/my_file </code></pre><p>To run in , make sure a file named \"\" (without the quotes) exists in .</p><ol><li>This desktop can be run on top of any other desktop, even GNOME, Elementary, KDE. When so, it draws its own desktop window, full screen covering the already running one. When run under iconless desktops, you will get icons (works on GNOME).</li><li>Right-click the Desktop and go to \"Environment &amp; Workspace Settings\" and then \"Appearance\" to adjust the content margins of the desktop. This is the left, top, right and bottom positions of where the icons start. It's in the \"Content Margins &amp; Spacing\" section. This should be adjusted according to where the existing panels are positioned such as the GNOME menu bar or any other panels on the sides of the screen.</li><li>Double-clicking the \"Linux System\" icon brings a \"Disks &amp; Partitions\" menu. This behaviour will remain until I implement a proper and fancy \"Computer\" window. I have most (but not all) of the code already.</li><li>Right-clicking \"Linux System\" brings up a menu with a set of system utilities whose paths need to be set in \"Environment &amp; Workspace Settings\"-&gt;\"Applications\". Except for the \"Device Manager\" which I already have working (most of it), the rest of the utilities need implementation but as a work-around, you can enter a path to an external utility.</li><li>Double-clicking the \"Disks &amp; Partitions\" icon brings up a different, perhaps fancier \"Disks &amp; Partitions\" menu so use the one you prefer. Right-clicking the \"Disks &amp; Partitions\" icon will bring the same \"Disk &amp; Partitions\" menu as the one that comes when double-clicking the \"Linux System\" icon.</li><li>I have pre-prepared an existing \"Custom Actions\" menu for you to look at. Take a look at the examples, I think you will get the gist but if you don't, then just email me / ask me. \"Right-click\"-&gt;\"Custom Actions\"-&gt;\"Edit Custom Actions\".</li><li>When holding the \"Alt\" key when double-clicking an icon, either on the desktop or the file manager or any of the panel applets that let you run commands, will force-run the command in a terminal window  there is a catch. This will NOT work if your window manager's accessibility key is set to \"Alt\". On my system, I have this accessibility key set to the Super key so it works fine. I will make this customizabe in the future.</li><li>You will need to right-click the \"Orbitiny\" applications menu on the panel and go to \"Commands\" to set log out, reboot and power off commands. These will need to be matched with the ones used by the exisitng session manager.I have done it like this because I don't have a session manager yet. My next primary goal is to develop a session-manager so that you can select the DE from your display manager and run it. Right now, you can set \"start-orbitiny\" as a start-up application in your existing desktop environment settings and when so, it will start automatically.</li><li>Wayland support, as far as I am aware, the window tasks and the systray are the only parts that don't work but it has not been tested fully. When testing, you should be testing it under the X11 display server rather than a Wayland compositor. Right now, I don't support any of the Wayland copmositors but I intend to add official Wayland support in the future.</li><li>By default, middle-clicking an empty area on the desktop will bring the fancy looking \"Disk &amp; Partitions\" menu. You can change this in \"Environment &amp; Workspace Settings\"-&gt;\"Advanced\"-&gt;\"Gestures\"-&gt;\"Middle Button Click\".</li><li>You can change gestures in \"Environment &amp; Workspace Settings\"-&gt;\"Advanced\"-&gt;\"Gestures\"</li><li>Some of the panel applets such as the launcher applet and the drawer menu along with its items allow you to add two commands per launcher. One for left-click and another one for middle-click.</li></ol><p>The code base is huge, some of it is very old and requires a re-write and some very new and I've most likely missed something and that would cause an error.</p><p>Please don't get upset/disappointed if you encounter an error or something that's annoying, just let me know and I will fix it.</p><p>Finally, if you are happy with what you see, please consider making a monetary donation. That would be very much appreciated and would motivate me to continue working on the project and release updates, add/improve features etc. Originally I built this DE for my personal use but I now decided to release it to the public.</p><p>bce30f77bcdc42bdc9633095e4b97327</p><p>Again, the code base is large and without a doubt something is broken so please report bugs / issues and I will try to fix it. Looking forward to your feedback.</p><p>Something I forgot to add about the panel.</p><ul><li>In some VMs, pressing and holding keyboard keys simultaneously do not behave as expected and as such it is not an issue with this panel.</li><li>Click on a panel handle or the edge button and move the bar to any of the 4 edges of the screen / monitor to dock the panel to that edge position of the screen.</li><li>Click on a panel handle and then while holding CTRL, drag horizontally to resize the bar.</li><li>Click on a panel handle and then while holding SHIFT, drag vertically to move the bar vertically.</li><li>Click on a panel handle and then while holding ALT, drag horizontally to move the bar horizontally.</li><li>Also, the Edge button at the end of the panel can act as a handle <a href=\"http://too.Click\">too.Click</a> on a panel handle and then while holding CTRL, press the Up/Down keys on your keyboard to move the bar vertically by an inch at a time.</li><li>Likewise, press the Left/Right keys on your keyboard to move the bar horizontally by an inch at a time.</li><li>Hover over the panel and use the mouse wheel to scroll the panel Contents (when scrolling is enabled).</li><li>Hover over the panel and then while holding CTRL, use the mouse wheel to resize the bar.</li><li>Double clicking a panel handle will run a command. You can edit the command in Preferences.</li><li>Middle clicking a panel handle will expand/collapse a panel.</li><li>To copy the content of a tooltip, click the tooltip icon on the right.</li><li>To stop this message from popping up, go to Preferences and uncheck \"Show Drag Handles Tooltips\" located in the \"Other\" tab.</li><li>To get to Preferences, right click the panel and select Preferences from the popup menu.</li></ul>","contentLength":14425,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Linux 6.14 To Switch From SHA1 To SHA512 For Module Signing By Default","url":"https://www.phoronix.com/news/Linux-6.14-Modules","date":1737946679,"author":"/u/unixbhaskar","guid":571,"unread":true,"content":"<p>Michael Larabel is the principal author of Phoronix.com and founded the site in 2004 with a focus on enriching the Linux hardware experience. Michael has written more than 20,000 articles covering the state of Linux hardware support, Linux performance, graphics drivers, and other topics. Michael is also the lead developer of the Phoronix Test Suite, Phoromatic, and OpenBenchmarking.org automated benchmarking software. He can be followed via <a href=\"https://twitter.com/MichaelLarabel\">Twitter</a>, <a href=\"https://www.linkedin.com/in/michaellarabel/\">LinkedIn</a>, or contacted via <a href=\"https://www.michaellarabel.com/\">MichaelLarabel.com</a>.</p>","contentLength":500,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/linux/comments/1iaxzp8/linux_614_to_switch_from_sha1_to_sha512_for/"},{"title":"Event driven restart of Pods?","url":"https://www.reddit.com/r/kubernetes/comments/1iax3fa/event_driven_restart_of_pods/","date":1737943849,"author":"/u/ButterscotchWeak1192","guid":568,"unread":true,"content":"<p>Context: we have a particular Pod which likes to hang, for unknown to us reasons and conditions (it's external software, we can't modify, and logs don't show anything).</p><p>The most accurate way to tell when it's happening is by checking a liveness probe. We have monitoring set up for particular URL and we can check for non 2xx status.</p><p>This chart we talk about deploys  Pod as well as  Pods. Each is separate Deployment.</p><p>The issue: when  Pod fails it's liveness probe, it gets restarted by k8s. But we also need to restart  nodes, because for some reason it looks like they lose connection in such way that they don't pick up work, and only restart helps. And  in this case .  Pod first, then .</p><p>Restart in case of liveness probe restarts only affected Pod. Currently, to restart workers too, I installed <a href=\"https://keda.sh/\">KEDA</a> in cluster and created <a href=\"https://keda.sh/docs/2.14/concepts/scaling-jobs/\">ScaleJob</a> object to trigger deployment restart. As trigger we use <code>kube_pod_container_status_restarts_total</code> Prometheus query:</p><pre><code>apiVersion: keda.sh/v1alpha1 kind: ScaledJob metadata: name: n8n-restart-job-scaler namespace: company spec: jobTargetRef: kind: Job name: n8n-worker-restart-job spec: jobTargetRef: template: spec: containers: - name: kubectl image: bitnami/kubectl:latest # imagePullPolicy: Always command: [\"/bin/sh\", \"-c\"] args: [\"kubectl rollout restart deployment n8n-worker -n company\"] backoffLimit: 4 pollingInterval: 15 # Check every 15 seconds (default: 30) successfulJobsHistoryLimit: 1 # How many completed jobs should be kept. failedJobsHistoryLimit: 1 # How many failed jobs should be kept. triggers: - type: prometheus metadata: serverAddress: https://&lt;DOMAIN&gt;.com/select/0/prometheus metricName: pod_liveness_failure threshold: \"1\" # Triggers when any liveness failure alert is active query: increase(kube_pod_container_status_restarts_total{pod=~\"^n8n-[^worker].*$\"}[1m]) &gt; 0 </code></pre><p>This kind of works. I mean it succesfully triggers restarts. But: - in current setup it triggers multiple restarts when there was only single liveness probe failure. This extends downtime<p> - depending on different settings for check time, there might be a slight delay between time of event, and time of triggering</p></p><p>I've been thinking about more event-driven workflow. So that when event in cluster happens, I can perform matching action. but I don't know what options would be most suitable for this task.</p><p>What do you suggest here? Maybe you've had such problem? How would you deal with it?</p><p>if something is unclear or I didn't provide something, ask below and I'll provide more info.</p>","contentLength":2504,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Marginalia – A search engine that prioritizes non-commercial content","url":"https://marginalia-search.com/","date":1737941945,"author":"herbertl","guid":194,"unread":true,"content":"<!DOCTYPE html>","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42836405"},{"title":"Tips for detecting if our shell is running inside a virtual machine","url":"https://distrowatch.com/weekly.php?issue=20250127#qa","date":1737940161,"author":"/u/daemonpenguin","guid":569,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/linux/comments/1iavvtw/tips_for_detecting_if_our_shell_is_running_inside/"},{"title":"How do popular Rust UI libraries compare? Iced vs Slint vs Egui","url":"https://www.reddit.com/r/rust/comments/1iavpit/how_do_popular_rust_ui_libraries_compare_iced_vs/","date":1737939640,"author":"/u/nikitarevenco","guid":583,"unread":true,"content":"<div><p>For creating a desktop application, I've come across 3 libraries which I'm thinking of using:</p><p>Which one would you use and why? If you have another library in mind I would love to hear it. </p></div>   submitted by   <a href=\"https://www.reddit.com/user/nikitarevenco\"> /u/nikitarevenco </a>","contentLength":223,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Openhaystack: Build 'AirTags' – track Bluetooth devices via Apple's network","url":"https://github.com/seemoo-lab/openhaystack","date":1737936687,"author":"thunderbong","guid":193,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42835772"},{"title":"How did you go about \"Writing an interpreter in Go\" (The book)","url":"https://www.reddit.com/r/golang/comments/1iau5os/how_did_you_go_about_writing_an_interpreter_in_go/","date":1737935210,"author":"/u/PeachKnight96","guid":561,"unread":true,"content":"<p>Did anyone here finish this book?</p><p>The author says we should follow along the book and type the code in our machine but I really don't understand this way of teaching. What am I learning if I only type this into my machine?</p>","contentLength":221,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Lessons in creating family photos that people want to keep (2018)","url":"https://estherschindler.medium.com/the-old-family-photos-project-lessons-in-creating-family-photos-that-people-want-to-keep-ea3909129943","date":1737933181,"author":"mooreds","guid":192,"unread":true,"content":"<p><em>As a consequence of scanning thousands of slides, I learned quite a bit about taking photos that capture a family’s life. Here’s a personal memoir, with a few lessons in taking memorable snapshots.</em></p><p>My father was an avid amateur photographer. He loved to take pictures, he invested in expensive cameras, and I’ve plenty of vacation memories where he had one of those cameras in hand.</p><p>But organizing the slides afterwards? Labeling them? No way. Pop threw the boxes of slides in big piles and said, “I’ll sort them after I retire.” And, in preparation for his retirement, he put all those slides into five huge boxes — the kind you’d use to ship vinyl records.</p><p>Whereupon, three days after my father formally retired in 1988, he died in his sleep.</p><p>The slides stayed with my mother. When she moved into assisted living, the boxes went into my sister’s garage. After mom died, three years ago, they came to me. The result was a huge project of scanning family slides — between 8,000 and 10,000 of them.</p><p>The primary goal was to save the photos before the media deteriorated beyond hope. It was too late in some cases. I remember Pop telling me how much cheaper Ektachrome was (compared to Kodachrome), but many of those images were as ghost-like as a half-remembered dream. Memories fade even faster. Is that a photo of my second cousin Charlotte? I’ve no idea.</p><p>For those who want practical lessons, herein you will find two categories:</p><ul><li>How to go about a family photo archive project (or at least how I did it) and</li><li>Practical suggestions for taking photos that your family will treasure long after you’re gone.</li></ul><p>This was an oddly spiritual process. We take pictures of the moments we think are valuable or important. So, in the photos he took, I saw my father’s dreams, the things he thought were beautiful, his moments of pride. And in so doing, I gained more understanding of who my parents were. …but I’ll leave that essay to another time.</p><p>I have spoken with several people who have similar family photo archives, so let me begin by describing I went about the project.</p><p>Before I began, I had an inexpensive <a href=\"http://amzn.to/2BzhIkw\" rel=\"noopener ugc nofollow\" target=\"_blank\">Wolverine slide scanner</a> but I knew a manual unit would not cut it. I bought a heavy-duty slide scanner to help me process the images. It’s a <a href=\"http://amzn.to/2u4f8Ee\" rel=\"noopener ugc nofollow\" target=\"_blank\">Canon CanoScan 9000F</a>. I like it, in case you’re shopping for an affordable unit; in particular, I do not loathe the built-in software, which sets it apart from other scanners I’ve used.</p><p>The project, which took me about a year, became a background process. I could scan a box of slides while I was reading my daily morning e-mail, then clean up and share the images during moments of down-time (such as waiting for poky websites to load site statistics). Over a weekend I usually could get through five or six boxes of slides.</p><p>Scanning a box of slides had several steps, each of which became a kind of emotional triage:</p><ul><li>I held up a slide (in front of a desk lamp) to identify it generally and decide if it was worth scanning. In other words: Do I care about this at all? Something out-of-focus easily could be thrown away. A picture of people I didn’t care about (e.g. someone my folks met on a bus tour and never spoke with again) could be dumped, too. It soon became obvious that I didn’t need to scan tourist photos; there are just-so-many pictures you need to see of the Tower of London (which looks the same today as it did in 1972 when my parents visited) or random sunsets over random mountains.</li><li>If the slide looked interesting, I did a fast preview scan. For instance, if my father took three pictures “just to be sure” I could choose the best image; I could throw out the ones where my brother had his eyes closed. And I could eliminate the pictures that were inherently uninteresting, by which I mean it brought me no sense of nostalgia.</li><li>By the time I scanned an image, I was pretty committed to keeping it and sharing it with my siblings. Sometimes, if an image was entertaining or meaningful, I’d share it among my friends on Facebook.</li></ul><p>From a box of 24–36 slides, I usually shared about 8 with my brother and sisters. By the end of the project, I’d shared 2,800 images with my siblings, and a few hundred on Facebook.</p><p>I used iPhoto to clean up the images and sort them into a dedicated folder. While tools like PhotoShop certainly could do a better job (and were trotted out for a few special images), 98% were treated with iPhoto’s crop, straighten, and the “Enhance” button. I also added dates and locations to the images’ metadata.</p><p>To share the images with my family, I uploaded photos to Flickr. Other photo sharing sites have far better user interfaces, but Flickr has two advantages: I can limit sharing to a set of people marked as friends-and-family, and viewers can comment on the images. Plus you can search images, if you’re smart enough to add tags as you go. (Do.)</p><p>Towards the end I also created private Facebook groups, which let me share with cousins as well as siblings, though its search capabilities are poor. It’s been useful for sharing those videos, though, and for encouraging conversations among my relatives.</p><p>For general sharing online, I created an Old Family Photos album on Facebook. iPhoto makes it easy to share to an album (though, alas, not to a private group). I’ve been astonished by how many of my family’s history touches a chord. Don’t be shy; but do keep your family’s privacy sensitivities in mind when you share.</p><p>The earliest roll of slides was from my parents’ engagement party circa 1941, followed by their honeymoon snapshots in 1942. Thousands of slides record their lives all the way through the 1980s, with a Family Circle gathering held only two months before my father’s death.</p><p>Inside the big boxes were two shoeboxes with a hundred 8mm video movies, which went back to the 1920s but mainly record 1950s camping trips. (<a href=\"https://www.imemories.com/\" rel=\"noopener ugc nofollow\" target=\"_blank\">iMemories</a> did a very good job at digitizing those.)</p><p>Most images are from family vacations and special occasions, rather than “daily life.” Earlier vacations (1950s and 1960s) are mostly camping trips; later pictures are from trips to Europe, particularly when money eased up after “the kids left home.”</p><p>But more is visible than the campsites and Boy Scout trips. I saw a young couple’s struggles to cope with three young children (I was an afterthought); I watched their idealism diminish and exhaustion set in.</p><p>I threw away many thousands of pictures. Some of them undoubtedly had meaning to my parents, but nobody alive cares about those photos. Yet I also came across special moments — and none of us need to have “been there” to appreciate them.</p><p>In reviewing thousands of slides, I learned quite a bit about taking photos that capture a family’s life. Perhaps these lessons can help you, too, in considering which images to snap — on vacation or in daily life.</p><p><strong>Those “title slides” are meaningful after all</strong>. I remember rolling my eyes whenever my father would station me in front of a road sign or National Park entrance. Such pictures seemed really lame.</p><p>As I reviewed the pictures, though, the title slides were priceless. In all those years, my parents went to dozens of beaches, gardens, and campsites in random mountain ranges. Other than the date on the slide (“Sep 83”) I have no way to identify which one it is. (Occasionally, there’s a scribbled note, like, “Explorer Trip” or “London.” Um, thanks, Pop.)</p><p>So I was always glad when I found a photo of us kids standing next to a “Mystic Seaport” sign or “Underground tours” (always looking put-upon and sullen, because we were told to “Stand up straight! And smile — it might turn out good!”).</p><p>Labels matter. Even a few words helped me know when-and-where something happened: “1955 Nova Scotia” or my grandfather’s name. One of the saddest experiences was looking at a family-gathering photo from the 50s with several people in it, and having no idea who’s in it. (Is that my great-aunt? Maybe my sister remembers? …and too often she didn’t.) If you inherit the photos, take the time to identify the people in them. Even if it’s obvious to you that the picture is of cousin Janet who died in 1943, you can’t assume that the next viewer will know.</p><p>: Do take pictures that give the viewer a clue of where you are, and with whom.</p><p><strong>Kodak picture spots aren’t memorable</strong>. Destination pictures surely remind the travelers of their experience. I’m sure that that picture of the beach in Portugal would have encouraged my father to say, “Thelma, remember that night?” That’s fine, for the people who participated. I’ve taken thousands of such photos myself.</p><p>But if I wasn’t there, the image brings me no nostalgia.</p><p>The worst of these pictures are the touristy photos. My father took plenty of pictures of the Eiffel Tower on their trip in the 70s. But the tower doesn’t look any different today, so I didn’t bother to scan those photos. In fact, I dumped boxes without even looking at the contents, because there’s nothing in that experience that speaks to anyone but the participants.</p><p>: It’s fine to take pictures that capture a moment for those who were present. But if  could have taken that photo, don’t expect anyone to care.</p><p><strong>People pictures matter the most</strong>. Especially the non-staged ones. The formal pictures of special occasions, where we kids are lined up like we’re in front of a firing squad, are not the ones that bind us.</p><p>The best family photos are the ones where we’re clowning around and laughing, or where we’re doing something together, or a moment captured without the subject realizing it. The most precious are those where the family is putting up a pup tent, or using the water pump, or packing the car for a trip.</p><p>In general, try to capture your family when they are actively doing something, ideally an entire process. Let it be a photo essay: “Mom making Thanksgiving dinner” or “Daddy taking the kids to the petting zoo.” Don’t choose only the “reveal” moments such as Mom presenting the turkey to the table; include a picture of her hurriedly putting on lipstick before Grandpa arrives, or the kids conked out, asleep in the back seat, on the car trip home.</p><p>A few exceptions: Nobody looks attractive or interesting while he’s swimming. Few people look great sitting on a towel on the beach, wearing a bathing cap. Also don’t take pictures of people eating dinner, even at a fancy dinner. And while it’s no longer relevant, it was never a good idea to photograph exhausted travelers arriving at an airport gate.</p><p>Include the photographer. I have few pictures of my father, because he was always the guy behind the camera. When he did ask someone to take a picture it was always posed, such as “Mom and Pop standing in front of the Grand Canyon.”</p><p>: Photos that capture you “being there” — which means most selfies — rarely have meaning.  matters far more.</p><p><strong>Take photos of daily life</strong>. I’m stunned by the pictures my father  take. There isn’t a single photo that represents what my parents did for a living. They weren’t the type to attend company picnics, fine. But I found nothing indicating “take your daughter to work” or “Mom typing up a report” or “the building I worked in” or “the woman Mom commuted to work with for 10 years.” That would be more understandable if my parents disliked their jobs, but both of them were passionate about their careers.</p><p>Take photos of people at rest. Even though I spent much of my childhood writing letters, there is only one photo of me with a pen in my hand — and that was taken by a friend at summer camp. Yet my friends and family all recall me with a book or pen within reach. My father never captured that essential part of who I was.</p><p>Some of the absences may reflect their superstitions. There are zero photos of any woman who is visibly pregnant. Maybe that was considered bad luck; I don’t know.</p><p>: Don’t limit photo-taking to special occasions.</p><p><strong>Take at least a short class in photography basics</strong>. Or read a basic book on the topic. As much as my father loved photography, he never got any kind of formal training. I spend a lot of editing time cropping images to take advantage of the simplest rule-of-thirds, for instance.</p><p>Even if you aren’t devoted to photography that much: Crop photos closely. My father took a lot of photos of “Mom in front of a pretty vista” but in the long run I care more about Mom’s expression than the expanse of mountains in the background. Thanks to iPhoto I can zoom in, but a lot of detail is lost.</p><p>: Take the best quality photos you can. Your grandchildren will appreciate it.</p>","contentLength":12639,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42835282"},{"title":"Microk8s - User \"system:node:k8snode01\" cannot list resource \"pods\" in API group","url":"https://www.reddit.com/r/kubernetes/comments/1iat7jr/microk8s_user_systemnodek8snode01_cannot_list/","date":1737932605,"author":"/u/myridan86","guid":564,"unread":true,"content":"<p>For some reason, I started receiving this error on one of the nodes. Apparently everything is working, some pods were crashing, but I've already removed them and they started up normally...</p><p>I looked for the message below on the internet, but I didn't find much...</p><p><strong>Jan 26 19:27:13 k8snode01 microk8s.daemon-apiserver-kicker[68418]: Error from server (Forbidden): pods is forbidden: User \"system:node:k8snode01\" cannot list resource \"pods\" in API group \"\" at the cluster scope: can only list/watch pods with spec.nodeName field selector</strong></p><pre><code>Jan 26 19:27:13 k8snode01 sudo[68404]: root : PWD=/var/snap/microk8s/7589 ; USER=root ; ENV=PATH=/snap/microk8s/7589/usr/bin:/snap/microk8s/7589/bin:/snap/microk8s/7589/usr/sbin:/snap/microk8s/7589/sbin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin LD_LIBRARY_PATH=/var/lib/snapd/lib/gl:/var/lib/snapd/lib/gl32:/var/lib/snapd/void:/snap/microk8s/7589/lib:/snap/microk8s/7589/usr/lib:/snap/microk8s/7589/lib/x86_64-linux-gnu:/snap/microk8s/7589/usr/lib/x86_64-linux-gnu:/snap/microk8s/7589/usr/lib/x86_64-linux-gnu/ceph: PYTHONPATH=/snap/microk8s/7589/usr/lib/python3.8:/snap/microk8s/7589/lib/python3.8/site-packages:/snap/microk8s/7589/usr/lib/python3/dist-packages ; COMMAND=/snap/microk8s/7589/bin/ctr --address=/var/snap/microk8s/common/run/containerd.sock --namespace k8s.io container ls -q Jan 26 19:27:13 k8snode01 sudo[68404]: pam_unix(sudo:session): session opened for user root(uid=0) by (uid=0) Jan 26 19:27:13 k8snode01 sudo[68404]: pam_unix(sudo:session): session closed for user root Jan 26 19:27:13 k8snode01 microk8s.daemon-apiserver-kicker[68418]: Error from server (Forbidden): pods is forbidden: User \"system:node:k8snode01\" cannot list resource \"pods\" in API group \"\" at the cluster scope: can only list/watch pods with spec.nodeName field selector Jan 26 19:27:13 k8snode01 microk8s.daemon-apiserver-kicker[68393]: Traceback (most recent call last): Jan 26 19:27:13 k8snode01 microk8s.daemon-apiserver-kicker[68393]: File \"/snap/microk8s/7589/scripts/kill-host-pods.py\", line 104, in &lt;module&gt; Jan 26 19:27:13 k8snode01 microk8s.daemon-apiserver-kicker[68393]: main() Jan 26 19:27:13 k8snode01 microk8s.daemon-apiserver-kicker[68393]: File \"/snap/microk8s/7589/usr/lib/python3/dist-packages/click/core.py\", line 764, in __call__ Jan 26 19:27:13 k8snode01 microk8s.daemon-apiserver-kicker[68393]: return self.main(*args, **kwargs) Jan 26 19:27:13 k8snode01 microk8s.daemon-apiserver-kicker[68393]: File \"/snap/microk8s/7589/usr/lib/python3/dist-packages/click/core.py\", line 717, in main Jan 26 19:27:13 k8snode01 microk8s.daemon-apiserver-kicker[68393]: rv = self.invoke(ctx) Jan 26 19:27:13 k8snode01 microk8s.daemon-apiserver-kicker[68393]: File \"/snap/microk8s/7589/usr/lib/python3/dist-packages/click/core.py\", line 956, in invoke Jan 26 19:27:13 k8snode01 microk8s.daemon-apiserver-kicker[68393]: return ctx.invoke(self.callback, **ctx.params) Jan 26 19:27:13 k8snode01 microk8s.daemon-apiserver-kicker[68393]: File \"/snap/microk8s/7589/usr/lib/python3/dist-packages/click/core.py\", line 555, in invoke Jan 26 19:27:13 k8snode01 microk8s.daemon-apiserver-kicker[68393]: return callback(*args, **kwargs) Jan 26 19:27:13 k8snode01 microk8s.daemon-apiserver-kicker[68393]: File \"/snap/microk8s/7589/scripts/kill-host-pods.py\", line 84, in main Jan 26 19:27:13 k8snode01 microk8s.daemon-apiserver-kicker[68393]: out = subprocess.check_output([*KUBECTL, \"get\", \"pod\", \"-o\", \"json\", *selector]) Jan 26 19:27:13 k8snode01 microk8s.daemon-apiserver-kicker[68393]: File \"/snap/microk8s/7589/usr/lib/python3.8/subprocess.py\", line 415, in check_output Jan 26 19:27:13 k8snode01 microk8s.daemon-apiserver-kicker[68393]: return run(*popenargs, stdout=PIPE, timeout=timeout, check=True, Jan 26 19:27:13 k8snode01 microk8s.daemon-apiserver-kicker[68393]: File \"/snap/microk8s/7589/usr/lib/python3.8/subprocess.py\", line 516, in run Jan 26 19:27:13 k8snode01 microk8s.daemon-apiserver-kicker[68393]: raise CalledProcessError(retcode, process.args, Jan 26 19:27:13 k8snode01 microk8s.daemon-apiserver-kicker[68393]: subprocess.CalledProcessError: Command '['/snap/microk8s/7589/kubectl', '--kubeconfig=/var/snap/microk8s/7589/credentials/kubelet.config', 'get', 'pod', '-o', 'json', '-A']' returned non-zero exit status 1. </code></pre><p>If anyone has any idea what it could be... because memory, disk, processing, network... I've already checked.</p>","contentLength":4426,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"k3s pods networking","url":"https://www.reddit.com/r/kubernetes/comments/1iaszwq/k3s_pods_networking/","date":1737932042,"author":"/u/crewman4","guid":563,"unread":true,"content":"<p>im not used to \"onprem\" k8s and am testing setting up an k3s in my homelab and i cant get it to work. ive been testing this on debian server and whatever i do, fresh installs and such, i cant enter a pod and wget an external internet site. all sites point to some IP (213.163.146.142:443)</p><p>Non-authoritative answer:</p><p>i can resolve dns , but thats hosted internally. everything else works from debian server and no firewalls active. ive been chatGPTing for hours but im stuck. ive rolled new servers and tested everything :P</p>","contentLength":519,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"MoxyProxy, an Atreugo(fasthttp) proxy with web interface","url":"https://www.reddit.com/r/golang/comments/1iasbf8/moxyproxy_an_atreugofasthttp_proxy_with_web/","date":1737930237,"author":"/u/ShotgunPayDay","guid":559,"unread":true,"content":"<p>I wanted to make a proxy that was as easy as possible to configure with functionality that I've always wanted. Here is the list of features from the README:</p><ul><li>Built with Atreugo (fasthttp).</li><li>Simple Web Interface (html/template, HTMX, Surreal, BulmaCSS), hijacks /moxyproxy route</li><li>ACME autocert using TLS-ALPN-01. Activates upon setting DomainName and restarting application.</li><li>Automatically upgrade http:// to https:// when DomainName is set.</li><li>Wireguard Server automatic update/restart upon peer changes.</li><li>Wireguard Peer config generation through HTTPS GET /moxyproxy/wg with dedicated Token and new Peer Name.</li><li>Serve static assets from /moxyproxy/public and /moxyproxy/private (OAuth2 protected)</li><li>Built in OAuth2 to block non-logged in users and send JSON user data to upstream servers using \"moxyuser\" header.</li><li>User data is not stored in the proxy and is instead sent to client in compressed ZSTD then encrypted AES256/GCM cookie.</li><li>Built in RateLimiter that will return 429 Too Many Requests on any request.</li><li>Automatic IP banning (403 Forbidden) on 4xx Response which counts against the IPs LimiterBanCount for the day this includes responses from upstream servers: <ul><li>401 Unauthorized 5x penalty</li><li>400 Any other 400 1x penalty</li></ul></li><li>Minimal configuration needed to get started.</li></ul><p>It's still a work in progress and currently being used for my website and services.</p><p>Not production ready and there will probably be breaking changes. I still need to figure out a testing strategy and benchmarking to do fine tuning. I'd like to test HTTPS to HTTP with wireguard with a net/http server serving HTML which means using VPSs to test the round trip without it breaking the bank. Synthetic tests aren't going to show any real world performance.</p><p>Screenshots are in the README.</p>","contentLength":1726,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Show HN: DeepSeek My User Agent","url":"https://www.jasonthorsness.com/20","date":1737929019,"author":"jasonthorsness","guid":181,"unread":true,"content":"<p><a href=\"https://github.com/deepseek-ai/DeepSeek-R1\">DeepSeek R1</a> is a new model and service that exposes\nchain-of-thought to the user. You can use it live for free at\n<a href=\"https://chat.deepseek.com/\">chat.deepseek.com</a>, or via an API at\n<a href=\"https://platform.deepseek.com/\">platform.deepseek.com</a> that is currently significantly less\nexpensive than OpenAI o1. OR, simply click  to see what the model thinks about your user\nagent, browser capabilities, and IP location headers. If you dare.</p>","contentLength":364,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42834648"},{"title":"Learning Rust is like running a marathon — you need cardio!","url":"https://www.reddit.com/r/rust/comments/1iaqh5i/learning_rust_is_like_running_a_marathon_you_need/","date":1737925763,"author":"/u/orionwambert","guid":584,"unread":true,"content":"<p>I’ve started learning Rust, and I have to admit, it’s a serious challenge! After years of coding in more \"conventional\" languages (started with Java 7, then moved to JS/TS, Python, Dart…), I thought I was ready for anything. But Rust? It’s a whole different ball game! </p><p>Between memory management, the heap, the stack, borrowing, ownership, and all these concepts that feel out of the ordinary, I’m feeling a bit overwhelmed. This is my second attempt to dive into it seriously, and I have to say, it’s not as \"friendly\" as what I’m used to.</p><p>Do any seasoned Rustaceans have tips to help me keep my head above water? Any resources, tricks, or even personal experiences to help me tame this beast?</p><p>I’m determined to crack the Rust code, but a little boost would be much appreciated! </p>","contentLength":793,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Best Way to Collect Traces for Tempo","url":"https://www.reddit.com/r/kubernetes/comments/1iaq420/best_way_to_collect_traces_for_tempo/","date":1737924977,"author":"/u/Sule2626","guid":567,"unread":true,"content":"<p>I'm currently using Prometheus, Grafana, and Loki in my stack, and I'm planning to integrate Tempo for distributed tracing. However, I'm still exploring the best way to collect traces efficiently.</p><p>I've looked into Jaeger and OpenTelemetry:</p><ul><li> seems to require a relatively large infrastructure, which feels like overkill for my use case.</li><li> looks promising, but it overlaps with some functionality I already have covered by Prometheus (metrics) and Loki (logs).</li></ul><p>Does anyone have recommendations or insights on the most efficient way to implement tracing with Tempo? I'm particularly interested in keeping the setup lightweight and complementary to my existing stack.</p>","contentLength":658,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Amsterdam Compiler Kit for Cray X-MP","url":"https://github.com/kej715/ack","date":1737922658,"author":"basementcat","guid":191,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42833638"},{"title":"DeepSeek R1 API First Look: How This Open-Source Model Outperforms OpenAI","url":"https://www.kaishira.com/2025/01/26/deepseek-r1-api-first-look-how-this-open-source-model-outperforms-openai/","date":1737922386,"author":"/u/haberveriyo","guid":579,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1iaoyh2/deepseek_r1_api_first_look_how_this_opensource/"},{"title":"Created my first Tauri app - Timely","url":"https://www.reddit.com/r/rust/comments/1iaoe9l/created_my_first_tauri_app_timely/","date":1737921114,"author":"/u/th3oth3rjak3","guid":581,"unread":true,"content":"<p>Hello my fellow Rust enjoyers, after about 3 months of work I just finished my first project called Timely using Tauri and React. It's a task tracking application with built-in time tracking, comments, tagging, and much, much more. Just wanted to post on here in case anyone has a personal use for it. If you find the application useful or interesting, please leave a star on GitHub.</p><p>Edit: Just wanted to again say thanks to everyone for their support. Your positive comments gave me the much needed energy to get a GitHub action going to build the application for a bunch of the major platforms including targeting an older version of Ubuntu (22.04) in order to reach a wider audience. This community is amazing, thanks for all your hard work.</p>","contentLength":743,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Has the behaviour of maxUnavailable and maxSurge for RollingUpdates changed since v1.21.9","url":"https://www.reddit.com/r/kubernetes/comments/1iam71l/has_the_behaviour_of_maxunavailable_and_maxsurge/","date":1737916265,"author":"/u/mrnadaara","guid":566,"unread":true,"content":"<p>We've deployed a new cluster with v1.30.7 and tried to deploy a deployment with a maxSurge of 1 and maxUnavailable with 0. The new pod remains stuck in Pending with the following reasons:</p><p>0/3 nodes are available: 3 Insufficient cpu. preemption: 0/3 nodes are available: 3 No preemption victims found for incoming pod.</p><p>Changing maxUnavailable to 1 fixes it but I'm curious as to why it fails with the new version when it worked fine in the old version. It exceeds the replica count when doing a rolling update so it makes sense the pod wouldn't be scheduled until the old one is deleted, but since we've set the maxUnavailable to 0 the old pods are never deleted. This in theory shouldn't have worked in the old version as well. Am I misconstruing things here?</p>","contentLength":757,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"[Media] Introducing: yeehaw! A TUI Framework with Batteries Included","url":"https://www.reddit.com/r/rust/comments/1ialadw/media_introducing_yeehaw_a_tui_framework_with/","date":1737914311,"author":"/u/bogz314","guid":586,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"OpenJazz is a free, open-source version of the classic Jazz Jackrabbit games","url":"https://alister.eu/jazz/oj/about.php","date":1737913211,"author":"doener","guid":190,"unread":true,"content":"OpenJazz is a free, open-source version of the classic Jazz Jackrabbit™ games.\n     OpenJazz can be compiled on a wide range of operating systems, including Windows\n     98/Me/XP and Linux.\n     To play, you will need the files from one of the original games.\n     <p>With the demise of DOS-based operating systems, it became necessary\n     to use emulators to play old DOS games.\n     Jazz Jackrabbit™ deserves more - and would benefit greatly from new features.\n     </p><p>OpenJazz was started on the 23rd of August, 2005, by </p><a href=\"https://alister.eu/\">AJ Thomson</a>.\n     Academic pressures put the project on hold until late December 2005. The\n     source code was released on the 25th, and the first version with a degree of playability\n     was released on the 15th of January. Since then, a variety of ports have been released\n     by other people.\n     <p>In 2009, a multiplayer version was released.</p>","contentLength":870,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42831927"},{"title":"How long is a second in JS? | Why Some Are Longer Than Others","url":"https://docs.timetime.in/blog/how-long-is-a-second-in-js","date":1737912975,"author":"/u/iagolast","guid":580,"unread":true,"content":"<p>When you ask the question \"How long is a second in JavaScript?\", it seems like a straightforward query. However, the answer reveals layers of complexity intertwined with history, science, and the foundations of modern computing. Let’s dive deep to understand how humanity has measured time and how it connects to JavaScript’s timekeeping.</p><h3>The Early Days of Timekeeping<a href=\"https://docs.timetime.in/blog/how-long-is-a-second-in-js#the-early-days-of-timekeeping\" aria-label=\"Direct link to The Early Days of Timekeeping\" title=\"Direct link to The Early Days of Timekeeping\">​</a></h3><p>Time measurement began with observing natural periodic phenomena. Early civilizations looked to the moon's phases and the apparent movement of the sun to divide time into manageable units. These observations gave rise to the concepts of days, months, and years.</p><p>As human needs evolved, a more granular division of time became necessary. The ancient Egyptians and Babylonians divided the day into 24 hours, likely influenced by their base-12 numbering system. Later, hours were divided into 60 minutes and minutes into 60 seconds, creating the framework we still use today.</p><p>While these early methods sufficed for centuries, they lacked precision. By the mid-20th century, advancements in technology demanded a more accurate measurement of time. The invention of the atomic clock in the 1950s marked a revolutionary step. These clocks measure time based on the vibrations of cesium atoms, offering unparalleled precision.</p><p>As a result, the definition of a second was updated to:</p><blockquote><p>\"The duration of 9,192,631,770 periods of the radiation corresponding to the transition between the two hyperfine levels of the ground state of the cesium-133 atom.\"</p></blockquote><p>This definition formed the foundation for what we now call international atomic time (TAI)</p><p><a href=\"https://en.wikipedia.org/wiki/Universal_Time\" target=\"_blank\" rel=\"noopener noreferrer\">Universal Time</a> is based on the Earth's rotation. It’s intuitive and tied to our everyday experience of day and night. However, the Earth's rotation is not perfectly consistent due to various factors such as gravitational interactions and geophysical processes. As a result, we could say that Universal Time is imprecise and variable.</p><p><a href=\"https://en.wikipedia.org/wiki/International_Atomic_Time\" target=\"_blank\" rel=\"noopener noreferrer\">Atomic Time</a>, derived from atomic clocks, is based on physical phenomena and is both precise and consistent. It serves as the backbone for modern timekeeping systems.</p><p>In the 1970s, <a href=\"https://en.wikipedia.org/wiki/Coordinated_Universal_Time\" target=\"_blank\" rel=\"noopener noreferrer\">Coordinated Universal Time (UTC</a>) was introduced to reconcile the discrepancies between Universal Time and Atomic Time. UTC aligns with Universal Time but incorporates adjustments, such as the addition or removal of leap seconds, to compensate for the Earth's irregular rotation.</p><p>Leap seconds are occasional one-second adjustments added to UTC to keep it in sync with Universal Time. These adjustments ensure that UTC remains within 0.9 seconds of Universal Time. However, they introduce complications for systems that rely on precise time calculations.</p><p>Here’s the improved article in English, incorporating the original tables:</p><h3>ECMAScript and POSIX Time<a href=\"https://docs.timetime.in/blog/how-long-is-a-second-in-js#ecmascript-and-posix-time\" aria-label=\"Direct link to ECMAScript and POSIX Time\" title=\"Direct link to ECMAScript and POSIX Time\">​</a></h3><p>This approach treats every day as having exactly  (24 hours), ignoring both leap seconds and astronomical variations in the Earth's rotation. While this simplifies calculations and suffices for most applications, it introduces limitations in scenarios where precise timekeeping is critical.</p><p>Although POSIX and UTC appear similar, . Here are the key differences:</p><ol><li><ul><li>UTC includes leap seconds to adjust official time to the Earth's rotation.</li><li>POSIX does not count leap seconds, meaning that <strong>POSIX days always have 86,400 seconds</strong>, even when UTC days have 86,401 or 86,399 seconds due to a leap second.</li></ul></li><li><p><strong>Simplified Interoperability</strong>:</p><ul><li>POSIX assumes all seconds are of equal duration. This makes calculating time differences straightforward but causes discrepancies when leap seconds occur.</li><li>For example, during a leap second (e.g., ), POSIX simply ignores the additional second, making timestamps near the leap second ambiguous or inaccurate.</li></ul></li></ol><h3>Step Adjustment: The Traditional Solution<a href=\"https://docs.timetime.in/blog/how-long-is-a-second-in-js#step-adjustment-the-traditional-solution\" aria-label=\"Direct link to Step Adjustment: The Traditional Solution\" title=\"Direct link to Step Adjustment: The Traditional Solution\">​</a></h3><p>Historically, systems that needed to account for leap seconds would use a technique called . This method can be described as just ignoring the leap second, causing the clock to jump forward or backward by one second at the exact moment of the leap second.</p><p>Lets see a table to understand this:</p><table><thead><tr></tr></thead><tbody><tr></tr><tr></tr><tr></tr><tr></tr></tbody></table><p>As you can see from the both TAI and UTC are strictly increasing, but POSIX (step) has a jump in time at the leap second. This means that 2 different UTC seconds are mapped to the same POSIX second. This can cause issues in some applications. The biggest problem is that some apps can go \"back in time\" when a leap second is added.</p><p>Lets say that a payment is requested at , and approved during the next second at . Our logs will show something like:</p><div><div><pre tabindex=\"0\"><code></code></pre></div></div><p>This is a problem because the payment was approved before it was requested. This is why most system use a different approach to handle leap seconds.</p><h3>Smearing: The Practical Solution<a href=\"https://docs.timetime.in/blog/how-long-is-a-second-in-js#smearing-the-practical-solution\" aria-label=\"Direct link to Smearing: The Practical Solution\" title=\"Direct link to Smearing: The Practical Solution\">​</a></h3><p>In many modern systems implementing POSIX time, a technique called  is used to handle leap seconds. Instead of adding or removing a whole second, the effects of the leap second are distributed gradually over a longer period (typically 24 hours). This has several implications: First of all during the smear period, <strong>seconds are slightly longer or shorter than a standard second</strong> (measured in atomic time). This ensures a smooth transition instead of an abrupt jump in time. On the other hand compared to stepping the clock is strictly increasing, which is a requirement for many applications.</p><h4>Example: Smearing and Step Adjustment Tables<a href=\"https://docs.timetime.in/blog/how-long-is-a-second-in-js#example-smearing-and-step-adjustment-tables\" aria-label=\"Direct link to Example: Smearing and Step Adjustment Tables\" title=\"Direct link to Example: Smearing and Step Adjustment Tables\">​</a></h4><table><thead><tr></tr></thead><tbody><tr></tr><tr></tr><tr></tr><tr></tr></tbody></table><p>In this table:  ignores the leap second entirely, treating  as if it doesn't exist while  gradually adjusts the clock, ensuring smoother transitions but at the cost of seconds having slightly different durations.</p><p>This is how Google's NTP servers handle leap seconds. They smear the leap second over a 24-hour period, ensuring that the clock is always strictly increasing. More information can be found <a href=\"https://developers.google.com/time/smear\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.</p><h2>Implications for Applications<a href=\"https://docs.timetime.in/blog/how-long-is-a-second-in-js#implications-for-applications\" aria-label=\"Direct link to Implications for Applications\" title=\"Direct link to Implications for Applications\">​</a></h2><h3>Why It Usually Doesn’t Matter<a href=\"https://docs.timetime.in/blog/how-long-is-a-second-in-js#why-it-usually-doesnt-matter\" aria-label=\"Direct link to Why It Usually Doesn’t Matter\" title=\"Direct link to Why It Usually Doesn’t Matter\">​</a></h3><p>For tasks like scheduling events, calculating ages, or displaying time in user-facing applications, JavaScript (and POSIX) time is precise enough and 99% of the problem will be derived from timezones.</p><p>For applications requiring high precision, such as those in scientific research or financial systems, the discrepancies caused by leap seconds and smearing can lead to significant errors. Accurate timekeeping is crucial to ensure the reliability and accuracy of measurements and transactions. During a leap second, a single POSIX timestamp can refer to two different moments in UTC, creating ambiguities and potential errors in systems that demand precise time synchronization.</p>","contentLength":6446,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1iakow2/how_long_is_a_second_in_js_why_some_are_longer/"},{"title":"New Michigan Law Requires High Schools to Offer CS Classes","url":"https://news.slashdot.org/story/25/01/26/1547204/new-michigan-law-requires-high-schools-to-offer-cs-classes?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1737912840,"author":"EditorDavid","guid":229,"unread":true,"content":"The state of Michigan will now require each public high school in the state to offer at least one computer science course to its students. \"This bill aligns Michigan with a majority of the country,\" according to the state's announcement, which says the bill \"advances technological literacy\" and ensures their students \"are well-equipped with the critical thinking skills necessary for success in the workforce.\" \nSlashdot reader theodp writes:\n\n\n\nFrom the Michigan House Fiscal Agency Analysis: \"Supporters of the bill say that increasing access to computer science courses for students in schools should be a priority of the state in order to ensure that students can compete for the types of jobs that have good pay and will be needed in the coming decades.\" \nThat analysis goes on to report that testifying in favor of the bill were tech-giant backed nonprofit Code.org (Microsoft is a $30 million Code.org donor), Amazon and AWS (Amazon is a $30+ million Code.org donor), the tech-supported Computer Science Teachers Association (CSTA), and the lobbying organization TechNet, whose members include Amazon, Apple, Google, Meta, and OpenAI). \nIt's not clear how many high schools in Michigan are already teaching CS courses, but this still raises a popular question for discussion. Should high schools be required to teach at least one CS course?","contentLength":1349,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Improve Rust Compile Time by 108X","url":"https://burn.dev/blog/improve-rust-compile-time-by-108x","date":1737912528,"author":"/u/Handsome_AndGentle","guid":578,"unread":true,"content":"<p>\nBefore you get too excited, the techniques used to reduce compilation\n          time are not applicable to all Rust projects. However, I expect the\n          learnings to be useful for any Rust developer who wants to improve\n          their project's compilation time. Now that this is clarified, let's\n          dive into the results.\n</p><p>\nWe started with a compilation time of 108 seconds for the matmul\n          benchmarks, which was reduced to only 1 second after all the\n          optimizations. The most effective optimization was the element-type\n          generics swap, where we instantiated generic functions with predefined\n          \"faked\" element types to reduce the amount of LLVM code generated. The second optimization also had a major impact, further\n          reducing the compilation time by nearly 3×. This was achieved by using\n          our comptime system instead of associated const generics to represent the\n          matmul instruction sizes. Finally, the last optimization—also the simplest—was\n          to reduce the LLVM optimization level to zero, which is particularly useful\n          for debug builds, such as tests.\n</p><div><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"720pt\" height=\"432pt\" viewBox=\"0 0 720 432\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"></svg></div><div><p>\nCompilation times are measured using incremental compilation.\n</p></div><p>\nFirst, let me explain the situation that led me to investigate our\n          compile time. During the last iteration of CubeCL, we refactored our matrix multiplication GPU kernel to work with\n          many different configurations and element types. CubeCL is a dialect\n          that lets you program GPUs for high-performance computing applications\n          directly in Rust. The project supports multiple compiler backends,\n          namely WebGPU, CUDA, ROCm, and Vulkan with more to come.\n</p><p>\nThe refactoring of the matrix multiplication kernel was done to\n          improve tensor cores utilization across many different precisions. In\n          fact, each kernel instance works across 3 different element types: the\n          global memory element type, the staging element type, and the\n          accumulation element type. These are all different since we normally\n          want to accumulate in a higher precision element type, as this is\n          where numerical approximation is most sensitive. Also, the tensor\n          cores don't work across all input precisions; if you have f32 inputs,\n          you need to convert those to tf32 element types (staging) to call the\n          tensor cores instructions. To add to the complexity, tensor cores\n          instructions only work across fixed matrix shapes that also depend on\n          the precisions. For instance, f16 staging matrices work across all\n          shapes from (32, 8, 16), (16, 16, 16), (8, 32, 16). But tf32 only\n          works on (16, 16, 8).\n</p><p>\nIn our first refactoring, we represented the shape of the matrices\n          supported by the instructions using const associated types, since this\n          is the abstraction component that makes the most sense in this case.\n          For the element types, we naturally used generic arguments for traits\n          and functions - pretty much what any developer would do in this\n          scenario. However, with all the possible combinations, we ended up\n          with a compilation time of 1m48s using the cache.\n</p><p>\nYes, you read that right: 1m48s just to rebuild the matmul benchmark\n          if we change anything in the bench file.\n</p><p>\nFor the purpose of this optimization, we only consider incremental\n          compilation using cargo caching, since this is the most important one\n          to speed up dev iteration time. Changing one configuration to test if\n          an optimization worked took almost 2 minutes just to create the binary\n          to execute a few matmuls.\n</p><p>\nWell, we need to understand that the Rust compiler is actually very\n          fast. The slow parts are the linking and LLVM. The best way to improve\n          compilation time is to reduce the amount of LLVM IR generated.\n</p><p>\nIn our specific case, each combination of the matmul would generate a\n          whole new function - this is what zero-cost abstraction means. There\n          is no dynamic dispatch; every type change duplicates the code to\n          improve performance at the cost of a bigger binary. Before all of our\n          optimizations, the binary generated was 29M, and after we reduced it\n          to 2.5M - a huge difference.\n</p><p>\nTo reduce the amount of code generated, we had to use different Rust\n          techniques to make our abstractions for the matmul components. In our\n          case, we don't need zero-cost abstractions, since the code written in\n          Rust for the matmul components actually generates the code that is\n          used to compile at runtime a kernel that will be executed on the GPU.\n          Only the GPU code needs to be fast; the JIT Rust code takes almost no\n          time during runtime. Zero-cost abstraction would actually be optimal\n          in a setting where we would perform ahead-of-time compilation of\n          kernels.\n</p><p>\nEver wonder why LibTorch or\n          cuBLAS have executables that are\n          GIGABYTES in size? Well, it's because all kernels for all precisions with\n          all edge cases must be compiled to speed up runtime execution. This is\n          necessary in a compute-heavy workload like deep learning.\n</p><p>\nHowever, CubeCL is different - it performs JIT compilation, therefore\n          we don't need to compile all possible variations ahead of time before\n          creating the binary: we can use dynamic abstractions instead! This is\n          one of the two optimizations that we made for the matmul components.\n          Instead of relying on const associated types, we leveraged the\n          comptime system to dynamically have access to the instruction sizes\n          during the compilation of a kernel at runtime. This is actually the\n          second optimization that we made and helped us go from 14s compilation\n          time to around 5s.\n</p><p>\nHowever, the biggest optimization was quite hard to pull off and is\n          linked to the generic element types passed in each function. We still\n          wanted to use zero-cost abstraction in this case, since passing around\n          an enum listing what element type operations are on would be terrible\n          in terms of developer experience. However, the hint to improve our\n          compilation time was that when you write a function that will execute\n          on the GPU, we have an attribute on top .\n</p><p>\nWe want the code to look and feel like normal Rust, but the macro\n          actually parses the Rust code written and generates another function,\n          which we normally call the expand function, where the actual GPU IR is\n          built for the function. That code will actually run during runtime,\n          not the code that the user is writing. The element types generics are\n          only used to convert the generic element type into the enum IR element\n          type. In the expand functions, we also pass a context where all IR is\n          tracked.\n</p><p>\nSo the optimization was to pass a fake generic element type, called  instead of the actual element type like . When\n          compiling a kernel, we first register the real element type in the\n          context, using the const generic item to differentiate multiple\n          element types if a function has multiple generic element types. Since\n          we always call the expand function with the exact same generic items\n          for all element types, we only generate one instance of that function,\n          and the element types are fetched at runtime using the context.\n</p><p>\nThe most tedious part was actually implementing that optimization\n          while trying not to break our components. The biggest problem caused\n          by that optimization is that we can't support generic dependencies\n          between traits over the element type in launch functions of CubeCL.\n</p><div><pre tabindex=\"0\" data-language=\"rust\"><code></code></pre></div><p>\nIt makes sense though - we don't want to recompile all the instruction\n          types for all different precisions. Since our optimization is\n          activated at the boundaries of CPU code and GPU code, where cube\n          functions are identified as launchable, we need the generic trait to\n          not have a dependency on the element type. They are going to be\n          switched by our macro. We use generic associated types instead of\n          traits with generic element types.\n</p><p>\nThis is known as the family pattern, where a trait is describing a family of types.\n</p><div><pre tabindex=\"0\" data-language=\"rust\"><code></code></pre></div><p>\nUsing this pattern, we can inject the family type at the boundaries of\n          CPU and GPU code and instantiate the inner instruction type with the\n          expand element type.\n</p><div><pre tabindex=\"0\" data-language=\"rust\"><code></code></pre></div><p>\nMigrating most of the components to the new pattern, we reduced\n          compile time from 1m48s to about 14s.\n</p><p>\nIt was a lot of work, and I don't expect all projects to face cases\n          like this, but it was worth it! Now waiting for about 5 seconds after\n          trying something in the code to see if performance is improved doesn't\n          break the flow, but almost 2 minutes did.\n</p><p>\nWe essentially leveraged the fact that CubeCL is a JIT compiler and\n          not an AOT compiler, which is very appropriate for throughput-focused\n          high-performance applications.\n</p><h2>Playing with LLVM optimization settings</h2><p>\nSince our benchmarks are compiled with optimization level set to 3, we\n          could still improve the compilation time further to about 1s by\n          reducing the optimization level to zero. Another 5X speedup that we\n          can have by simply adjusting the LLVM optimization level.\n</p><p>\nWe decided not to keep that optimization in production, since we want\n          the benchmarks to have the same LLVM optimization level as user\n          applications. However, we activated it for testing, since we often\n          rerun tests to ensure we don't break correctness when implementing or\n          optimizing kernels.\n</p><h2>Not a Rust Compiler Issue</h2><p>\nAll of our optimizations actually created tons of code - we used proc\n          macros, associated type generics, const generics, and tons of complex\n          features from the Rust type system.\n</p><p>\nThe Rust compiler is actually very fast; the slow part is really the\n          linking and optimizing of the LLVM IR. If there's one thing to take\n          from this post, it's that you shouldn't worry about using complex\n          features of Rust, but make sure you don't generate huge binaries.\n          Reducing the binary size will improve compile time even if you use\n          complex methods to do so! \"Less code compiles faster\" is not exactly\n          right. \"Less generated code compiles faster\" is what we have to keep\n          in mind!\n</p>","contentLength":10722,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1iakht9/improve_rust_compile_time_by_108x/"},{"title":"Qwen2.5-1M: Deploy your own Qwen with context length up to 1M tokens","url":"https://qwenlm.github.io/blog/qwen2.5-1m/","date":1737912255,"author":"meetpateltech","guid":189,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42831769"},{"title":"Hard numbers in the Wayland vs. X11 input latency discussion","url":"https://mort.coffee/home/wayland-input-latency/","date":1737910672,"author":"todsacerdoti","guid":188,"unread":true,"content":"<p>Yesterday, I read this blog post:\n<a href=\"https://gist.github.com/generic-internet-user/e8eec46ce159571032115f6fb064523c\">Wayland Cursor Lag: Just give me a break already...</a>,\nwhere a Linux user discusses their frustration with input latency under Wayland.\nThey detailed their own subjective experience of the problem,\nbut failed to produce hard evidence.</p><p>Even though I'm a very happy user of wayland overall,\nI share the blog post's author's subjective impression that there's more\ncursor lag under Wayland than under X11.\nIn my opinion, their experiment was limited by their phone camera's 90 FPS,\nwhich really doesn't feel like it's enough to get conclusive numbers\nwhen we're talking about differences which are probably on the order of\nsingle screen refresh cycles.</p><p>So I thought: hey, I have a phone with a 240 FPS camera mode,\nI bet that's enough to get some conclusive results!</p><p>I simply pointed my phone's camera at the screen and desk using my left hand,\nmade sure to get the mouse cursor, the mouse and my right hand in frame,\nand recorded myself repeatedly flicking the mouse with my finger.\nI recorded myself flicking it 16 times under Wayland,\nlogged out of the GNOME Wayland session and into a GNOME X11 session,\nthen did the same there.</p><p>I then converted the two resulting video files into a series of JPEGs\nusing ffmpeg (<code>ffmpeg -i &lt;input file&gt; %04d.jpg</code>),\nand counted from the first frame where I could see the mouse move\nuntil the first frame where I could clearly see that the cursor had moved.</p><p>I elected to include the start and end frame;\nso if I saw the mouse move in frame 1045,\nthen I saw the cursor move in frame 1047,\nI would count that as 3 frames.</p><p>Here's an example which depicts a latency of 3 frames (requires JavaScript):</p><div><div><blockquote><p>Here's a frame from before the mouse has begun moving.</p></blockquote></div><div><blockquote><p>The mouse still hasn't moved.</p></blockquote></div><div><blockquote><p>Here, the mouse has just about started moving,\nso I consider this \"frame 1\".\nThe cursor hasn't moved yet.</p></blockquote></div><div><blockquote><p>The mouse moves a bit further, but the cursor still hasn't moved.\nThis is \"frame 2\".</p></blockquote></div><div><blockquote><p>This is the frame where the cursor starts moving.\nThis is \"frame 3\", so I would note down this sequence\nas taking 3 frames.</p></blockquote></div></div><ul><li>Distro: Fedora Workstation 41</li><li>GPU: AMD Radeon RX 7900XT</li><li>Monitor: Gigabyte M32U (4k IPS @ 144.99, no DPI scaling)</li><li>Mouse: Logitech G502 Lightspeed</li><li>Camera: iPhone 15 Pro, slo-mo 240 FPS</li></ul><p>The main limitations of this experiment are:</p><ul><li>240 FPS still isn't  much. With my 144Hz screen, I have less than\ntwo camera frames per screen refresh. This introduces some random variance.</li><li>Pixels don't switch instantly, so there are ambiguous frames where the cursor\nis  starting to become visible in its new location.\nI decided to count the cursor as \"having moved\" when there is a clearly visible\ncursor in a new location on the screen, even if the pixels haven't fully lit up.</li><li>For some reason, the video recording from my phone contains some duplicate frames.\nI don't know why this happens. I decided to interpret these duplicate frames\nas a representation of a frame's worth of time passing, so I counted them as normal.</li></ul><p>All these factors introduce some uncertainty in the results.\nHowever, they  affect Wayland and X11 equally, so with enough data,\nit should all even out.</p><p> Another caveat I should clearly point out is that there are\nmany other Wayland compositors out there than GNOME's, and I have not tested them.\nFor that matter, there are other GPU drivers out there than AMD's.\nOther compositors and other GPU drivers may show different results.</p><p>Here's the data I captured:</p><p>Wayland, on average, has roughly 6.5ms more cursor latency than X11 on my system.\nI don't have the statistics expertise necessary to properly analyze\nwhether this difference is statistically significant or not,\nbut to my untrained eye, it looks like there's a clear and consistent difference.</p><p>Interestingly, the difference is very close to 1 full screen refresh.\nI don't know whether or not that's a coincidence.</p><p>Here are the numbers in chart form:</p><p>In my mind, these results are conclusive proof that there  a difference\nin input latency between X11 and Wayland, at least with my hardware,\nand that the difference is large enough that it's plausible for some people to notice.</p><p>Further testing on more varied hardware and refresh rates is necessary\nto get a clear picture of how wide-spread the problem is and how large it is.\nIt's likely that the magnitude of the difference varies based on factors\nsuch as which compositor is used and what the refresh rate of the screen is.</p><p>I probably won't undertake that further testing,\nbecause this is all very time intensive work.\nMy goal was only to see if I could conclusively measure  difference.</p><p> I want to add a note here about what this testing does  show.\nIt does not show that there's higher input latency \nin Wayland compared to X11 in a way which affects, for example, games.\nIt is possible that this added latency is entirely cursor-specific\nand that Wayland and X11 exhibit the exact same input latency\nin graphical applications and games.\nIt is my understanding that the cursor is handled very differently from\nnormal graphical applications.\nFurther testing would be necessary to show whether Wayland has more input latency\n than X11.</p>","contentLength":5083,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42831509"},{"title":"Hard numbers in the Wayland vs X11 input latency discussion","url":"https://mort.coffee/home/wayland-input-latency/","date":1737909856,"author":"/u/mort96","guid":572,"unread":true,"content":"<p>Yesterday, I read this blog post:\n<a href=\"https://gist.github.com/generic-internet-user/e8eec46ce159571032115f6fb064523c\">Wayland Cursor Lag: Just give me a break already...</a>,\nwhere a Linux user discusses their frustration with input latency under Wayland.\nThey detailed their own subjective experience of the problem,\nbut failed to produce hard evidence.</p><p>Even though I'm a very happy user of wayland overall,\nI share the blog post's author's subjective impression that there's more\ncursor lag under Wayland than under X11.\nIn my opinion, their experiment was limited by their phone camera's 90 FPS,\nwhich really doesn't feel like it's enough to get conclusive numbers\nwhen we're talking about differences which are probably on the order of\nsingle screen refresh cycles.</p><p>So I thought: hey, I have a phone with a 240 FPS camera mode,\nI bet that's enough to get some conclusive results!</p><p>I simply pointed my phone's camera at the screen and desk using my left hand,\nmade sure to get the mouse cursor, the mouse and my right hand in frame,\nand recorded myself repeatedly flicking the mouse with my finger.\nI recorded myself flicking it 16 times under Wayland,\nlogged out of the GNOME Wayland session and into a GNOME X11 session,\nthen did the same there.</p><p>I then converted the two resulting video files into a series of JPEGs\nusing ffmpeg (<code>ffmpeg -i &lt;input file&gt; %04d.jpg</code>),\nand counted from the first frame where I could see the mouse move\nuntil the first frame where I could clearly see that the cursor had moved.</p><p>I elected to include the start and end frame;\nso if I saw the mouse move in frame 1045,\nthen I saw the cursor move in frame 1047,\nI would count that as 3 frames.</p><p>Here's an example which depicts a latency of 3 frames (requires JavaScript):</p><div><div><blockquote><p>Here's a frame from before the mouse has begun moving.</p></blockquote></div><div><blockquote><p>The mouse still hasn't moved.</p></blockquote></div><div><blockquote><p>Here, the mouse has just about started moving,\nso I consider this \"frame 1\".\nThe cursor hasn't moved yet.</p></blockquote></div><div><blockquote><p>The mouse moves a bit further, but the cursor still hasn't moved.\nThis is \"frame 2\".</p></blockquote></div><div><blockquote><p>This is the frame where the cursor starts moving.\nThis is \"frame 3\", so I would note down this sequence\nas taking 3 frames.</p></blockquote></div></div><ul><li>Distro: Fedora Workstation 41</li><li>GPU: AMD Radeon RX 7900XT</li><li>Monitor: Gigabyte M32U (4k IPS @ 144.99, no DPI scaling)</li><li>Mouse: Logitech G502 Lightspeed</li><li>Camera: iPhone 15 Pro, slo-mo 240 FPS</li></ul><p>The main limitations of this experiment are:</p><ul><li>240 FPS still isn't  much. With my 144Hz screen, I have less than\ntwo camera frames per screen refresh. This introduces some random variance.</li><li>Pixels don't switch instantly, so there are ambiguous frames where the cursor\nis  starting to become visible in its new location.\nI decided to count the cursor as \"having moved\" when there is a clearly visible\ncursor in a new location on the screen, even if the pixels haven't fully lit up.</li><li>For some reason, the video recording from my phone contains some duplicate frames.\nI don't know why this happens. I decided to interpret these duplicate frames\nas a representation of a frame's worth of time passing, so I counted them as normal.</li></ul><p>All these factors introduce some uncertainty in the results.\nHowever, they  affect Wayland and X11 equally, so with enough data,\nit should all even out.</p><p> Another caveat I should clearly point out is that there are\nmany other Wayland compositors out there than GNOME's, and I have not tested them.\nFor that matter, there are other GPU drivers out there than AMD's.\nOther compositors and other GPU drivers may show different results.</p><p>Here's the data I captured:</p><p>Wayland, on average, has roughly 6.5ms more cursor latency than X11 on my system.\nI don't have the statistics expertise necessary to properly analyze\nwhether this difference is statistically significant or not,\nbut to my untrained eye, it looks like there's a clear and consistent difference.</p><p>Interestingly, the difference is very close to 1 full screen refresh.\nI don't know whether or not that's a coincidence.</p><p>Here are the numbers in chart form:</p><p>In my mind, these results are conclusive proof that there  a difference\nin input latency between X11 and Wayland, at least with my hardware,\nand that the difference is large enough that it's plausible for some people to notice.</p><p>Further testing on more varied hardware and refresh rates is necessary\nto get a clear picture of how wide-spread the problem is and how large it is.\nIt's likely that the magnitude of the difference varies based on factors\nsuch as which compositor is used and what the refresh rate of the screen is.</p><p>I probably won't undertake that further testing,\nbecause this is all very time intensive work.\nMy goal was only to see if I could conclusively measure  difference.</p><p> I want to add a note here about what this testing does  show.\nIt does not show that there's higher input latency \nin Wayland compared to X11 in a way which affects, for example, games.\nIt is possible that this added latency is entirely cursor-specific\nand that Wayland and X11 exhibit the exact same input latency\nin graphical applications and games.\nIt is my understanding that the cursor is handled very differently from\nnormal graphical applications.\nFurther testing would be necessary to show whether Wayland has more input latency\n than X11.</p>","contentLength":5083,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/linux/comments/1iajb1o/hard_numbers_in_the_wayland_vs_x11_input_latency/"},{"title":"Linux 6.14 Brings Some Systems Faster Suspend and Resume","url":"https://linux.slashdot.org/story/25/01/25/2343225/linux-614-brings-some-systems-faster-suspend-and-resume?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1737909240,"author":"EditorDavid","guid":228,"unread":true,"content":"Amid the ongoing Linux 6.14 kernel development cycle, Phoronix spotted a pull request for ACPI updates which \"will allow for faster suspend and resume cycles on some systems.\" \n\nWikipedia defines ACPI as \"an open standard that operating systems can use to discover and configure computer hardware components\" for things like power management and putting unused hardware components to sleep. Phoronix reports:\n\nThe ACPI change worth highlighting for Linux 6.14 is switching from msleep() to usleep_range() within the acpi_os_sleep() call in the kernel. This reduces spurious sleep time due to timer inaccuracy. Linux ACPI/PM maintainer Rafael Wysocki of Intel who authored this change noted that it could \"spectacularly\" reduce the duration of system suspend and resume transitions on some systems... \n\nRafael explained in the patch making the sleep change: \n\n \"The extra delay added by msleep() to the sleep time value passed to it can be significant, roughly between 1.5 ns on systems with HZ = 1000 and as much as 15 ms on systems with HZ = 100, which is hardly acceptable, at least for small sleep time values.\" \nOne 2022 bug report complained a Dell XPS 13 using Thunderbolt took \"a full 8 seconds to suspend and a full 8 seconds to resume even though no physical devices are connected.\" In November an Intel engineer posted on the kernel mailing list that the fix gave a Dell XPS 13 a 42% improvement in kernel resume time (from 1943ms to 1127ms).","contentLength":1452,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"The Microsoft 365 Copilot launch was a disaster","url":"https://www.zdnet.com/home-and-office/work-life/the-microsoft-365-copilot-launch-was-a-total-disaster/","date":1737909231,"author":"belter","guid":223,"unread":true,"content":"<p>You'd think that Microsoft's marketing team would have learned something after last year's shambolic rollout of the <a href=\"https://www.zdnet.com/article/microsoft-delays-its-troubled-ai-powered-recall-feature-yet-again/\">Recall feature</a>. Maybe, before trying another rollout, they might talk to a few customers, do some focus groups, even ask a few members of the press and analyst community for their advice.</p><p>Shortly after the New Year, someone in Redmond pushed a button that <a href=\"https://www.zdnet.com/article/its-official-all-your-office-apps-are-getting-ai-and-a-price-increase/\">raised the price</a> of its popular (84 million paid subscribers worldwide!) Microsoft 365 product. You know, the one that used to be called Microsoft Office? Yeah, well, now the app is called Microsoft 365 Copilot, and you're going to be paying at least 30% more for that subscription starting with your next bill.</p><figure><figcaption><div><div><p>Microsoft 365 gets a new logo, a new name, and a higher price.</p></div></div></figcaption></figure><p>As far as I can tell, the response from customers has been overwhelmingly negative. I monitor Microsoft-focused online forums obsessively, and I read hundreds of complaints without seeing a single compliment. Seriously, the reaction to this rollout was an Excel #DIV/0 error.</p><p>What went wrong? Where do I begin?</p><h2>They botched the price increase</h2><p>Let me bend over backward to Microsoft here. They launched Office 365 (which later became Microsoft 365) more than a dozen years ago, and in that time they have not raised the price once. In case you haven't noticed, we are living through some inflationary times right now.</p><p>So, there was plenty of room for Microsoft to roll out a gentle price increase. \"Hey y'all, we know this isn't welcome news but we need to bump up the Microsoft 365 subscription price by two bucks a month. It's still a great deal!\"</p><p>Netflix does that every year or two and no one shows up at Netflix HQ with pitchforks and torches.</p><h2>No one wants to pay for AI</h2><p>There's a ton of potential in AI, and it has some solid use cases today, for tasks like <a href=\"https://www.zdnet.com/article/how-to-use-chatgpt-to-write-code-what-it-does-well-and-what-it-doesnt/\">writing code</a> and finding patterns in large databases.</p><p>But in the places where Microsoft 365 Family and Personal subscribers are likely to see AI, the edges are still very, very rough. If you ask Copilot in Word to write something for you, the results will be about what you'd expect from an enthusiastic summer intern. You might fare better if you ask Copilot to turn a folder full of photos into a PowerPoint presentation. But is that task really such a challenge?</p><p>To top that off, there are similarly rough edges in the way the Copilot features are implemented. For example, I have both work and family subscriptions to Microsoft 365. This combination normally works very well; I can sign in with one account, attach resources like OneDrive from both accounts, and work with almost no friction.</p><p>But good luck doing the same with Copilot features. In that configuration, I consistently get error messages telling me, \"As a Microsoft 365 Personal or Family subscriber, you'll be able to use Copilot when you're signed with your Microsoft work or school account (<a href=\"https://www.zdnet.com/article/microsoft-launches-entra-a-new-identity-and-access-family-of-products/\">Entra ID</a>) and Microsoft personal account. However, that ability is not yet available.\"</p><figure><figcaption><div><div><p>If you pay for a personal and work subscription to Microsoft 365, you'll pay the higher price but won't get the new features.</p></div></div></figcaption></figure><p>Let me see if I understand this: I'm paying Microsoft for not one but two subscriptions, and they raised the price of one of those subscriptions while not allowing me to use its signature feature. That seems like a lousy way to reward your best customers.</p><h2>The announcement was bungled, too</h2><p>I pay annually for my Microsoft 365 Family subscription. The price went up more than a week ago, but I haven't received an email telling me about it. As the account manager, I should see that notice before I see the new price in my dashboard.</p><p>Instead, I learned about the new price thanks to a pop-up message on my Android phone.</p><figure><figcaption><div><div><p>This po-up on my phone is the only notice I've received about a price change.&nbsp;</p></div></div></figcaption></figure><p>That notice tells me I have a monthly plan. No, I have an annual plan that will renew in a month or two. It says I can cancel billing in my Play Store settings. No, I can't. I bought this subscription using the web browser on my Windows PC, and when I tap the Subscriptions button in the Android app it opens a web browser and takes me to my Microsoft account page, where I have to tap the Manage button to find the cancel option.</p><p>Oh, and I've lost count of the number of people who were baffled and angry that Microsoft had forcibly installed the Copilot app on their devices. It was just a rebranding of the old Microsoft 365 app with the new name and logo, but in my case it was days later before I received yet another pop-up message telling me about the change.</p><h2>Well, surely you can just turn it off. Right?</h2><p>The smartest thing Microsoft could have done was to make this initial release of Copilot an opt-in feature for a few months. They could have said, \"We're excited to let everyone try this! Just click OK here!\"</p><p>Instead, they turned the feature on for everyone and gave Word users a well-hidden checkbox that reads Enable Copilot. The feature is on by default, so you have to clear the checkbox to make it go away.</p><p>As for the other Office apps? \"Uh, we'll get around to giving you a button to turn it off next month. Maybe.\"</p><p>Seriously, the&nbsp;<a href=\"https://support.microsoft.com/en-us/office/how-to-turn-off-copilot-in-microsoft-365-family-and-personal-subscriptions-bc7e530b-152d-4123-8e78-edc06f8b85f1\" target=\"_blank\" rel=\"noopener nofollow\">support page that explains where you can find that box in Word</a>&nbsp;says, \"We're working on adding the Enable Copilot checkbox to Excel, OneNote, and PowerPoint on Windows devices and to Excel and PowerPoint on Mac devices. That is tentatively scheduled to happen in February 2025.\" Until the Enable Copilot button is available, you can't disable Copilot.</p><p>Meanwhile, maybe think twice about using the option to disable all of the connected features in your Office apps. As&nbsp;<a href=\"https://laurenhough.substack.com/p/there-are-some-swear-words-in-this\" target=\"_blank\" rel=\"noopener nofollow\">one writer pointed out</a>&nbsp;(with multiple swear words and some threats aimed in the general direction of One Microsoft Way), doing so can have unintended consequences, like making it appear as though all your files in OneDrive have suddenly disappeared.</p><h2>How long will the Classic option last?</h2><p>If you try to cancel Microsoft 365 to avoid the price increase (or just to say no to the AI features), Microsoft's subscription  management page offers the option to downgrade to a Classic plan, which turns out to be exactly what you signed up for not that long ago, minus the price increase.</p><p>That's purely a retention play, of course. New subscribers can't sign up for this plan, and I expect that it will be discontinued in a year or two.&nbsp;</p><h2>Why is Microsoft doing this?</h2><p>I have yet to see a single person praising the implementation of Copilot in Microsoft 365 or telling Satya Nadella they've gotten their money's worth out of this unexpected upgrade.</p><p>So, why do it at all? I can think of 3 billion reasons. I could plug the numbers into Excel and tell you about it, but let's have Copilot explain instead.</p><figure><figcaption><div><div><p>Microsoft Copilot understands how the subscription business model works.</p></div></div></figcaption></figure><p>Microsoft is halfway through its 2026 fiscal year. It's almost like someone was given instructions at the end of the calendar year to bump up that revenue line for the Office Consumer division.</p><p>Here's the funny thing: The price increase is so big that there will still be a huge positive impact even if 10% of Microsoft 365 Personal and Family customers cancel rather than pay the extra monthly fee. Copilot walked me through the math and concluded, \"So, even with 10% of your customers canceling their subscriptions, you would still generate an additional $1.714 billion annually due to the price hike. How do you feel about this adjustment?\"</p><p>I feel like I understand why all those complaints are going to go unheard.</p>","contentLength":7459,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42831281"},{"title":"It's not a crime if we do it with an app","url":"https://pluralistic.net/2025/01/25/potatotrac/#carbo-loading","date":1737905093,"author":"keepit","guid":222,"unread":true,"content":"<p>The core regulatory proposition of the tech industry is \"it's not a crime if we do it with an app.\" It's not an unlicensed taxi if we do it with an app. It's not an illegal hotel room if we do it with an app. It's not an unregistered security if we do it with an app. It's not wage theft if we do it with an app.</p><p>Inflation is one of the most politically salient factors of this decade, and so much of inflation can be attributed to a crime, done with an app, with impunity for the criminals. The entire food supply has been sewn up by cartels of 2-5 giant companies, and they colluded to raise prices, and bragged about it, and got away with it, because neoclassical economists insist that it's impossible for this kind of price fixing to occur in an \"efficient market.\"</p><p>Some of these cartels are well-known, like the Coke/Pepsi duopoly. Pepsi's bosses boasted to their shareholders about \"Pepsi pricing power,\" and how they were able to raise prices over the inflationary increases caused by covid and the Russian invasion of Ukraine:</p><p>You might know that pretty much every packaged good in your grocery store is made by one of two companies, Unilever and Procter and Gamble. Both CEOs boasted to their investors about their above-inflation price increases:</p><p>But other cartels are harder to spot. It may seem like your grocer's eggs department is filled with many different companies' products. In reality, a single company, Cal-Maine Foods, owns practically every brand of eggs in the case: Farmhouse Eggs, Sunups, Sunny Meadow, Egg-Land’s Best and Land O’ Lakes. They made record profits after the pandemic and through bird flu, a fact that CFO Max Bowman attributed to \"significantly higher selling prices\" and \"our ability to adapt to inflationary market pressures\":</p><p>But Cal-Maine is comparatively transparent. The other food cartels – especially those that serve the restaurant sector – are harder to spot. In , Katya Schwenk describes how four companies – Lamb Weston, JR Simplot, McCain Foods and Cavendish Farms – have captured the frozen potato market and all that comes with it (fries, tater tots, etc):</p><p>These companies have been hiking prices for years, but  started to turn the screws during the post-covid inflationary period. One of Schwenk's sources is Josh Saltzman, owner of the DC sports bar Ivy and Coney. Ten years ago, Saltzman charged $3 for fries; now it's $6 – and Saltzman's margins have declined. Saltzman has a limited number of suppliers, and they all get their potatoes from Big Potato, and they bundle those potato orders with their other supplies, making it effectively impossible for Saltzman to buy his potatoes from anyone else.</p><p>Big Potato controls  of the frozen potato market, and any sector that large and concentrated is going to be pretty cozy. The execs at these companies all meet at industry associations, lobbying bodies, and as they job-hop between companies in the cartel. But they don't have to rely on personal connections to rig the price of potatoes: they do it through a third-party data-broker called Potatotrac. Each cartel member sends all their commercially sensitive data – supply costs, pricing, sales figures – to Potatotrac, and then Potatotrac uses that data to give \"advice\" to the cartel members about \"optimal pricing.\"</p><p>This is just price-fixing, with an app. The fact that they don't sit around a table and openly discuss pricing doesn't keep this from being price-fixing. What's more, they . A director at McCain said that \"higher ups\" forbade anyone in the company from competing on price. A Lamb Weston exec described the arrangement as everyone \"behaving themselves,\" chortling that they'd \"never seen margins this high in the history of the potato industry.\" Lamb Weston's CEO attributed a 111% increase in net income to \"pricing actions.\"</p><p>Lamb Weston's execs understand that they're driving small restaurants out of business, and that the real beneficiaries are big chains that can pass the price increases onto their customers, like \"Chili’s and the Texas Roadhouses and Cheesecake Factory\":</p><p>This is by no means unique to the potato industry. A data-broker called Agri Stats works with America's largest meat-packers to rig the price of meat – packers send Agri Stats the same kind of data that Big Potato sends to Potatotrac, and Agri Stats sends back the same \"recommendations\" that allow them to raise meat prices across the board, in lockstep:</p><p>Lots of food categories are as inbred as meat and potatoes: \"four firms controlled nearly 80 percent of the almond milk market, for instance. Three companies controlled 83 percent of the canned tuna market, and four companies controlled more than 86 percent of the microwave popcorn market.\"</p><p>The \"price fixing is legal if we do it with an app\" gambit is not just about food, either. Apps like Realpage let big corporate landlords – who've bought up a sizable fraction of all the available homes in America – collude to raise rents:</p><p>And private equity companies have rolled up all the  companies, hiking the price of trucks, creating backlogs and bottlenecks for parts and service, and starving the nation's municipalities (including Los Angeles) of fire-fighting equipment:</p><p>This kind of price-fixing was central to the enforcement actions of the Biden administration's trustbusters at the FTC, and their investigations and actions inspired state AGs and private parties to bring their own antitrust suits. The question is, will Trump's enforcers continue this agenda? And will Trump's judges – steeped in Heritage Foundation economics that insists that monopolies are \"efficient\" – find in their favor if they do?</p><p>Inflation has lots of causes, it's true. But when an industry is consolidated enough to take advantage of a data brokerage or just engage in tacit collusion,  source of inflation – war, disease, weather – allows whole sectors to raise prices together, and keep them high, long after the shock has passed.</p><ul><li>Picks and Shovels: a sequel to \"Red Team Blues,\" about the heroic era of the PC, Tor Books, February 2025</li><li><p>Unauthorized Bread: a middle-grades graphic novel adapted from my novella about refugees, toasters and DRM, FirstSecond, 2025</p></li></ul><ul><li>Enshittification: a nonfiction book about platform decay for Farrar, Straus, Giroux. Status: second pass edit underway (readaloud)</li><li><p>A Little Brother short story about DIY insulin PLANNING</p></li><li><p>Picks and Shovels, a Martin Hench noir thriller about the heroic era of the PC. FORTHCOMING TOR BOOKS FEB 2025</p></li></ul><p>This work – excluding any serialized fiction – is licensed under a Creative Commons Attribution 4.0 license. That means you can use it any way you like, including commercially, provided that you attribute it to me, Cory Doctorow, and include a link to pluralistic.net.</p><p>Quotations and images are not included in this license; they are included either under a limitation or exception to copyright, or on the basis of a separate license. Please exercise caution.</p><p>Blog (no ads, tracking, or data-collection):</p><p>Newsletter (no ads, tracking, or data-collection):</p><p>Mastodon (no ads, tracking, or data-collection):</p><p>Medium (no ads, paywalled):</p><p>Twitter (mass-scale, unrestricted, third-party surveillance and advertising):</p><p>Tumblr (mass-scale, unrestricted, third-party surveillance and advertising):</p><p>\"<em>When life gives you SARS, you make sarsaparilla</em>\" -Joey \"Accordion Guy\" DeVilla</p>","contentLength":7342,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42830646"},{"title":"Someone has submitted my project on AUR.","url":"https://aur.archlinux.org/packages/bunster","date":1737905019,"author":"/u/yassinebenaid","guid":562,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/golang/comments/1iah7j9/someone_has_submitted_my_project_on_aur/"},{"title":"Getting Started with Encore.go","url":"https://eltonminetto.dev/en/post/2025-01-25-intro-encore-part-1/","date":1737904579,"author":"/u/eminetto","guid":557,"unread":true,"content":"<p><a href=\"https://encore.dev/go\">Encore.go</a>&nbsp;has been on my radar for quite some time, when its beautiful website and examples caught my attention in a news article on Hacker News. But my excitement really increased after&nbsp;<a href=\"https://encore.dev/blog/open-source-decoupled\">this post</a>&nbsp;was published in December 2024. It announced that the framework would&nbsp;become an independent project, separated from the Encore Cloud tool.\nThis decision can make the framework more attractive to companies and developers who want to use it in their existing environments. I have nothing against <a href=\"https://encore.cloud\">Encore Cloud</a>, which seems to be a very interesting and robust solution, but this freedom of choice favors adoption in companies of different sizes.</p><p>Given this initial context, I decided to port a project that I use to write texts and lectures about microservices to Encore, and the result is a series of posts, this being the first. The initial idea is to divide the series as follows:</p><ol><li>Creating an API with a database (&lt;— you are here)</li><li>Interservice communication and authentication</li><li>Communication via Pub/Sub</li></ol><p>I may create new posts while writing the following parts, but the initial plan is defined. So, let’s go to the first part.</p><h2>Creating an API with a database</h2><p>To use Encore, we need to install its CLI, which we will use throughout the development cycle. Since I use macOS, I installed it using the command:</p><pre><code>brew install encoredev/tap/encore\n</code></pre><p>In&nbsp;the <a href=\"https://encore.dev/docs/ts/install\">documentation</a>,&nbsp;you can see the other possible installation methods.</p><p>With the CLI installed, we can use it to create the project:</p><p>Since I chose the option to create a project from scratch, the created directory only contains the files with the dependencies &nbsp;(&nbsp;and&nbsp;) and , which&nbsp;will be used by the CLI to manipulate the project. Its initial content is straightforward:</p><div><pre tabindex=\"0\"><code data-lang=\"json\"></code></pre></div><p>For now, we won’t need to change anything in&nbsp;, so let’s create the structure of the first microservice:</p><div><pre tabindex=\"0\"><code data-lang=\"bash\"></code></pre></div><p>In addition to creating the directory, we initialize a file called , where we will define our API. The content of the first version was as follows:</p><div><pre tabindex=\"0\"><code data-lang=\"go\"></code></pre></div><p>Encore extensively uses the concept of&nbsp; to define the application’s behavior and generate the code necessary for execution. The first example of this is the creation of a&nbsp;:</p><div><pre tabindex=\"0\"><code data-lang=\"go\"></code></pre></div><p>Another common feature of frameworks like Encore is the existence of conventions. The first one we will find here is the initialization of services. Since we have defined a service called&nbsp;, we can create a function called&nbsp; that will be invoked by the framework. In this function, we will inject the service dependencies, as we will do later in the project.</p><p>The following&nbsp;annotation we see in the code is the one that defines an API, as in the example:</p><div><pre tabindex=\"0\"><code data-lang=\"go\"></code></pre></div><p>This declaration tells the framework that this is a public API (we’ll see more about this in the following parts of this series) whose path is  and that it will be accessed via the  method.\nAn API is a function that receives a&nbsp;context and a parameter struct (in this case, ) and returns a response struct (in this case, ).</p><p>One of the interesting features of the framework is the ease of accessing the parameter values: we can use the values ​​as , which is part of the received struct, without needing to convert the received JSON. More details about parameter handling and examples can be found&nbsp;in the official <a href=\"https://encore.dev/docs/go/primitives/defining-apis\">documentation</a>.</p><p>We can now run the project using the CLI:</p><div><pre tabindex=\"0\"><code data-lang=\"bash\"></code></pre></div><p>We can see that the API is available at the URL&nbsp; and the&nbsp;development dashboard, which is one of the biggest attractions of the framework. How it works can be seen below:</p><p>In the video, you can see the interesting features available, such as testing the API and viewing traces and application components. The dashboard will become even more useful as we add layers of complexity to the project.</p><p>The next step in developing the application is to define a database. We need to have Docker installed and running to do this since Encore will use it to create the database image. At the time of writing, the available database is PostgreSQL. In the , we will make the following changes:</p><div><pre tabindex=\"0\"><code data-lang=\"go\"></code></pre></div><p>As you can see in the excerpt, Encore uses the concept of&nbsp;, which is very useful. It was necessary to create the directory&nbsp; and the file&nbsp;<code>user/migrations/1_create_tables.up.sql</code> with the following content:</p><div><pre tabindex=\"0\"><code data-lang=\"sql\"></code></pre></div><p>The database is created in the file, and a record is also inserted for use in tests via the dashboard. More details&nbsp;about migrations can be seen in the&nbsp;<a href=\"https://encore.dev/docs/go/primitives/databases#database-migrations\">documentation</a>.</p><p>Another interesting feature of the command&nbsp; is that it auto-reloads the application. Whenever something is changed in one of the project files, the application is recompiled and executed again, so your database should have been created successfully.</p><p>To finalize this first version of the project, I created other files to complement the functionality. Using a framework like Encore makes repetitive tasks much more straightforward, such as configuring routes, converting parameters and responses, etc. However, it does not eliminate the need to use good development practices, such as abstractions, decoupling, etc. With this in mind, I created other files that are important for our project:</p><ul><li><a href=\"https://github.com/eminetto/post-encore/blob/main/user/user.go\">user.go</a>, which defines what a&nbsp;“user” in the application is</li><li><a href=\"https://github.com/eminetto/post-encore/blob/main/user/service.go\">service.go</a>, which contains the application’s business rule and will be used by the API</li><li><a href=\"https://github.com/eminetto/post-encore/blob/main/user/security/jwt.go\">security/jwt.go</a>, which includes the logic for generating and validating JWT tokens</li></ul><p>With these auxiliary files, the final version of our API looks like this:</p><div><pre tabindex=\"0\"><code data-lang=\"go\"></code></pre></div><p>In this new version, you can see that we initialize the service (in the function&nbsp;) with the injection of the business rule and the error handling provided by the framework.</p><p>Another advantage of using a framework like Encore is that it provides features that help with the critical task of writing tests. In this first version, we have two crucial components to test:</p><div><pre tabindex=\"0\"><code data-lang=\"go\"></code></pre></div><p>The highlight is the use of the package&nbsp;, which provides a way to ensure that tests can be executed in parallel (<code>et.EnableServiceInstanceIsolation()</code>) and the ease of using an exclusive database for tests (<code>testDB, err:= et.NewTestDatabase(ctx, \"user\")</code>).</p><p>The interesting thing is that migrations are used automatically, making the test easier to write and execute.</p><div><pre tabindex=\"0\"><code data-lang=\"go\"></code></pre></div><p>In this test, nothing from the framework was necessary; just good old Go, with its native advantages, was used.</p><p>An important detail: to run the tests, you must use the CLI. Therefore, instead of running them using the command:</p><p>There is a plugin for Goland that allows execution directly through the IDE, but the same is not yet true for VSCode, as can be seen in the&nbsp;official testing <a href=\"https://encore.dev/docs/go/develop/testing\">documentation</a>.</p><p>The objective of this first post was to present the basics of the framework and spark your curiosity about the next chapters in this series.</p><p>I’ll leave my opinions on the framework for the last part of the series so I can provide more arguments to say whether I liked the experience or not. But I can say that I’m having a lot of fun with the first steps. What about you, dear reader? What do you think of Encore so far? Leave your impressions in the comments.</p>","contentLength":6911,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/golang/comments/1iah0ue/getting_started_with_encorego/"},{"title":"SQLC - migrating existing queries to a new schema","url":"https://www.reddit.com/r/golang/comments/1iaglnn/sqlc_migrating_existing_queries_to_a_new_schema/","date":1737903573,"author":"/u/Sliczzz","guid":558,"unread":true,"content":"<p>I've been happily using SQLC with Postgresql as an engine to enjoy type safe SQL in a project I've recently been working on. By now the application is quite mature and I have quite some queries (13 tables, 10-15 query files, 50-100 queries).</p><p>Now my application is evolving and I want to build another module, which needs its own separate schema. I could go all the way and split the application in two and have two databases, but for now a modular monolith with separate schemas will do just fine.</p><p>The problem I now have is that those queries/tables assume the schema being used is `public`. Now, I'd like to split my queries into 2 schemas (`game` and `lobby`), but from what I understand the only way to achieve this is to migrate every single query (and corresponding golang imports) to the new schema manually.</p><p>Is there a way to specify the schema context in which the queries are running and being generated without impacting the existing codebase too much (like, having to change all existing imports because the postgres schema changed)?</p>","contentLength":1041,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"No one is disrupting banks – at least not the big ones","url":"https://www.popularfintech.com/p/no-one-is-disrupting-banks","date":1737900315,"author":"kazanins","guid":187,"unread":true,"content":"<p><strong>despite almost 30 years of trying, Fintech companies have not disrupted banks</strong></p><p><strong>they hardly challenged the key banking model - taking deposits and issuing loans</strong></p><p><strong>banks and Fintech companies will need to learn how to co-exist</strong></p><p><em><a href=\"https://x.com/jevgenijs\" rel=\"\">on X/Twitter</a></em></p><p><strong>The money center banks survived the “deposit flight”</strong></p><blockquote><p><em><strong>we expect to see a more visible growth trend</strong><strong>we can already see that trend in consumer checking deposits</strong></em></p><p><em>Jeremy Barnum, JPMorgan Q4 2024 earnings call</em></p></blockquote><p><strong>a perfect time for Fintech companies to get deposits</strong></p><p><strong>high-yield savings accounts to make people move their money from the incumbents</strong></p><p><strong>These customers want to bank with us now</strong></p><p><strong>for how long will Wells Fargo keep paying 4% to Cash App customers?</strong></p><blockquote><p><em><strong>these are the most valuable deposits in the franchise</strong></em></p><p><em>Alastair Borthwick, Bank of America Q4 2024 earnings call</em></p></blockquote><p><strong>At the end of Q3 2024, LendingClub had $9.5 billion in deposits, and SoFi had $24.4 billion</strong></p><p><strong>Fintechs haven’t managed to challenge banks in lending. </strong></p><p><strong>Affirm quickly got to 1.4 million Affirm Card cardholders</strong></p><p><strong>Robinhood claims that 2 million people are on the waitlist</strong></p><blockquote><p><em><strong>Robinhood Gold credit card crossed 2 million on the waitlist and is adding roughly 200,000 waitlist sign-ups per month</strong></em></p><p><em>Vlad Tenev, Robinhood 2024 Investor Day</em></p></blockquote><p><strong>in 2024, Amex opened 13 million new card accounts, Chase opened 10 million</strong></p><p><strong>JPMorgan finished 2024 with $233 billion in credit card loans</strong></p><blockquote><p><em><strong>We expect healthy card loan growth again this year, but below the 12% pace we saw in 2024</strong></em></p><p><em>Jeremy Barnum, JPMorgan Q4 2024 earnings call</em></p></blockquote><p><strong>last few years were ideal for building a credit card business as loan balances exploded</strong></p><blockquote><p><em><strong>a Fintech perspective on the consumer side, we really have not seen anything. Not that we don't look at it, not that we're not aware of it.</strong></em></p><p><em>Stephen Squeri, American Express Q4 2024 earnings call</em></p></blockquote><p><strong>Banks might be losing (or have already lost?) payment acceptance business to Fintech companies. </strong></p><blockquote><p><em><strong>have you considered about whether you should get rid of this business and deploy the capital to other areas where you're in a much stronger position</strong></em></p><p><em>Analyst’s question on U.S. Bank Q4 2024 earnings call</em></p></blockquote><p><strong>be losing the cross-border payments business</strong></p><p><strong>Ramp and Brex are certainly becoming a force in commercial cards</strong></p><blockquote><p><em><strong>we keep our eye on Ramp, Brex</strong><strong>they have good products, and they're making some inroads</strong></em></p><p><em>Stephen Squeri, American Express, Q4 2024 earnings call</em></p></blockquote><p><strong>…but (and that’s an important but!) big banks have figured out mobile too. </strong></p><p><strong>JPMorgan Chase reported 58 million active mobile users</strong></p><p><strong>threw billions on catching up with Fintech companies</strong><strong>still delivering crazy high profitability. </strong></p><blockquote><p><em><strong>we had probably reached peak modernization spend</strong><strong>to focus on features and new product development</strong></em></p><p><em>Jeremy Barnum, JPMorgan Q4 2024 earnings call</em></p></blockquote><p><strong>Fintech companies might be disrupting community banks, but was that the ambition? </strong></p><p><strong>a dozen or so largest banks (with $250+ in assets) generate 60% of the industry’s profit</strong></p><p><strong>banks and Fintech companies will need to learn how to co-exist</strong></p><div data-attrs=\"{&quot;url&quot;:&quot;https://www.popularfintech.com/p/no-one-is-disrupting-banks?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share&quot;,&quot;text&quot;:&quot;Share&quot;}\" data-component-name=\"CaptionedButtonToDOM\"><div><p>Thanks for reading Popular Fintech! This post is public so feel free to share it.</p></div></div><p><em>Disclaimer: Information contained in this newsletter is intended for educational and informational purposes only and should not be considered financial advice. You should do your own research or seek professional advice before making any investment decisions.</em></p>","contentLength":3243,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42830155"},{"title":"Break up with Adobe, switch to Linux","url":"https://youtu.be/lm51xZHZI6g?si=bl-gjEb2KGa2YKii","date":1737899242,"author":"/u/BulkyMix6581","guid":574,"unread":true,"content":"<!DOCTYPE html>","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/linux/comments/1iaexty/break_up_with_adobe_switch_to_linux/"},{"title":"sortedmap – sorted map implementation for Go with a heap and iterators under the hood","url":"https://www.reddit.com/r/golang/comments/1iaeqla/sortedmap_sorted_map_implementation_for_go_with_a/","date":1737898681,"author":"/u/egregors","guid":560,"unread":true,"content":"<p>Check this out: a generic map that maintains order (by keys or values). To be honest, I was surprised not to find something like this in the current state of things. Perhaps it solves too specific problems, idk. But anyway, here is my implementation: <a href=\"https://github.com/egregors/sortedmap\">sortedmap</a>. I believe it could be useful for someone.</p><p>The constructor expects a custom  function to define the ordering rule. To maintain order, I use a generic heap of key-value pairs with an  insert time complexity. The map access API is mostly inspired by standard library  and .</p><p>The only thing I don’t really like is the  method. In the current implementation, it requires a full scan of the heap to find the key-value pair to remove. I’ll probably find a more efficient way to handle this, but for now, in real-world use cases, it doesn’t seem like a major issue.</p><p><strong>Why do I need a sorted map?</strong></p><p>Quite simple: I need a recursive category tree that can be edited at runtime and must always remain ordered.</p>","contentLength":957,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Rust’s worst feature* (spoiler: it’s BorrowedBuf, I hate it with passion)","url":"https://mina86.com/2025/rusts-worst-feature/","date":1737893558,"author":"/u/mina86ng","guid":585,"unread":true,"content":"<p><small>* available in Rust nightly.</small></p><p>There are several aspects of Rust that I’m&nbsp;not particularly fond of but the one that takes the cake is <a href=\"//doc.rust-lang.org/core/io/struct.BorrowedBuf.html\"></a> which I despise with passion. It’s a&nbsp;nightly feature which puts in question my extreme emotions about it. On the other hand it means there’s time to stop it from getting stabilised and figure out something better.</p><p>In this article I’ll describe the problem the feature addresses, the issues I&nbsp;have with the solution and describe some alternatives. As it turns out, things aren’t as easy as they seem on the first look.</p><p>Consider the  routine below which copies data between two I/O streams. On each iteration of the loop, it zero-initialises the buffer which wastes time considering that  will override the data. The compiler doesn’t know that and has no choice but to fill the array with zeros each time. Even an obvious optimisation of moving the buffer declaration outside of the loop isn’t available to the compiler.</p><pre>fn slow_copy(\n  mut rd: impl std::io::Read,\n  mut wr: impl std::io::Write,\n) -&gt; std::io::Result&lt;()&gt; {\n  loop {\n    let mut buf = [0; 4096];\n    let read = rd.read(&amp;mut buf)?;\n    if read == 0 {\n      break Ok(());\n    }\n    wr.write_all(&amp;buf[..read])?;\n  }\n}</pre><p>An attempt at a&nbsp;solution is to use  which makes it possible to declare a&nbsp;region of uninitialised memory. Some explicit pointer casting is necessary, but otherwise code using it is straightforward.</p><pre>use core::mem::MaybeUninit;\n\npub fn unsound_copy(\n    mut rd: impl std::io::Read\n    mut wr: impl std::io::Write,\n) -&gt; std::io::Result&lt;()&gt; {\n  loop {\n    let mut buf = [MaybeUninit::&lt;u8&gt;::uninit(); 4096];\n    // \n    // <i>For demonstration purposes only.</i>\n    let buf = unsafe {\n      &amp;mut *(&amp;mut buf as *mut [_] as *mut [u8])\n    };\n    let read = rd.read(buf)?;\n    if read == 0 {\n      break Ok(());\n    }\n    wr.write_all(&amp;buf[..read])?;\n  }\n}</pre><p>While replacing the array of zeros by an array of uninitialised values may work in specific circumstances, the code is unsound. Change to the compiler, its options, modification of unrelated parts of the code or using the function for a&nbsp;different  trait implementation may break the program in unpredictable ways.</p><p>The solution in nightly Rust is the  struct. It’s a&nbsp;bytes slice which remembers how much of it has been initialised. It doesn’t own the memory and operates on a&nbsp;borrowed buffer (hence the name). It can point at an array on the stack or a&nbsp;slice living on the heap (such as ’s spare capacity). A&nbsp;naïve use of the feature is the following:</p><pre>#![feature(core_io_borrowed_buf, read_buf)]\n\nuse core::io::BorrowedBuf;\nuse core::mem::MaybeUninit;\n\nfn almost_good_copy(\n    mut rd: impl std::io::Read,\n    mut wr: impl std::io::Write,\n) -&gt; std::io::Result&lt;()&gt; {\n  loop {\n    let mut buf = [MaybeUninit::uninit(); 4096];\n    let mut buf = BorrowedBuf::from(&amp;mut buf[..]);\n    rd.read_buf(buf.unfilled())?;\n    if buf.len() == 0 {\n      break Ok(());\n    }\n    wr.write_all(buf.filled())?;\n  }\n}</pre><h2>Issues with the </h2><p>While  appears to work as expected,  isn’t without its share of problems. I&nbsp;describe them below.</p><p>The  does not seamlessly integrate with existing Rust code. In fact quite the opposite. APIs need to support it explicitly. For example, many third-party  implementations do not provide  method. In its absence, the default version initialises the memory and calls  negating any potential benefits of .</p><p>Similarly, functions which take output slice as an argument — such as <a href=\"//docs.rs/rand/0.8.5/rand/trait.RngCore.html\">’s </a> — could benefit from being able to write to uninitialised memory. However, to offer that benefit, they need to be changed to support . A&nbsp;motivated programmer can try adding necessary support to actively maintained packages, like , but what if one is stuck at an older version of the crate or deals with apparently abandoned crates like  or . To support those cases, forking would be necessary leading the programmer towards deeper circles of dependency hell.</p><p>Then again, should functions such as  integrate with  in the first place instead of taking an  argument? The issue with the latter is that there’s no safe way to convert  into .<a href=\"https://mina86.com/2025/rusts-worst-feature/#f1\"></a> As such, users who so far happily used such functions with regular initialised buffers would need convoluted incantation to make their previously straightforward code to compile. Meanwhile, creating  is somewhat convenient and can be done from initialised and uninitialised buffers alike.</p><p>In addition to , the  crate offers <a href=\"//docs.rs/rand/latest/rand/trait.Rng.html#method.fill\">a&nbsp; method</a> which fills a&nbsp;generic slice of integers with random data. It could easily work with  except that the struct works on  slices only. As a&nbsp;result, a&nbsp;crate which deals with different types cannot consistently use .</p><p>I&nbsp;don’t know the reasons why  is not generic. It’s possible that its design focused on addressing the the  trait use case only. Complications around dealing with  types could have been a&nbsp;contributing factor. However, even then the type could be generic on  types.</p><p> being optional brings another problem. Without full understanding of the behaviour and interactions of the  type, it’s easy to misuse it such as in . One can be excused from assuming that the function eliminates unnecessary initialisation. It declares an uninitialised region, wraps it in  and reads data into it. Even inspection of the assembly output <a href=\"//rust.godbolt.org/z/dvaPqz4co\">shows lack of the  call</a>.</p><p>Alas, while  avoids memory initialisation when reading data from a&nbsp;, it wastes time zeroing the buffer when, for example, decompressing data with help of <a href=\"//crates.io/crates/flate2\"> crate</a> (which does not offer custom  method) effectively becoming a&nbsp;.</p><p>Unless the underlying type is known, the programmer must assume that  may resort to filling the memory. The proper use of  is to construct it only once so that it can remember that the memory has been initialised.</p><pre>#![feature(core_io_borrowed_buf, read_buf)]\n\nuse core::io::BorrowedBuf;\nuse core::mem::MaybeUninit;\n\nfn copy(\n  mut rd: impl std::io::Read,\n  mut wr: impl std::io::Write,\n) -&gt; std::io::Result&lt;()&gt; {\n  let mut buf = [MaybeUninit::uninit(); 4096];\n  let mut buf = BorrowedBuf::from(&amp;mut buf[..]);\n  loop {\n    buf.clear();\n    rd.read_buf(buf.unfilled())?;\n    if buf.len() == 0 {\n      break Ok(());\n    }\n    wr.write_all(buf.filled())?;\n  }\n}</pre><p>With ’s complexity it’s not hard to imagine why people might use it in inefficient way. The struct is harder to understand than the unsound casting in . This may lead people to use the more straightforward option even if it’s not correct. An analogy to a&nbsp; with its contents and spare capacity partially helps — a&nbsp; has analogous filled and unfilled parts — but is an oversimplified view. A&nbsp; is also split into initialised and uninitialised parts. The documentation visualises it as follows:</p><table><tbody></tbody></table><p>There are reasons for this madness. Consider loop in the  function above. If  only knew how much of it was filled, each call to  would lose the information about memory being initialised. In the default implementation of  it would need to unnecessarily zero the whole buffer. Separately storing information about how much of the buffer has been filled and initialised, let the type avoid double-initialisation of memory.</p><p>As an aside, I find modelling  as divided into filled and spare capacity with spare capacity further divided into initialised and uninitialised as more intuitive. Leaning into the analogy of  is in my opinion more natural and it helps by reinforcing terminology used in existing parts of the language rather than introducing new models.</p><table><tbody></tbody></table><p>Having looked at issues with , let’s consider what people actually want.<a href=\"https://mina86.com/2025/rusts-worst-feature/#f2\"></a> The easiest mental model is that uninitialised memory stores arbitrary data, unknown unless accessed. To achieve such semantics, the uninitialised memory would need to be . A&nbsp;frozen region becomes safe to read and can be accessed through regular Rust references. With freezing operation available, the buffer definition in the copying routine could be turned into something like:</p><pre>  let mut buf = [MaybeUninit::uninit(); 4096];\n  // SAFETY: u8 has no invalid bit patterns.\n  let buf = unsafe {\n    MaybeUninit::slice_freeze_mut(&amp;mut buf)\n  };</pre><pre>  let buf = MaybeUninit::frozen();\n  // SAFETY: u8 has no invalid bit patterns.\n  let mut buf: [u8; 4096] = unsafe { buf.assume_init() };</pre><p>Unsafe blocks are required to account for invalid bit patterns. With a&nbsp;trait like <a href=\"//docs.rs/bytemuck/latest/bytemuck/trait.AnyBitPattern.html\"></a>, a&nbsp;safe versions could exist. Either of those alternatives would require no new methods on the  trait and would work without any modifications on methods such as ’s .</p><h2>Why can’t we have what we want?</h2><p>Reading uninitialised memory is hardly an issue when analysing things on hardware level. So long as a&nbsp;memory address is mapped with proper permissions, accessing data from it will always produce some value. There’s no undefined behaviour there.<a href=\"https://mina86.com/2025/rusts-worst-feature/#f3\"></a> In fact, in typical Linux environment all newly allocated anonymous pages are zero-initialised.<a href=\"https://mina86.com/2025/rusts-worst-feature/#f4\"></a></p><figure><pre>tautology:\n  cmp  BYTE PTR [rdi], 0\n  je   tautology_ok\n  cmp  BYTE PTR [rdi], 0\n  jne  tautology_ok\n  mov  al, 0\n  ret\ntautology_ok:\n  mov  al, 1\n  ret</pre><figcaption>An x86 assembly function which checks whether value in memory is zero or non-zero. This seemingly tautological test can fail when operating on a&nbsp;memory page marked with  and the kernel changes the mapping in between the two memory reads.</figcaption></figure><p>Unfortunately, even when looking from the point of view of machine code, this analysis isn’t complete…</p><h3>Giving advice about use of memory</h3><p> flag of the <a href=\"//man7.org/linux/man-pages/man2/madvise.2.html\"></a> system call allows user space to advise the kernel that (until next write) it no longer cares about contents of specified anonymous pages. This optimisation enables the kernel to discard those pages without swapping them to disk. While the advice is in effect, the user space  access the memory, but has no guarantee whether it’ll read the old values or zeros. Even code written directly in assembly language, like the  function on the right can result in unexpected behaviour.</p><p>This isn’t a&nbsp;theoretical concern either. jemalloc, a&nbsp;somewhat popular memory allocator, uses  when memory is freed. As a&nbsp;result, new allocations returned from the allocator may point to region of memory where the  advice is in effect. Nicholas Ormrod, in his <a href=\"//youtu.be/kPR8h4-qZdk?t=1150\">talk about C++  at Facebook</a>, describes how interaction between jemalloc,  and reading uninitialised memory resulted in outages.</p><p>To prevent this issue, the proposed  function would need to write into each page of the slice to make sure the kernel notices that the program cares about contents of the page again. This could be a simple loop stepping 4 KiB at a time and look something like the following:</p><pre>pub unsafe fn slice_freeze_mut&lt;T&gt;(\n  slice: &amp;mut [MaybeUninit&lt;T&gt;]\n) -&gt; &amp;mut [T] {\n  const PAGE_SIZE: usize = 4096;\n  let ptr = slice.as_mut_ptr() as *mut _;\n  let len = slice.len() * size_of::&lt;T&gt;();\n  // SAFETY: It’s always safe to split MU object into MU bytes.\n  let bytes: &amp;mut [MaybeUninit&lt;u8&gt;] = unsafe {\n    core::slice::from_raw_parts(ptr, len);\n  };\n  for el in bytes.iter_mut().step_by(PAGE_SIZE) {\n    let p = el.as_mut_ptr();\n    // SAFETY: Unsafe without language semantics change\n    // since we’re reading uninitialised byte.\n    unsafe { p.write_volatile(p.read()) };\n  }\n  // SAFETY: Caller promises that T has no invalid bit patterns,\n  // but this is still unsafe without language semantics change\n  // since we haven’t initialised all the bytes.\n  unsafe { &amp;mut *(slice as *mut _ as *mut [T]) }\n}</pre><p>Unfortunately, this would hardly be the no-operation that people expect from writing into uninitialised memory. It would be an improvement over a full initialisation and would address some issues with  but would do that at the cost of unavoidable page touching.</p><p>It may seem that the second form — the <code>MaybeUninit::frozen().assume_init()</code> variant — which creates frozen buffer directly on stack could be easier to optimise. The compiler controls the stack and unless it issues , no stack pages will be marked . Unfortunately it’s not clear that always hold true. For example, with async programming the stack lives God-knows-where and there may be other corner cases that would need to be considered.</p><p>I&nbsp;started this article with a&nbsp;promise of some alternatives to  and yet, as I&nbsp;conclude it, no working alternative is presented. Indeed, this is perhaps what frustrates me the most about the . On the face of it, writing data into uninitialised memory is a&nbsp;feature with an obvious solution, but it doesn’t take long before all the obvious solutions clash with Rust’s safety requirements.</p><p>So what’s a&nbsp;lowly programmer to do? Donald Knuth is often quoted as stating that ‘premature optimisation is the root of all evil’. True to that adage, in most cases it’s safe to pay the price of the memory initialisation. I/O operations usually take orders of magnitude more time so the time saved not initialising the memory is often negligible.</p><p>But there is more to Knuth’s quote:</p><blockquote><p>We  forget about small efficiencies, say about 97% of the time: premature optimisation is the root of all evil.</p><p>Yet we should not pass up our opportunities in that critical 3%. A&nbsp;good programmer will not be lulled into complacency by such reasoning, he will be wise to look carefully at the critical code; but only after that code has been identified.<a href=\"https://mina86.com/2025/rusts-worst-feature/#f5\"></a></p></blockquote><p>For the remaining 3%, the options now are somewhat bleak and depend on the particular code base. They may require switching to nightly compiler, patching third-party crates, going straight to doing unsafe syscalls (e.g. <a href=\"//man7.org/linux/man-pages/man2/read.2.html\"></a>) or isolating critical code paths and writing them in C.</p><p>And while we deal with the lack of ideal solution for writing to uninitialised memory, maybe someone will figure out some alternative fast and ergonomic approach.</p><p><a href=\"https://mina86.com/2025/rusts-worst-feature/#b1\">1</a> The reference conversion itself is safe since all possible values of type  are valid values of type  and both those types have the same layout. However, the latter allows writing arbitrary data into the object which may result in invalid representation of  (see <a href=\"//play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=72ca09295e9b98dfdd85a3af573aa0b9\">playground demonstration</a>). With interior mutability, even converting shared references may lead to issues.</p><p><a href=\"https://mina86.com/2025/rusts-worst-feature/#b2\">2</a> I&nbsp;am aware that I&nbsp;presumptuously speak for everyone. However, I&nbsp;do believe that alternatives presented here, if they existed, would be favoured by everyone and that includes contributors to the  struct. As I&nbsp;discuss later, the type is the way it is not because that’s what anyone finds appealing but due to other constraints.</p><p><a href=\"https://mina86.com/2025/rusts-worst-feature/#b3\">3</a> Semantics that reading uninitialised memory has arbitrary but consistent value can be useful in practice. Briggs and Torczon describe in <a href=\"//doi.org/10.1145/176454.176484\">An efficient representation for sparse sets</a> an algorithm which is built on such semantics.</p><p><a href=\"https://mina86.com/2025/rusts-worst-feature/#b3\">4</a> The atypical environment is µClinux which runs on platforms without memory management unit (MMU). <a href=\"//www.kernel.org/doc/Documentation/admin-guide/mm/nommu-mmap.rst\">It supports  option</a> which skips zeroing of the memory region. However, even with that flag, allocated pages maintain consistent state.</p><p><a href=\"https://mina86.com/2025/rusts-worst-feature/#b5\">5</a> Donald E. Knuth. 1974. Structured Programming with  Statements. ACM Computing Surveys. Vol. 6, Issue 4 (Dec. 1974), 261–301. <a href=\"//doi.org/10.1145/356635.356640\">doi:10.1145/356635.356640</a>.</p>","contentLength":14955,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/rust/comments/1iad0lk/rusts_worst_feature_spoiler_its_borrowedbuf_i/"},{"title":"Show HN: Orange intelligence, an open source alternative to Apple Intelligence","url":"https://github.com/sharingan-no-kakashi/orange-intelligence","date":1737889379,"author":"MexicanYoda","guid":180,"unread":true,"content":"<p>Hi HN! I’m excited to share Orange Intelligence, an open-source alternative to Apple Intelligence for macOS.</p><p>Orange Intelligence allows you to interact with any text on your macOS system in a more powerful and customizable way. It brings a floating text processor that integrates seamlessly with your workflow. Whether you’re a developer, writer, or productivity enthusiast, this tool can boost your efficiency.\nKey Features:</p><pre><code>    Floating Text Processor: Trigger a floating window by double-tapping the Option key to process selected text.\n    Run Any Python Function: From basic text manipulations to running large language models (LLM) like OpenAI or local LLaMA, you can execute any Python function on the fly.\n    Full Customization: Want to add your own functions or logic? Just write them in Python, and they’ll appear in the floating window.\n</code></pre>\nHow does it work?<pre><code>    Capture: Uses AppleScript to simulate a global Cmd+C and capture selected text from any active macOS app.\n    Process: A floating window pops up, letting you choose what to do with the text (run a function, format it, or apply an LLM).\n    Replace: After processing, the app returns focus to the original application and pastes the processed text back with a global Cmd+V.\n</code></pre>\nWhy open source?<p>I built this to overcome the limitations of Apple’s proprietary tools, and I wanted to make it fully customizable and extendable. Orange Intelligence is built with Python and PyQt6, so it’s easy to adapt, extend, and contribute to.</p><p>It’s not just a text processor—it’s a platform for building custom workflows, whether you want to automate simple tasks or integrate with complex AI systems.</p><p>I’m looking forward to your thoughts, ideas, and contributions. Thanks!</p>","contentLength":1736,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42829309"},{"title":"Show HN: Bagels – TUI expense tracker","url":"https://github.com/EnhancedJax/Bagels","date":1737881871,"author":"EnhancedJax","guid":179,"unread":true,"content":"<p>Hi! I'm Jax and I've been building this cool little terminal app for myself to track my expenses and budgets!</p><p>Other than challenging myself to learn Python, I built this mainly around the habit of budget tracking at the end of the day. (I tried tracking on-the-go, but the balance was always out of sync.) All data is stored in a single sqlite file, so you can export and process them all you want!</p><p>The app is built using the textual API for Python! Awesome framework which feels like I'm doing webdev haha.</p>","contentLength":505,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42828833"},{"title":"Oracle and US Investors (Including Microsoft) Discuss Taking Control of TikTok in the US","url":"https://tech.slashdot.org/story/25/01/26/0037255/oracle-and-us-investors-including-microsoft-discuss-taking-control-of-tiktok-in-the-us?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1737858840,"author":"EditorDavid","guid":260,"unread":true,"content":"A plan to keep TikTok available in the U.S. \"involves tapping software company Oracle and a group of outside investors,\" reports NPR, \"to effectively take control of the app's global operations, according to two people with direct knowledge of the talks...\" \n\n\"[P]otential investors who are engaged in the talks include Microsoft.\"\n\nUnder the deal now being negotiated by the White House, TikTok's China-based owner ByteDance would retain a minority stake in the company, but the app's algorithm, data collection and software updates will be overseen by Oracle, which already provides the foundation of TikTok's web infrastructure... \"The goal is for Oracle to effectively monitor and provide oversight with what is going on with TikTok,\" said the person directly involved in the talks, who was not authorized to speak publicly about the deliberations. \"ByteDance wouldn't completely go away, but it would minimize Chinese ownership....\" Officials from Oracle and the White House held a meeting on Friday about a potential deal, and another meeting has been scheduled for next week, according to the source involved in the discussions, who said Oracle is interested in a TikTok stake \"in the tens of billions,\" but the rest of the deal is in flux... \n\n\nUnder a law passed by Congress and upheld by the Supreme Court, TikTok must execute what is known as \"qualified divestiture\" from ByteDance in order to stay in business in the U.S... A congressional staffer involved in talks about TikTok's future, who was not authorized to speak publicly, said binding legal agreements from the White House ensuring ByteDance cannot covertly manipulate the app will prove critical in winning lawmakers' approval. \"A key part is showing there is no operational relationship with ByteDance, that they do not have control,\" the Congressional staffer said. \"There needs to be no backdoors where China can potentially gain access....\" \n\n\nChinese regulators, who have for years opposed the selling of TikTok, recently signaled that they would not stand in the way of a TikTok ownership change, saying acquisitions \"should be independently decided by the enterprises and based on market principles.\" The statement, at first, does not seem to say much, but negotiators in the White House believe it indicates that Beijing is not planning to block a deal that gives American investors a majority-stake position in the company.\n \n\n\"Meanwhile, Apple and Google still have not returned TikTok to app stores...\"","contentLength":2485,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"What’s Going on in the Containerd Neighborhood? - P. Estes, S. Karp, A. Suda, M. Brown, K. Ashok","url":"https://www.youtube.com/watch?v=kCNhgNXVdxw","date":1737848649,"author":"CNCF [Cloud Native Computing Foundation]","guid":352,"unread":true,"content":"<article>Don't miss out! Join us at our next Flagship Conference: KubeCon + CloudNativeCon Europe in London from April 1 - 4, 2025. Connect with our current graduated, incubating, and sandbox projects as the community gathers to further the education and advancement of cloud native computing. Learn more at https://kubecon.io\n\nWhat’s Going on in the Containerd Neighborhood? - Phil Estes, AWS; Samuel Karp, Google; Akihiro Suda, NTT; Michael Brown, IBM; Kirtana Ashok, Microsoft\n\nOur recent maintainer sessions have covered the soon-to-launch containerd v2.0. During this session led by maintainers we will give a brief update on 2.0, but will spend more time looking at the ecosystem around us. Why does containerd exist? What value does it bring to the overall cloud native world? How are other projects using it to build and extend containerd in useful ways? We’ll spend some time on containerd’s largest subproject, nerdctl, which also has an upcoming 2.0 release, and additionally catch the community up on activity in our Rust subproject ecosystem, the runwasi containerd shim, and lazy loading snapshotters. Since this is KubeCon, we’ll also provide an update on CRI changes and KEP-driven additions around NRI, DRA, and checkpoint/restore. Attendees will leave with a broad view of the larger containerd ecosystem of projects as well as key information on how to get involved if you are interested to help and contribute in any way to the “containerd neighborhood!”</article>","contentLength":1477,"flags":null,"enclosureUrl":"https://www.youtube.com/v/kCNhgNXVdxw?version=3","enclosureMime":"","commentsUrl":null},{"title":"Welcome & Introduction: A Hitchhiker's Guide to the CNCF Landscape- Katherine Druckman, Lori Lorusso","url":"https://www.youtube.com/watch?v=hTCAOa0-VdU","date":1737848276,"author":"CNCF [Cloud Native Computing Foundation]","guid":351,"unread":true,"content":"<article>Don't miss out! Join us at our next Flagship Conference: KubeCon + CloudNativeCon Europe in London from April 1 - 4, 2025. Connect with our current graduated, incubating, and sandbox projects as the community gathers to further the education and advancement of cloud native computing. Learn more at https://kubecon.io\n\nWelcome and Introduction: A Hitchhiker's Guide to the CNCF Landscape - Katherine Druckman and Lori Lorusso, CNCF Ambassador\n\n“Get your hiking boots ready because we are about to traverse the wild, wonderful world of the CNCF Landscape. Why you ask? We currently have over 190 projects, and finding information about them can be a challenge. “Just go to the website” isn’t enough, sometimes you need a guide to show you the ropes. In these introductory sessions we will go over some of the diverse set of projects inside the CNCF so that you’re well equipped to find what you’re looking for at KubeCon.</article>","contentLength":932,"flags":null,"enclosureUrl":"https://www.youtube.com/v/hTCAOa0-VdU?version=3","enclosureMime":"","commentsUrl":null},{"title":"Could New Linux Code Cut Data Center Energy Use By 30%?","url":"https://hardware.slashdot.org/story/25/01/25/2111225/could-new-linux-code-cut-data-center-energy-use-by-30?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1737848040,"author":"EditorDavid","guid":246,"unread":true,"content":"Two computer scientists at the University of Waterloo in Canada believe changing 30 lines of code in Linux \"could cut energy use at some data centers by up to 30 percent,\" according to the site Data Centre Dynamics. \n\nIt's the code that processes packets of network traffic, and Linux \"is the most widely used OS for data center servers,\" according to the article:\n\nThe team tested their solution's effectiveness and submitted it to Linux for consideration, and the code was published this month as part of Linux's newest kernel, release version 6.13. \"All these big companies — Amazon, Google, Meta — use Linux in some capacity, but they're very picky about how they decide to use it,\" said Martin Karsten [professor of Computer Science in the Waterloo's Math Faculty]. \"If they choose to 'switch on' our method in their data centers, it could save gigawatt hours of energy worldwide. Almost every single service request that happens on the Internet could be positively affected by this.\" \n\nThe University of Waterloo is building a green computer server room as part of its new mathematics building, and Karsten believes sustainability research must be a priority for computer scientists. \"We all have a part to play in building a greener future,\" he said. The Linux Foundation, which oversees the development of the Linux OS, is a founder member of the Green Software Foundation, an organization set up to look at ways of developing \"green software\" — code that reduces energy consumption. \n\nKarsten \"teamed up with Joe Damato, distinguished engineer at Fastly\" to develop the 30 lines of code, according to an announcement from the university. \"The Linux kernel code addition developed by Karsten and Damato was based on research published in ACM SIGMETRICS Performance Evaluation Review\" (by Karsten and grad student Peter Cai). \n\nTheir paper \"reviews the performance characteristics of network stack processing for communication-heavy server applications,\" devising an \"indirect methodology\" to \"identify and quantify the direct and indirect costs of asynchronous hardware interrupt requests (IRQ) as a major source of overhead... \n\n\"Based on these findings, a small modification of a vanilla Linux system is devised that improves the efficiency and performance of traditional kernel-based networking significantly, resulting in up to 45% increased throughput...\"","contentLength":2374,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Steam Brick: No screen, no controller, just a power button and a USB port","url":"https://crastinator-pro.github.io/steam-brick/","date":1737843313,"author":"sbarre","guid":221,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42825441"},{"title":"Navigating the Cgroup Transition: Bridging the Gap Between Kubernetes and User Expec... S. Kunkerkar","url":"https://www.youtube.com/watch?v=JWwwtW8Hbjs","date":1737838186,"author":"CNCF [Cloud Native Computing Foundation]","guid":350,"unread":true,"content":"<article>Don't miss out! Join us at our next Flagship Conference: KubeCon + CloudNativeCon Europe in London from April 1 - 4, 2025. Connect with our current graduated, incubating, and sandbox projects as the community gathers to further the education and advancement of cloud native computing. Learn more at https://kubecon.io\n\nNavigating the Cgroup Transition: Bridging the Gap Between Kubernetes and User Expectations - Sohan Kunkerkar, Red Hat Inc\n\nAs Kubernetes and container technologies evolve, shifting from cgroup v1 to cgroup v2 has become a pivotal development. With cgroup v2 available in Kubernetes since v1.25, we're at a crossroads where many users and organizations must decide when and how to transition fully to this new system. Despite the benefits of cgroup v2, including better resource management and enhanced capabilities, users frequently encounter unexpected challenges signaling a gap in readiness and understanding. This talk will address the practical implications of moving to cgroup v2, discuss the coordinated efforts to deprecate cgroup v1, and propose actionable strategies to bridge the gap between the Kubernetes community, system administrators, and developers. By focusing on real-world experiences and providing clear guidance, this session aims to equip you with the knowledge and tools to navigate this significant change confidently.</article>","contentLength":1364,"flags":null,"enclosureUrl":"https://www.youtube.com/v/JWwwtW8Hbjs?version=3","enclosureMime":"","commentsUrl":null},{"title":"Lightning Talk: Minimizing Data Loss Within the OpenTelemetry (OTel) Collector - Alex Kats","url":"https://www.youtube.com/watch?v=xxRkfVXdy9E","date":1737837526,"author":"CNCF [Cloud Native Computing Foundation]","guid":349,"unread":true,"content":"<article>Don't miss out! Join us at our next Flagship Conference: KubeCon + CloudNativeCon Europe in London from April 1 - 4, 2025. Connect with our current graduated, incubating, and sandbox projects as the community gathers to further the education and advancement of cloud native computing. Learn more at https://kubecon.io\n\nLightning Talk: Minimizing Data Loss Within the OpenTelemetry (OTel) Collector - Alex Kats, Capital One\n\nThe OTel collector is meant to serve as a reliable and highly performant data pipeline. However, as a single component in a wider observability architecture, it is only as reliable as the downstream platforms/services it exports data to. The OTel collector has several built in mechanisms that aim to minimize the impact of unhealthy downstream exporters, including an out of the box sending queue with an additional configuration parameter for persistent queueing. There is a new component in the OTel contrib distribution, the Failover Connector. The Failover Connector allows for dynamic routing or “failover” of telemetry data based on downstream exporter health. This provides significant improvement to the data resiliency of the collector, as telemetry data can be continuously exported to a set of stable secondary locations, while the issues with the primary are resolved.</article>","contentLength":1309,"flags":null,"enclosureUrl":"https://www.youtube.com/v/xxRkfVXdy9E?version=3","enclosureMime":"","commentsUrl":null},{"title":"KubeSlice: Migrate Kubernetes Services With Confidence! | Project Lightning Talk","url":"https://www.youtube.com/watch?v=Xkl7EnILe-o","date":1737836485,"author":"CNCF [Cloud Native Computing Foundation]","guid":348,"unread":true,"content":"<article>Don't miss out! Join us at our next Flagship Conference: KubeCon + CloudNativeCon Europe in London from April 1 - 4, 2025. Connect with our current graduated, incubating, and sandbox projects as the community gathers to further the education and advancement of cloud native computing. Learn more at https://kubecon.io\n\nKubeSlice: Migrate Kubernetes Services With Confidence! | Project Lightning Talk\n\nSREs have been constantly asked to look for solutions to help them migrate K8S services from one Cloud cluster to another Cloud cluster while continuing to provide secure access to managed Cloud services left behind in the original Cloud.\n\nThe K8S services securely access these managed services using private endpoint FQDN. When SREs are asked to move the K8S services to a different Cloud cluster they hit a roadblock - there is no easy solution to provide private endpoint FQDN access to a managed service from a remote Cloud cluster.\n\nCNCF sandbox project KubeSlice solves this use case in an elegant way.\n\nKubeSlice enables SREs to create a Slice across clusters and slice overlay network connects services in the clusters. An external services gateway on the Slice in the original Cloud cluster will provide access to managed services via alias service FQDN import. Services in other clusters can reach the cloud service via the same private endpoint FQDN resolved by the Slice DNS.</article>","contentLength":1389,"flags":null,"enclosureUrl":"https://www.youtube.com/v/Xkl7EnILe-o?version=3","enclosureMime":"","commentsUrl":null},{"title":"Now You See Me: Tame MTTR with Real-Time Anomaly Dete... Kruthika Prasanna Simha & Prschita Prschita","url":"https://www.youtube.com/watch?v=Ipc0SOhB9OM","date":1737834180,"author":"CNCF [Cloud Native Computing Foundation]","guid":347,"unread":true,"content":"<article>Don't miss out! Join us at our next Flagship Conference: KubeCon + CloudNativeCon Europe in London from April 1 - 4, 2025. Connect with our current graduated, incubating, and sandbox projects as the community gathers to further the education and advancement of cloud native computing. Learn more at https://kubecon.io\n\nNow You See Me: Tame MTTR with Real-Time Anomaly Detection - Kruthika Prasanna Simha &amp; Prschita Prschita, Apple Inc.\n\nPicture this! You are running an application on a Kubernetes cluster &amp; you notice that your nodes have been restarting and your users are noticing that your application is unreachable. As an engineer, you want to identify these failures in real-time &amp; differentiate these from known states, at scale. But we know, static thresholds fail for dynamic metrics! This session explores real-time anomaly detection for cloud-native systems. We'll show you how to reduce MTTR and mean time to analyse by proactively identifying abnormal application behavior using statistical &amp; machine learning algorithms on time series data from Prometheus. Learn to pinpoint issues, identify missing instrumentation, and visualize anomalies using Grafana. This session equips you to achieve faster issue resolution and maintain optimal application health. We'll demo practical techniques for metrics selection, anomaly detection and proactive issue identification to manage your cloud-native applications.</article>","contentLength":1420,"flags":null,"enclosureUrl":"https://www.youtube.com/v/Ipc0SOhB9OM?version=3","enclosureMime":"","commentsUrl":null},{"title":"Every HTML Element","url":"https://iamwillwang.com/dollar/every-html-element/","date":1737831746,"author":"wxw","guid":220,"unread":true,"content":"<p>\nThere are over a hundred HTML elements. This page uses all of them.\n        You're looking at &lt;p&gt;&lt;/p&gt; right now.\n</p><hgroup><h2>Or smaller with &lt;h2&gt;&lt;/h2&gt;</h2><h6>\nAnd... nope that's it for headings. These are all in an &lt;hgroup&gt;&lt;/hgroup&gt; by the way.\n</h6></hgroup><pre>      Some text is &lt;pre&gt;&lt;/pre&gt;-formatted. Just a different look.\n    </pre><ul>\nWe can make a list with &lt;ul&gt;&lt;/ul&gt; </ul><ol>\nOr a numbered list with &lt;ol&gt;&lt;/ol&gt; </ol><dl>\nOr even a description list with &lt;dl&gt;&lt;/dl&gt;.\n<dd> and description definitions, &lt;dd&gt;&lt;/dd&gt;. </dd></dl><blockquote> &lt;blockquote&gt;&lt;/blockquote&gt; indents text. How credible!\n</blockquote><q>&lt;q&gt;&lt;/q&gt; is block's little brother.</q><figure>\nHere's a &lt;figure&gt;&lt;/figure&gt;... It usually contains some other media\n        (like an image).\n<img src=\"https://iamwillwang.com/_astro/figure.o8SCE8C_.png\" alt=\"figure\" width=\"363.3333333333333\" height=\"32.666666666666664\"><figcaption>\nand this &lt;figcaption&gt;&lt;/figcaption&gt; can then describe said media.\n</figcaption></figure>\nAnd we can take a break with &lt;hr /&gt;. \nWe \nget a lot  with text  with elements like\n&lt;strong&gt;&lt;/strong&gt;, &lt;em&gt;&lt;/em&gt;, and &lt;mark&gt;&lt;/mark&gt;.\n<p><s>&lt;s&gt;&lt;/s&gt; is for marking text as accurate</s>... err never mind\n</p><p> &lt;bdo&gt;&lt;/bdo&gt; </p><p>\nAh, now there's some breathing room, thanks to &lt;br /&gt;.\n</p><p><cite>You can &lt;cite&gt;&lt;/cite&gt; this website as Every HTML Element.</cite><code>And this whole thing is &lt;code&gt;&lt;/code&gt;,</code>\nliving on the .\n</p><time datetime=\"2025-01-23\">&lt;time&gt;&lt;/time&gt; too. It's 10:35 PM right now.</time> might all be in your head. Well, actually it's\n      in &lt;kbd&gt;.\n<p> is defined. And  is a &lt;var&gt;&lt;/var&gt;iable.\n</p><p>\nHow bout some hidden gems?\n</p><samp>Here's a taste of a &lt;samp&gt;&lt;/samp&gt;</samp><p>\nHere's an opportunity for a break &lt;wbr/&gt;.\n\nThe browser will decide when to take it.\n</p>\nAll this text... where does it live? Well we're inside the &lt;main&gt;&lt;/main&gt; &lt;body&gt;&lt;/body&gt;\nof an &lt;html&gt;&lt;/html&gt; document. There's a &lt;head&gt;&lt;/head&gt; here with us\n      too. The\n&lt;head&gt;&lt;/head&gt; thinks about things like &lt;link&gt;s to other things, &lt;meta&gt;data, our &lt;style&gt;&lt;/style&gt;, and our &lt;title&gt;&lt;/title&gt;.\n<section><article><p>\nBy this point, I think it's clear that HTML elements run the gamut\n            from content to container to logic to edge case. Some elements we\n            can see, others not so much. Some elements are meant to combine with\n            others. Some elements are only meant for your browser to read. Some\n            elements had good intentions but never picked up mainstream use.\n</p></article>\nThat concludes this section.\n</section><img src=\"https://iamwillwang.com/_astro/map.ZvQu5ZE9.png\" alt=\"figure\" usemap=\"#map\" width=\"600\"><div><p>\nSometimes it's more fun to listen than read. This is the sound of the\n          website being made.\n</p><p>In other words, media! Media everywhere.</p></div><table><tbody><tr><td>The root element of the page</td><td>Without this, you're not doing HTML.</td></tr><tr><td>Now that would've been fun.</td></tr><tr></tr></tbody><tfoot><tr><td colspan=\"4\">Disclaimer: No web standards were harmed in the making of this\n              table.</td></tr></tfoot></table>\nYou can interact with HTML beyond a form too!\n<p>\nThat concludes our journey! I lied a bit at the beginning. There are\n        more elements than this: experimental ones, deprecated ones, web\n        components, hydrogen, oxygen, and so on. Regardless, I hope this text\n        got you a little hyper because, mark my words, you're speaking a new\n        language now.\n</p>","contentLength":2752,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42823722"},{"title":"OpenRA – Classic strategy games rebuilt for the modern era","url":"https://www.openra.net/","date":1737831307,"author":"tosh","guid":219,"unread":true,"content":"<div><div><ul><li>Saboteurs can now cloak while moving</li><li>added delete area button to the map editor</li><li>improved Battlefield News dropdown</li><li>improved formatting of unit descriptions and encyclopedias</li><li>fixed Dune 2000 not detecting installed music and videos</li><li>fixed harvesters not always acting correctly with queued orders</li><li>fixed a bug where the game window could glitch out on Windows 10</li><li>and fixed a few other minor bugs</li></ul><p>Stay tuned for more updates and be sure to take part in the playtest. Don’t forget to share your feedback with us on <a href=\"https://forum.openra.net/\">our forum</a>, <a href=\"https://discord.openra.net\">community Discord server</a>, or <a href=\"https://github.com/OpenRA/OpenRA/issues\">GitHub</a>. Good luck on the battlefield, Commanders, and happy holidays!</p></div></div><p>Welcome back, Commanders!</p><p>After a whole year of development, the OpenRA team proudly presents <a href=\"https://www.openra.net/download\">Playtest 20241116</a>. This latest installment elevates your OpenRA experience with enhanced visuals, new tools and improved performance across the board.</p><p>Introducing the newly revamped Map Editor, designed with a modern interface and a cohesive design. We took notice of how players use the editor and reimagined it to better align with your creative needs.</p><p>New Map Editor features include:</p><ul></ul><p>We added an encyclopedia to the Tiberian Dawn mod! This feature was inspired by the community’s desire for an in-game resource to consolidate knowledge about units, structures, and technologies. While fan-made wikis have been invaluable, many have become outdated or inconsistent as the game evolves.</p><p>This latest release has significantly improved support for HD art assets. You should notice faster load times and overall performance improvements for the “Tiberian Dawn HD” project. It is packaged as a separate release and can be <a href=\"https://github.com/OpenRA/TiberianDawnHD/releases/tag/playtest-20241116\">downloaded here</a>. This preview is multiplayer-compatible with the main 20241116 playtest. The C&amp;C Remastered Collection must be installed through Steam or the EA App, and if using macOS or Linux, the project README provides <a href=\"https://github.com/OpenRA/TiberianDawnHD#asset-installation\">detailed installation instructions</a>.</p><p>Other notable changes include:</p><ul><li>game assets can now be installed from the Steam release of The Ultimate Collection</li><li>switched to high-quality Dune 2000 assets and included lots of extra visual polish</li><li>added two Red Alert missions and improved the quality of many others</li><li>Red Alert and Dune 2000 balance changes</li><li>skirmish options no longer reset between matches</li><li>behind the scenes we made significant progress towards supporting additional languages in future releases.</li></ul><p>As always, the <a href=\"https://github.com/OpenRA/OpenRA/wiki/Changelog/151b0777e7bdda9e672212acedfc0773f8312dc7\">full changelog</a> is available on GitHub if you would like to find out more.</p>","contentLength":2429,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42823667"},{"title":"DeepSeek-R1: Incentivizing Reasoning Capability in LLMs via RL","url":"https://arxiv.org/abs/2501.12948","date":1737830389,"author":"gradus_ad","guid":218,"unread":true,"content":"<!DOCTYPE html>","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42823568"},{"title":"CIA now favors lab leak theory to explain Covid's origins","url":"https://www.nytimes.com/2025/01/25/us/politics/cia-covid-lab-leak.html","date":1737828975,"author":"doctaj","guid":217,"unread":true,"content":"<div aria-live=\"polite\"><div>You have a preview view of this article while we are checking your access. When we have confirmed access, the full article content will load.</div></div><section name=\"articleBody\"><div data-testid=\"companionColumn-0\"><div><p>The C.I.A. has said for years that it did not have enough information to conclude whether the Covid pandemic emerged naturally from a wet market in Wuhan, China, or from an accidental leak at a research lab there.</p><p>But the agency issued a new assessment this week, with analysts saying they now favor the lab theory.</p><p>There is no new intelligence behind the agency’s shift, officials said. Rather it is based on the same evidence it has been chewing over for months.</p><p>The analysis, however, is based in part on a closer look at the conditions in the high security labs in Wuhan province before the pandemic outbreak, according to people familiar with the agency’s work.</p></div></div><div data-testid=\"companionColumn-1\"><div><p>A spokeswoman for the agency said the other theory remains plausible and that the agency will continue to evaluate any available credible new intelligence reporting.</p><p>Some American officials say the debate matters little: The Chinese government failed to either regulate its markets or oversee its labs. But others argue it is an important intelligence and scientific question.</p><div><div><div><div tabindex=\"-1\"><p>Thank you for your patience while we verify access. If you are in Reader mode please exit and&nbsp;<a href=\"https://myaccount.nytimes.com/auth/login?response_type=cookie&amp;client_id=vi&amp;redirect_uri=https%3A%2F%2Fwww.nytimes.com%2F2025%2F01%2F25%2Fus%2Fpolitics%2Fcia-covid-lab-leak.html&amp;asset=opttrunc\">log into</a>&nbsp;your Times account, or&nbsp;<a href=\"https://www.nytimes.com/subscription?campaignId=89WYR&amp;redirect_uri=https%3A%2F%2Fwww.nytimes.com%2F2025%2F01%2F25%2Fus%2Fpolitics%2Fcia-covid-lab-leak.html\">subscribe</a>&nbsp;for all of The Times.</p></div><div><div data-testid=\"optimistic-truncator-message\"><p>Thank you for your patience while we verify access.</p></div></div></div></div></div></div></div></section>","contentLength":1395,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42823385"},{"title":"The impact of competition and DeepSeek on Nvidia","url":"https://youtubetranscriptoptimizer.com/blog/05_the_short_case_for_nvda","date":1737819025,"author":"eigenvalue","guid":186,"unread":true,"content":"<p>As someone who spent ~10 years working as a generalist investment analyst at various long/short hedge funds (including stints at Millennium and Balyasny), while also being something of a math and computer nerd who has been studying deep learning since 2010 (back when Geoff Hinton was still talking about <a href=\"https://en.wikipedia.org/wiki/Restricted_Boltzmann_machine\">Restricted Boltzmann Machines</a> and everything was still programmed using <a href=\"https://en.wikipedia.org/wiki/MATLAB\">MATLAB</a>, and researchers were still trying to show that they could get better results at classifying handwritten digits than by using <a href=\"https://en.wikipedia.org/wiki/Support_vector_machine\">Support Vector Machines</a>), I'd like to think that I have a fairly unusual perspective on how AI technology is developing and how this relates to equity valuations in the stock market.</p><p>For the past few years, I have been working more as a developer, and have several popular open-source projects for working with various forms of AI models/services (e.g., see <a href=\"https://github.com/Dicklesworthstone/llm_aided_ocr\">LLM Aided OCR</a>, <a href=\"https://github.com/Dicklesworthstone/swiss_army_llama\">Swiss Army Llama</a>, <a href=\"https://github.com/Dicklesworthstone/fast_vector_similarity\">Fast Vector Similarity</a>, <a href=\"https://github.com/Dicklesworthstone/your-source-to-prompt.html\">Source to Prompt</a>, and <a href=\"https://github.com/pastelnetwork/python_inference_layer_server\">Pastel Inference Layer</a> for a few recent examples). Basically, I am using these frontier models all day, every day, in about as intense a way as possible. I have 3 Claude accounts so I don't run out of requests, and signed up for ChatGPT Pro within minutes of it being available.</p><p>I also try to keep on top of the latest research advances, and carefully read all the major technical report papers that come out from the major AI labs. So I think I have a pretty good read on the space and how things are developing. At the same time, I've shorted a ton of stocks in my life and have won the best idea prize on the Value Investors Club twice (for <a href=\"https://valueinvestorsclub.com/idea/TMS_INTERNATIONAL_CORP/5881178219\">TMS long</a> and <a href=\"https://valueinvestorsclub.com/idea/PETROLOGISTICS_LP/5967783148\">PDH short</a> if you're keeping track at home).</p><p>I say this not to brag, but rather to help establish my bona fides as someone who could opine on the subject without coming across as hopelessly naive to either technologists or professional investors. And while there are surely many people who know the math/science better, and people who are better at long/short investing in the stock market than me, I doubt there are very many who are in the middle of the Venn diagram to the extent I can claim to be.</p><p>With all that said, whenever I meet with and chat with my friends and ex colleagues from the hedge fund world, the conversation quickly turns to Nvidia. It's not every day that a company goes from relative obscurity to being worth more than the combined stock markets of England, France, or Germany! And naturally, these friends want to know my thoughts on the subject. Because I am such a dyed-in-the-wool believer in the long term transformative impact of this technology— I truly believe it's going to radically change nearly every aspect of our economy and society in the next 5-10 years, with basically no historical precedent— it has been hard for me to make the argument that Nvidia's momentum is going to slow down or stop anytime soon.</p><p>But even though I've thought the valuation was just too rich for my blood for the past year or so, a confluence of recent developments has caused me to flip a bit to my usual instinct, which is to be a bit more contrarian in outlook and to question the consensus when it seems to be more than priced in. The saying \"what the wise man believes in the beginning, the fool believes in the end\" became famous for a good reason.</p><p>Before we get into the developments that give me pause, let's pause to briefly review the bull case for NVDA shares, which is basically now known by everyone and his brother. Deep learning and AI are the most transformative technologies since the internet, and poised to change basically everything in our society. Nvidia has somehow ended up with something close to a monopoly in terms of the share of aggregate industry capex that is spent on training and inference infrastructure.</p><p>Some of the largest and most profitable companies in the world, like Microsoft, Apple, Amazon, Meta, Google, Oracle, etc., have all decided that they must do and spend whatever it takes to stay competitive in this space because they simply cannot afford to be left behind. The amount of capex dollars, gigawatts of electricity used, square footage of new-build data centers, and, of course, the number of GPUs, has absolutely exploded and seems to show no sign of slowing down. And Nvidia is able to earn insanely high 90%+ gross margins on the most high-end, datacenter oriented products.</p><p>We've just scratched the surface here of the bull case. There are many additional aspects to it now, which have made even people who were already very bullish to become incrementally more bullish. Besides things like the rise of humanoid robots, which I suspect is going to take most people by surprise when they are rapidly able to perform a huge number of tasks that currently require an unskilled (or even skilled) human worker (e.g., doing laundry, cleaning, organizing, and cooking; doing construction work like renovating a bathroom or building a house in a team of workers; running a warehouse and driving forklifts, etc.), there are other factors which most people haven't even considered.</p><p>One major thing that you hear the smart crowd talking about is the rise of \"a new scaling law,\" which has created a new paradigm thinking about how compute needs will increase over time. The original scaling law, which is what has been driving progress in AI since <a href=\"https://en.wikipedia.org/wiki/AlexNet\">AlexNet</a> appeared in 2012 and the Transformer architecture was invented in 2017, is the pre-training scaling law: that the more billions (and now trillions) worth of tokens we can use as training data, and the larger the parameter count of the models we are training, and the more FLOPS of compute that we expend on training those models on those tokens, the better the performance of the resulting models on a large variety of highly useful downstream tasks.</p><p>Not only that, but this improvement is somewhat knowable, to the point where the leading AI labs like OpenAI and Anthropic have a pretty good idea of just how good their latest models would be even before they started the actual training runs— in some cases, predicting the benchmarks of the final models to within a couple percentage points. This \"original scaling law\" has been vitally important, but always caused some doubts in the minds of people projecting the future with it.</p><p>For one thing, we seem to have already exhausted the world's accumulated set of high quality training data. Of course, that's not literally true— there are still so many old books and periodicals that haven't yet been properly digitized, and even if they have, are not properly licensed for use as training data. The problem is that, even if you give credit for all that stuff— say the sum total of \"professionally\" produced English language written content from the year 1500 to, say, the year 2000, it's not such a tremendous amount in percentage terms when you're talking about a training corpus of nearly 15 trillion tokens, which is the scale of current frontier models.</p><p>For a quick reality check of those numbers: Google Books has digitized around 40mm books so far; if a typical book has 50k to 100k words, or 65k to 130k tokens, then that's between 2.6T and 5.2T tokens just from books, though surely a large chunk of that is already included in the training corpora used by the big labs, whether it's strictly legal or not. And there are lots of academic papers, with the arXiv website alone having over 2mm papers. And the Library of Congress has over 3 billion digitized newspaper pages. Taken together, that could be as much as 7T tokens in total, but since much of this is in fact included in training corpora, the remaining \"incremental\" training data probably isn't all that significant in the grand scheme of things.</p><p>Of course, there are other ways to gather more training data. You could automatically transcribe every single YouTube video for example, and use that text. And while that might be helpful on the margin, it's certainly of much lower quality than, say, a highly respected textbook on Organic Chemistry as a source of useful knowledge about the world. So we've always had a looming \"data wall\" when it comes to the original scaling law; although we know we can keep shoveling more and more capex into GPUs and building more and more data centers, it's a lot harder to mass produce useful new human knowledge which is correct and incremental to what is already out there. Now, one intriguing response to this has been the rise of \"synthetic data,\" which is text that is itself the output of an LLM. And while this seems almost nonsensical that it would work to \"get high on your own supply\" as a way of improving model quality, it actually seems to work very well in practice, at least in the domain of math, logic, and computer programming.</p><p>The reason, of course, is that these are areas where we can mechanically check and prove the correctness of things. So we can sample from the vast universe of possible math theorems or possible Python scripts, and then actually check if they are correct, and only include them in our corpus if they are. And in this way, we can very dramatically expand our collection of high quality training data, at least in these kinds of areas.</p><p>And then there are all the other kinds of data we could be training AI on besides text. For example, what if we take the entire whole genome sequencing (around 200 GB to 300 GB uncompressed for a single human being) for 100 million people? That's a  of data obviously, although the vast majority of it would be nearly identical between any two people. Of course, this could be misleading to compare to textual data from books and the internet for various reasons:</p><ul><li>Raw genome size isn't directly comparable to token counts</li><li>The information content of genomic data is very different from text</li><li>The training value of highly redundant data isn't clear</li><li>The computational requirements for processing genomic data are different</li></ul><p>But it's still another large source of diverse information that we could train huge models on in the future, which is why I included it.</p><p>So while there is some hope in terms of being able to capture more and more additional training data, if you look at the rate at which training corpora have grown in recent years, it quickly becomes obvious that we are close to hitting a wall in terms of data availability for \"generally useful\" knowledge that can get us closer to the ultimate goal of getting artificial super-intelligence which is 10x smarter than John von Neumann and is an absolute world-class expert on every specialty known to man.</p><p>Besides the limited amount of available data, there have always been a couple other things that have lurked in the back of the mind of proponents of the pre-training scaling law. A big one of these is, after you've finished training the model, what are you supposed to do with all that compute infrastructure? Train the next model? Sure, you can do that, but given the rapid improvement in GPU speed and capacity, and the importance of electricity and other opex in the economic calculations, does it even really make sense to use your 2 year old cluster to train your new model? Surely you'd rather use the brand new data center you just built that costs 10x the old data center and is 20x more powerful because of better technology. The problem is, at some point you do need to amortize the up-front cost of these investments and recoup it with a stream of (hopefully positive) operating profit, right?</p><p>The market is so excited about AI that it has thankfully ignored this, allowing companies like OpenAI to post breathtaking from-inception, cumulative operating losses while garnering increasingly eye-popping valuations in follow-up investment rounds (although, to their credit, they have also been able to demonstrate very fast growing revenues). But eventually, for this situation to be sustainable over a full market cycle, these data center costs do need to eventually be recouped, hopefully with a profit, which over time is competitive with other investment opportunities on a risk-adjusted basis.</p><p>OK, so that was the pre-training scaling law. What's this \"new\" scaling law? Well, that's something that people really just started focusing on in the past year: inference time compute scaling. Before, the vast majority of all the compute you'd expend in the process was the up-front training compute to create the model in the first place. Once you had the trained model, performing inference on that model— i.e., asking a question or having the LLM perform some kind of task for you— used a certain, limited amount of compute.</p><p>Critically, the total amount of inference compute (measured in various ways, such as FLOPS, in GPU memory footprint, etc.) was much, much less than what was required for the pre-training phase. Of course, the amount of inference compute does flex up when you increase the context window size of the models and the amount of output that you generate from them in one go (although researchers have made breathtaking algorithmic improvements on this front relative to the initial quadratic scaling people originally expected in scaling this up). But essentially, until recently, inference compute was generally a lot less intensive than training compute, and scaled basically linearly with the number of requests you are handling— the more demand for text completions from ChatGPT, for instance, the more inference compute you used up.</p><p>With the advent of the revolutionary Chain-of-Thought (\"COT\") models introduced in the past year, most noticeably in OpenAI's flagship O1 model (but very recently in DeepSeek's new R1 model, which we will talk about later in much more detail), all that changed. Instead of the amount of inference compute being directly proportional to the length of the output text generated by the model (scaling up for larger context windows, model size, etc.), these new COT models also generate intermediate \"logic tokens\"; think of this as a sort of scratchpad or \"internal monologue\" of the model while it's trying to solve your problem or complete its assigned task.</p><p>This represents a true sea change in how inference compute works: now, the more tokens you use for this internal chain of thought process, the better the quality of the final output you can provide the user. In effect, it's like giving a human worker more time and resources to accomplish a task, so they can double and triple check their work, do the same basic task in multiple different ways and verify that they come out the same way; take the result they came up with and \"plug it in\" to the formula to check that it actually does solve the equation, etc.</p><p>It turns out that this approach works almost amazingly well; it is essentially leveraging the long anticipated power of what is called \"reinforcement learning\" with the power of the Transformer architecture. It directly addresses the single biggest weakness of the otherwise phenomenally successful Transformer model, which is its propensity to \"hallucinate\".</p><p>Basically, the way Transformers work in terms of predicting the next token at each step is that, if they start out on a bad \"path\" in their initial response, they become almost like a prevaricating child who tries to spin a yarn about why they are actually correct, even if they should have realized mid-stream using common sense that what they are saying couldn't possibly be correct.</p><p>Because the models are always seeking to be internally consistent and to have each successive generated token flow naturally from the preceding tokens and context, it's very hard for them to course-correct and backtrack. By breaking the inference process into what is effectively many intermediate stages, they can try lots of different things and see what's working and keep trying to course-correct and try other approaches until they can reach a fairly high threshold of confidence that they aren't talking nonsense.</p><p>Perhaps the most extraordinary thing about this approach, beyond the fact that it works at all, is that the more logic/COT tokens you use, the better it works. Suddenly, you now have an additional dial you can turn so that, as you increase the amount of COT reasoning tokens (which uses a lot more inference compute, both in terms of FLOPS and memory), the higher the probability is that you will give a correct response— code that runs the first time without errors, or a solution to a logic problem without an obviously wrong deductive step.</p><p>I can tell you from a lot of firsthand experience that, as good as Anthropic's Claude3.5 Sonnet model is at Python programming— and it is indeed VERY good— whenever you need to generate anything long and complicated, it invariably ends up making one or more stupid mistakes. Now, these mistakes are usually pretty easy to fix, and in fact you can normally fix them by simply feeding the errors generated by the Python interpreter, without any further explanation, as a follow-up inference prompt (or, more usefully, paste in the complete set of detected \"problems\" found in the code by your code editor, using what something called a Linter), it was still an annoying additional step. And when the code becomes very long or very complicated, it can sometimes take a lot longer to fix, and might even require some manual debugging by hand.</p><p>The first time I tried the O1 model from OpenAI was like a revelation: I was amazed how often the code would be perfect the very first time. And that's because the COT process automatically finds and fixes problems before they ever make it to a final response token in the answer the model gives you.</p><p>In fact, the O1 model used in OpenAI's ChatGPT Plus subscription for $20/month is basically the same model as the one used in the O1-Pro model featured in their new ChatGPT Pro subscription for 10x the price ($200/month, which raised plenty of eyebrows in the developer community); the main difference is that O1-Pro thinks for a lot longer before responding, generating vastly more COT logic tokens, and consuming a far larger amount of inference compute for every response.</p><p>This is quite striking in that, even a very long and complex prompt for Claude3.5 Sonnet or GPT4o, with ~400kb+ of context given, generally takes less than 10 seconds to begin responding, and often less than 5 seconds. Whereas that same prompt to O1-Pro could easily take 5+ MINUTES before you get a response (although OpenAI does show you some of the \"reasoning steps\" that are generated during the process while you wait; critically, OpenAI has decided, presumably for trade secret related reasons,to hide from you the exact reasoning tokens it generates, showing you instead a highly abbreviated summary of these).</p><p>As you can probably imagine, there are tons of contexts where accuracy is paramount— where you'd rather give up and tell the user you can't do it at all rather than give an answer that could be trivially proven wrong or which involves hallucinated facts or otherwise specious reasoning. Anything involving money/transactions, medical stuff, legal stuff, just to name a few.</p><p>Basically, wherever the cost of inference is trivial relative to the hourly all-in compensation of the human knowledge worker who is interacting with the AI system, that's a case where it become a complete no-brainer to dial up the COT compute (the major drawback is that it increases the latency of responses by a lot, so there are still some contexts where you might prefer to iterate faster by getting lower latency responses that are less accurate or correct).</p><p>Some of the most exciting news in the AI world came out just a few weeks ago and concerned OpenAI's new unreleased O3 model, which was able to solve a large variety of tasks that were previously deemed to be out of reach of current AI approaches in the near term. And the way it was able to do these hardest problems (which include exceptionally tough \"foundational\" math problems that would be very hard for even highly skilled professional mathematicians to solve), is that OpenAI threw insane amount of compute resources at the problems— in some cases, spending $3k+ worth of compute power to solve a single task (compare this to traditional inference costs for a single task, which would be unlikely to exceed a couple dollars using regular Transformer models without chain-of-thought).</p><p>It doesn't take an AI genius to realize that this development creates a new scaling law that is totally independent of the original pre-training scaling law. Now, you still want to train the best model you can by cleverly leveraging as much compute as you can and as many trillion tokens of high quality training data as possible, but that's just the beginning of the story in this new world; now, you could easily use incredibly huge amounts of compute just to do inference from these models at a very high level of confidence or when trying to solve extremely tough problems that require \"genius level\" reasoning to avoid all the potential pitfalls that would lead a regular LLM astray.</p><h2>But Why Should Nvidia Get to Capture All The Upside?</h2><p>Even if you believe, as I do, that the future prospects for AI are almost unimaginably bright, the question still remains, \"Why should one company extract the majority of the profit pool from this technology?\" There are certainly many historical cases where a very important new technology changed the world, but the main winners were not the companies that seemed the most promising during the initial stages of the process. The Wright Brothers' airplane company in all its current incarnations across many different firms today isn't worth more than $10b despite them inventing and perfecting the technology well ahead of everyone else. And while Ford has a respectable market cap of $40b today, it's just 1.1% of Nvidia's current market cap.</p><p>To understand this, it's important to really understand why Nvidia is currently capturing so much of the pie today. After all, they aren't the only company that even makes GPUs. AMD makes respectable GPUs that, on paper, have comparable numbers of transistors, which are made using similar process nodes, etc. Sure, they aren't as fast or as advanced as Nvidia's GPUs, but it's not like the Nvidia GPUs are 10x faster or anything like that. In fact, in terms of naive/raw dollars per FLOP, AMD GPUs are something like half the price of Nvidia GPUs.</p><p>Looking at other semiconductor markets such as the DRAM market, despite the fact that it is also very highly consolidated with only 3 meaningful global players (Samsung, Micron, SK-Hynix), gross margins in the DRAM market range from negative at the bottom of the cycle to ~60% at the very top of the cycle, with an average in the 20% range. Compare that to Nvidia's overall gross margin in recent quarters of ~75%, which is dragged down by the lower-margin and more commoditized consumer 3D graphics category.</p><p>So how is this possible? Well, the main reasons have to do with software— better drivers that \"just work\" on Linux and which are highly battle-tested and reliable (unlike AMD, which is notorious for the low quality and instability of their Linux drivers), and highly optimized open-source code in popular libraries such as <a href=\"https://en.wikipedia.org/wiki/PyTorch\">PyTorch</a> that has been tuned to work really well on Nvidia GPUs.</p><p>It goes beyond that though— the very programming framework that coders use to write low-level code that is optimized for GPUs, CUDA, is totally proprietary to Nvidia, and it has become a de facto standard. If you want to hire a bunch of extremely talented programmers who know how to make things go really fast on GPUs, and pay them $650k/year or whatever the going rate is for people with that particular expertise, chances are that they are going to \"think\" and work in CUDA.</p><p>Besides software superiority, the other major thing that Nvidia has going for it is what is known as interconnect— essentially, the bandwidth that connects together thousands of GPUs together efficiently so they can be jointly harnessed to train today's leading-edge foundational models. In short, the key to efficient training is to keep all the GPUs as fully utilized as possible all the time— not waiting around idling until they receive the next chunk of data they need to compute the next step of the training process.</p><p>The bandwidth requirements are extremely high— much, much higher than the typical bandwidth that is needed in traditional data center use cases. You can't really use traditional networking gear or fiber optics for this kind of interconnect, since it would introduce too much latency and wouldn't give you the pure terabytes per second of bandwidth that is needed to keep all the GPUs constantly busy.</p><p>Nvidia made an incredibly smart decision to purchase the Israeli company Mellanox back in 2019 for a mere $6.9b, and this acquisition is what provided them with their industry leading interconnect technology. Note that interconnect speed is a lot more relevant to the training process, where you have to harness together the output of thousands of GPUs at the same time, than the inference process (including COT inference), which can use just a handful of GPUs— all you need is enough VRAM to store the quantized (compressed) model weights of the already-trained model.</p><p>So those are arguably the major components of Nvidia's \"moat\" and how it has been able to maintain such high margins for so long (there is also a \"flywheel\" aspect to things, where they aggressively invest their super-normal profits into tons of R&amp;D, which in turn helps them improve their tech at a faster rate than the competition, so they are always in the lead in terms of raw performance).</p><p>But as was pointed out earlier, what customers really tend to care about, all other things being equal, is performance per dollar (both in up-front capex cost of equipment and in energy usage, so performance per watt), and even though Nvidia's GPUs are certainly the fastest, they are not the best price/performance when measured naively in terms of FLOPS.</p><p>But the thing is, all other things are NOT equal, and the fact that AMD's drivers suck, that popular AI software libraries don't run as well on AMD GPUs, that you can't find really good GPU experts who specialize in AMD GPUs outside of the gaming world (why would they bother when there is more demand in the market for CUDA experts?), that you can't wire thousands of them together as effectively because of lousy interconnect technology for AMD— all this means that AMD is basically not competitive in the high-end data center world, and doesn't seem to have very good prospects for getting there in the near term.</p><p>Well, that all sounds very bullish for Nvidia, right? Now you can see why the stock is trading at such a huge valuation! But what are the other clouds on the horizon? Well, there are few that I think merit significant attention. Some have been lurking in the background for the last few years, but too small to make a dent considering how quickly the pie has been growing, but where they are getting ready to potentially inflect upwards. Others are very recent developments (as in, the last 2 weeks) that might dramatically change the near-term trajectory of incremental GPU demand.</p><p>At a very high level, you can think of things like this: Nvidia operated in a pretty niche area for a very long time; they had very limited competition, and the competition wasn't particular profitable or growing fast enough to ever pose a real threat, since they didn't have the capital needed to really apply pressure to a market leader like Nvidia. The gaming market was large and growing, but didn't feature earth shattering margins or particularly fabulous year over year growth rates.</p><p>A few big tech companies started ramping up hiring and spending on machine learning and AI efforts around 2016-2017, but it was never a truly significant line item for any of them on an aggregate basis— more of a \"moonshot\" R&amp;D expenditure. But once the big AI race started in earnest with the release of ChatGPT in 2022— only a bit over 2 years ago, although it seems like a lifetime ago in terms of developments— that situation changed very dramatically.</p><p>Suddenly, big companies were ready to spend many, many billions of dollars incredibly quickly. The number of researchers showing up at the big research conferences like <a href=\"https://papers.nips.cc/\">Neurips</a> and <a href=\"https://icml.cc/\">ICML</a> went up very, very dramatically. All the smart students who might have previously studied financial derivatives were instead studying Transformers, and $1mm+ compensation packages for non-executive engineering roles (i.e., for independent contributors not managing a team) became the norm at the leading AI labs.</p><p>It takes a while to change the direction of a massive cruise ship; and even if you move really quickly and spend billions, it takes a year or more to build greenfield data centers and order all the equipment (with ballooning lead times) and get it all set up and working. It takes a long time to hire and onboard even smart coders before they can really hit their stride and familiarize themselves with the existing codebases and infrastructure.</p><p>But now, you can imagine that absolutely biblical amounts of capital, brainpower, and effort are being expended in this area. And Nvidia has the biggest target of any player on their back, because they are the ones who are making the lion's share of the profits TODAY, not in some hypothetical future where the AI runs our whole lives.</p><p>So the very high level takeaway is basically that \"markets find a way\"; they find alternative, radically innovative new approaches to building hardware that leverage completely new ideas to sidestep barriers that help prop up Nvidia's moat.</p><h2>The Hardware Level Threat</h2><p>For example, so-called \"wafer scale\" AI training chips from Cerebras, which dedicate an entire 300mm silicon wafer to an absolutely gargantuan chip that contains orders of magnitude more transistors and cores on a single chip (see this recent <a href=\"https://cerebras.ai/blog/100x-defect-tolerance-how-cerebras-solved-the-yield-problem\">blog post</a> from them explaining how they were able to solve the \"yield problem\" that had been preventing this approach from being economically practical in the past).</p><p>To put this into perspective, if you compare Cerebras' newest WSE-3 chip to Nvidia's flagship data-center GPU, the H100, the Cerebras chip has a total die area of 46,225 square millimeters compared to just 814 for the H100 (and the H100 is itself considered an enormous chip by industry standards); that's a multiple of ~57x! And instead of having 132 \"streaming multiprocessor\" cores enabled on the chip like the H100 has, the Cerebras chip has ~900,000 cores (granted, each of these cores is smaller and does a lot less, but it's still an almost unfathomably large number in comparison). In more concrete apples-to-apples terms, the Cerebras chip can do around ~32x the FLOPS in AI contexts as a single H100 chip. Since an H100 sells for close to $40k a pop, you can imagine that the WSE-3 chip isn't cheap.</p><p>So why does this all matter? Well, instead of trying to battle Nvidia head-on by using a similar approach and trying to match the Mellanox interconnect technology, Cerebras has used a radically innovative approach to do an end-run around the interconnect problem: inter-processor bandwidth becomes much less of an issue when everything is running on the same super-sized chip. You don't even need to have the same level of interconnect because one mega chip replaces tons of H100s.</p><p>And the Cerebras chips also work extremely well for AI inference tasks. In fact, you can try it today for free <a href=\"https://cloud.cerebras.ai/\">here</a> and use Meta's very respectable Llama-3.3-70B model. It responds basically instantaneously, at ~1,500 tokens per second. To put that into perspective, anything above 30 tokens per second feels relatively snappy to users based on comparisons to ChatGPT and Claude, and even 10 tokens per second is fast enough that you can basically read the response while it's being generated.</p><p>Cerebras is also not alone; there are other companies, like Groq (not to be confused with the <a href=\"https://x.ai/\">Grok</a> model family trained by Elon Musk's X AI). Groq has taken yet another innovative approach to solving the same fundamental problem. Instead of trying to compete with Nvidia's CUDA software stack directly, they've developed what they call a \"tensor processing unit\" (TPU) that is specifically designed for the exact mathematical operations that deep learning models need to perform. Their chips are designed around a concept called \"deterministic compute,\" which means that, unlike traditional GPUs where the exact timing of operations can vary, their chips execute operations in a completely predictable way every single time.</p><p>This might sound like a minor technical detail, but it actually makes a massive difference for both chip design and software development. Because the timing is completely deterministic, Groq can optimize their chips in ways that would be impossible with traditional GPU architectures. As a result, they've been demonstrating for the past 6+ months inference speeds of over 500 tokens per second with the Llama series of models and other open source models, far exceeding what's possible with traditional GPU setups. Like Cerebras, this is available today and you can try it for free <a href=\"https://console.groq.com/playground\">here</a>.</p><p>Using a comparable Llama3 model with \"speculative decoding,\" Groq is able to generate 1,320 tokens per second, on par with Cerebras and far in excess of what is possible using regular GPUs. Now, you might ask what the point is of achieving 1,000+ tokens per second when users seem pretty satisfied with ChatGPT, which is operating at less than 10% of that speed. And the thing is, it does matter. It makes it a lot faster to iterate and not lose focus as a human knowledge worker when you get instant feedback. And if you're using the model programmatically via the API, which is increasingly where much of the demand is coming from, then it can enable whole new classes of applications that require multi-stage inference (where the output of previous stages is used as input in successive stages of prompting/inference) or which require low-latency responses, such as content moderation, fraud detection, dynamic pricing, etc.</p><p>But even more fundamentally, the faster you can serve requests, the faster you can cycle things, and the busier you can keep the hardware. Although Groq's hardware is extremely expensive, clocking in at $2mm to $3mm for a single server, it ends up costing far less per request fulfilled if you have enough demand to keep the hardware busy all the time.</p><p>And like Nvidia with CUDA, a huge part of Groq's advantage comes from their own proprietary software stack. They are able to take the same open source models that other companies like Meta, DeepSeek, and Mistral develop and release for free, and decompose them in special ways that allow them to run dramatically faster on their specific hardware.</p><p>Like Cerebras, they have taken different technical decisions to optimize certain particular aspects of the process, which allows them to do things in a fundamentally different way. In Groq's case, it's because they are entirely focused on inference level compute, not on training: all their special sauce hardware and software only give these huge speed and efficiency advantages when doing inference on an already trained model.</p><p>But if the next big scaling law that people are excited about is for inference level compute— and if the biggest drawback of COT models is the high latency introduced by having to generate all those intermediate logic tokens before they can respond— then even a company that only does inference compute, but which does it dramatically faster and more efficiently than Nvidia can— can introduce a serious competitive threat in the coming years. At the very least, Cerebras and Groq can chip away at the lofty expectations for Nvidia's revenue growth over the next 2-3 years that are embedded in the current equity valuation.</p><p>Besides these particularly innovative, if relatively unknown, startup competitors, there is some serious competition coming from some of Nvidia's biggest customers themselves who have been making custom silicon that specifically targets AI training and inference workloads. Perhaps the best known of these is Google, which has been developing its own proprietary TPUs since 2016. Interestingly, although it briefly sold TPUs to external customers, Google has been using all its TPUs internally for the past several years, and it is already on its <a href=\"https://cloud.google.com/blog/products/compute/introducing-trillium-6th-gen-tpus\">6th generation</a> of TPU hardware.</p><p>Amazon has also been developing its own custom chips called <a href=\"https://press.aboutamazon.com/2023/11/aws-unveils-next-generation-aws-designed-chips\">Trainium2</a> and <a href=\"https://aws.amazon.com/ai/machine-learning/inferentia/\">Inferentia2</a>. And while Amazon is building out data centers featuring billions of dollars of Nvidia GPUs, they are also at the same time investing many billions in other data centers that use these internal chips. They have one cluster that they are bringing online for Anthropic that features over 400k chips.</p><p>Amazon gets a lot of flak for totally bungling their internal AI model development, squandering massive amounts of internal compute resources on models that ultimately are not competitive, but the custom silicon is another matter. Again, they don't necessarily need their chips to be better and faster than Nvidia's. What they need is for their chips to be good enough, but build them at a breakeven gross margin instead of the ~90%+ gross margin that Nvidia earns on its H100 business.</p><p>OpenAI has also announced their <a href=\"https://www.theregister.com/2024/09/04/openai_ai_chips_tsmc/\">plans</a> to build custom chips, and they (together with Microsoft) are obviously the single largest user of Nvidia's data center hardware. As if that weren't enough, Microsoft have themselves announced their <a href=\"https://azure.microsoft.com/en-us/blog/azure-maia-for-the-era-of-ai-from-silicon-to-software-to-systems/\">own</a> custom chips!</p><p>And Apple, the most valuable technology company in the world, has been blowing away expectations for years now with their highly innovative and disruptive custom silicon operation, which now completely trounces the CPUs from both Intel and AMD in terms of performance per watt, which is the most important factor in mobile (phone/tablet/laptop) applications. And they have been making their own internally designed GPUs and \"Neural Processors\" for years, even though they have yet to really demonstrate the utility of such chips outside of their own custom applications, like the advanced software based image processing used in the iPhone's camera.</p><p>While Apple's focus seems somewhat orthogonal to these other players in terms of its mobile-first, consumer oriented, \"edge compute\" focus, if it ends up spending enough money on its new contract with OpenAI to provide AI services to iPhone users, you have to imagine that they have teams looking into making their own custom silicon for inference/training (although given their secrecy, you might never even know about it directly!).</p><p>Now, it's no secret that there is a strong power law distribution of Nvidia's hyper-scaler customer base, with the top handful of customers representing the lion's share of high-margin revenue. How should one think about the future of this business when literally every single one of these VIP customers is building their own custom chips specifically for AI training and inference?</p><p>When thinking about all this, you should keep one incredibly important thing in mind: Nvidia is largely an IP based company. They don't make their own chips. The true special sauce for making these incredible devices arguably comes more from TSMC, the actual fab, and ASML, which makes the special EUV lithography machines used by TSMC to make these leading-edge process node chips. And that's critically important, because TSMC will sell their most advanced chips to anyone who comes to them with enough up-front investment and is willing to guarantee a certain amount of volume. They don't care if it's for Bitcoin mining ASICs, GPUs, TPUs, mobile phone SoCs, etc.</p><p>As much as senior chip designers at Nvidia earn per year, surely some of the best of them could be lured away by these other tech behemoths for enough cash and stock. And once they have a team and resources, they can design innovative chips (again, perhaps not even 50% as advanced as an H100, but with that Nvidia gross margin, there is plenty of room to work with) in 2 to 3 years, and thanks for TSMC, they can turn those into actual silicon using the exact same process node technology as Nvidia.</p><p>As if these looming hardware threats weren't bad enough, there are a few developments in the software world in the last couple years that, while they started out slowly, are now picking up real steam and could pose a serious threat to the software dominance of Nvidia's CUDA. The first of these is the horrible Linux drivers for AMD GPUs. Remember we talked about how AMD has inexplicably allowed these drivers to suck for years despite leaving massive amounts of money on the table?</p><p>Well, amusingly enough, the infamous hacker George Hotz (famous for jailbreaking the original iphone as a teenager, and currently the CEO of self-driving startup Comma.ai and AI computer company Tiny Corp, which also makes the open-source tinygrad AI software framework), recently announced that he was sick and tired of dealing with AMD's bad drivers, and desperately wanted to be able to to leverage the lower cost AMD GPUs in their TinyBox AI computers (which come in multiple flavors, some of which use Nvidia GPUs, and some of which use AMD GPUS).</p><p>Well, he is making his own custom drivers and software stack for AMD GPUs without any help from AMD themselves; on Jan. 15th of 2025, he <a href=\"https://x.com/__tinygrad__/status/1879615316378198516\">tweeted</a> via his company's X account that <em>\"We are one piece away from a completely sovereign stack on AMD, the RDNA3 assembler. We have our own driver, runtime, libraries, and emulator. (all in ~12,000 lines!)\"</em> Given his track record and skills, it is likely that they will have this all working in the next couple months, and this would allow for a lot of exciting possibilities of using AMD GPUs for all sorts of applications where companies currently feel compelled to pay up for Nvidia GPUs.</p><p>OK, well that's just a driver for AMD, and it's not even done yet. What else is there? Well, there are a few other areas on the software side that are a lot more impactful. For one, there is now a massive concerted effort across many large tech companies and the open source software community at large to make more generic AI software frameworks that have CUDA as just one of many \"compilation targets\".</p><p>That is, you write your software using higher-level abstractions, and the system itself can automatically turn those high-level constructs into super well-tuned low-level code that works extremely well on CUDA. But because it's done at this higher level of abstraction, it can just as easily get compiled into low-level code that works extremely well on lots of other GPUs and TPUs from a variety of providers, such as the massive number of custom chips in the pipeline from every big tech company.</p><p>The most famous examples of these frameworks are MLX (sponsored primarily by Apple), Triton (sponsored primarily by OpenAI), and JAX (developed by Google). MLX is particularly interesting because it provides a PyTorch-like API that can run efficiently on Apple Silicon, showing how these abstraction layers can enable AI workloads to run on completely different architectures. Triton, meanwhile, has become increasingly popular as it allows developers to write high-performance code that can be compiled to run on various hardware targets without having to understand the low-level details of each platform.</p><p>These frameworks allow developers to write their code once using high powered abstractions and then target tons of platforms automatically— doesn't that sound like a better way to do things, which would give you a lot more flexibility in terms of how you actually run the code?</p><p>In the 1980s, all the most popular, best selling software was written in hand-tuned assembly language. The PKZIP compression utility for example was hand crafted to maximize speed, to the point where a competently coded version written in the standard C programming language and compiled using the best available optimizing compilers at the time, would run at probably half the speed of the hand-tuned assembly code. The same is true for other popular software packages like WordStar, VisiCalc, and so on.</p><p>Over time, compilers kept getting better and better, and every time the CPU architectures changed (say, from Intel releasing the 486, then the Pentium, and so on), that hand-rolled assembler would often have to be thrown out and rewritten, something that only the smartest coders were capable of (sort of like how CUDA experts are on a different level in the job market versus a \"regular\" software developer). Eventually, things converged so that the speed benefits of hand-rolled assembly were outweighed dramatically by the flexibility of being able to write code in a high-level language like C or C++, where you rely on the compiler to make things run really optimally on the given CPU.</p><p>Nowadays, very little new code is written in assembly. I believe a similar transformation will end up happening for AI training and inference code, for similar reasons: computers are good at optimization, and flexibility and speed of development is increasingly the more important factor— especially if it also allows you to save dramatically on your hardware bill because you don't need to keep paying the \"CUDA tax\" that gives Nvidia 90%+ margins.</p><p>Yet another area where you might see things change dramatically is that CUDA might very well end up being more of a high level abstraction itself— a \"specification language\" similar to <a href=\"https://en.wikipedia.org/wiki/Verilog\">Verilog</a> (used as the industry standard to describe chip layouts) that skilled developers can use to describe high-level algorithms that involve massive parallelism (since they are already familiar with it, it's very well constructed, it's the lingua franca, etc.), but then instead of having that code compiled for use on Nvidia GPUs like you would normally do, it can instead be fed as source code into an LLM which can port it into whatever low-level code is understood by the new Cerebras chip, or the new Amazon Trainium2, or the new Google TPUv6, etc. This isn't as far off as you might think; it's probably already well within reach using OpenAI's latest O3 model, and surely will be possible generally within a year or two.</p><p>Perhaps the most shocking development which was alluded to earlier happened in the last couple of weeks. And that is the news that has totally rocked the AI world, and which has been dominating the discourse among knowledgeable people on Twitter despite its complete absence from any of the mainstream media outlets: that a small Chinese startup called DeepSeek released two new models that have basically world-competitive performance levels on par with the best models from OpenAI and Anthropic (blowing past the Meta Llama3 models and other smaller open source model players such as Mistral). These models are called <a href=\"https://api-docs.deepseek.com/news/news1226\">DeepSeek-V3</a> (basically their answer to GPT-4o and Claude3.5 Sonnet) and <a href=\"https://api-docs.deepseek.com/news/news250120\">DeepSeek-R1</a> (basically their answer to OpenAI's O1 model).</p><p>Why is this all so shocking? Well, first of all, DeepSeek is a tiny Chinese company that reportedly has under 200 employees. The story goes that they started out as a quant trading hedge fund similar to TwoSigma or RenTec, but after Xi Jinping cracked down on that space, they used their math and engineering chops to pivot into AI research. Who knows if any of that is really true or if they are merely some kind of front for the CCP or the Chinese military. But the fact remains that they have released two incredibly detailed technical reports, for <a href=\"https://github.com/deepseek-ai/DeepSeek-V3/blob/main/DeepSeek_V3.pdf\">DeepSeek-V3</a> and <a href=\"https://github.com/deepseek-ai/DeepSeek-R1/blob/main/DeepSeek_R1.pdf\">DeepSeekR1</a>.</p><p>These are heavy technical reports, and if you don't know a lot of linear algebra, you probably won't understand much. But what you should really try is to download the free DeepSeek app on the AppStore <a href=\"https://apps.apple.com/us/app/deepseek-ai-assistant/id6737597349\">here</a> and install it using a Google account to log in and give it a try (you can also install it on Android <a href=\"https://play.google.com/store/apps/details?id=com.deepseek.chat&amp;hl=en_US&amp;pli=1\">here</a>), or simply try it out on your desktop computer in the browser <a href=\"https://chat.deepseek.com/\">here</a>. Make sure to select the \"DeepThink\" option to enable chain-of-thought (the R1 model) and ask it to explain parts of the technical reports in simple terms.</p><p>This will simultaneously show you a few important things:</p><ul><li><p>One, this model is absolutely legit. There is a lot of BS that goes on with AI benchmarks, which are routinely gamed so that models appear to perform great on the benchmarks but then suck in real world tests. Google is certainly the worst offender in this regard, constantly crowing about how amazing their LLMs are, when they are so awful in any real world test that they can't even reliably accomplish the simplest possible tasks, let alone challenging coding tasks. These DeepSeek models are not like that— the responses are coherent, compelling, and absolutely on the same level as those from OpenAI and Anthropic.</p></li><li><p>Two, that DeepSeek has made profound advancements not just in model quality, but more importantly in model training and inference efficiency. By being extremely close to the hardware and by layering together a handful of distinct, very clever optimizations, DeepSeek was able to train these incredible models using GPUs in a dramatically more efficient way. By some measurements, over ~45x more efficiently than other leading-edge models. DeepSeek claims that the complete cost to train DeepSeek-V3 was just over $5mm. That is absolutely nothing by the standards of OpenAI, Anthropic, etc., which were well into the $100mm+ level for training costs for a single model as early as 2024.</p></li></ul><p>How in the world could this be possible? How could this little Chinese company completely upstage all the smartest minds at our leading AI labs, which have 100 times more resources, headcount, payroll, capital, GPUs, etc? Wasn't China supposed to be crippled by Biden's restriction on GPU exports? Well, the details are fairly technical, but we can at least describe them at a high level. It might have just turned out that the relative GPU processing poverty of DeepSeek was the critical ingredient to make them more creative and clever, necessity being the mother of invention and all.</p><p>A major innovation is their sophisticated mixed-precision training framework that lets them use 8-bit floating point numbers (FP8) throughout the entire training process. Most Western AI labs train using \"full precision\" 32-bit numbers (this basically specifies the number of gradations possible in describing the output of an artificial neuron; 8 bits in FP8 lets you store a much wider range of numbers than you might expect— it's not just limited to 256 different equal-sized magnitudes like you'd get with regular integers, but instead uses clever math tricks to store both very small and very large numbers— though naturally with less precision than you'd get with 32 bits.) The main tradeoff is that while FP32 can store numbers with incredible precision across an enormous range, FP8 sacrifices some of that precision to save memory and boost performance, while still maintaining enough accuracy for many AI workloads.</p><p>DeepSeek cracked this problem by developing a clever system that breaks numbers into small tiles for activations and blocks for weights, and strategically uses high-precision calculations at key points in the network. Unlike other labs that train in high precision and then compress later (losing some quality in the process), DeepSeek's native FP8 approach means they get the massive memory savings without compromising performance. When you're training across thousands of GPUs, this dramatic reduction in memory requirements per GPU translates into needing far fewer GPUs overall.</p><p>Another major breakthrough is their multi-token prediction system. Most Transformer based LLM models do inference by predicting the next token— one token at a time. DeepSeek figured out how to predict multiple tokens while maintaining the quality you'd get from single-token prediction. Their approach achieves about 85-90% accuracy on these additional token predictions, which effectively doubles inference speed without sacrificing much quality. The clever part is they maintain the complete causal chain of predictions, so the model isn't just guessing— it's making structured, contextual predictions.</p><p>One of their most innovative developments is what they call Multi-head Latent Attention (MLA). This is a breakthrough in how they handle what are called the Key-Value indices, which are basically how individual tokens are represented in the attention mechanism within the Transformer architecture. Although this is getting a bit too advanced in technical terms, suffice it to say that these KV indices are some of the major uses of VRAM during the training and inference process, and part of the reason why you need to use thousands of GPUs at the same time to train these models— each GPU has a maximum of 96 gb of VRAM, and these indices eat that memory up for breakfast.</p><p>Their MLA system finds a way to store a compressed version of these indices that captures the essential information while using far less memory. The brilliant part is this compression is built directly into how the model learns— it's not some separate step they need to do, it's built directly into the end-to-end training pipeline. This means that the entire mechanism is \"differentiable\" and able to be trained directly using the standard optimizers. All this stuff works because these models are ultimately finding much lower-dimensional representations of the underlying data than the so-called \"ambient dimensions\". So it's wasteful to store the full KV indices, even though that is basically what everyone else does.</p><p>Not only do you end up wasting tons of space by storing way more numbers than you need, which gives a massive boost to the training memory footprint and efficiency (again, slashing the number of GPUs you need to train a world class model), but it can actually end up improving model quality because it can act like a \"regularizer,\" forcing the model to pay attention to the truly important stuff instead of using the wasted capacity to fit to noise in the training data. So not only do you save a ton of memory, but the model might even perform better. At the very least, you don't get a massive hit to performance in exchange for the huge memory savings, which is generally the kind of tradeoff you are faced with in AI training.</p><p>They also made major advances in GPU communication efficiency through their DualPipe algorithm and custom communication kernels. This system intelligently overlaps computation and communication, carefully balancing GPU resources between these tasks. They only need about 20 of their GPUs' streaming multiprocessors (SMs) for communication, leaving the rest free for computation. The result is much higher GPU utilization than typical training setups achieve.</p><p>Another very smart thing they did is to use what is known as a Mixture-of-Experts (MOE) Transformer architecture, but with key innovations around load balancing. As you might know, the size or capacity of an AI model is often measured in terms of the number of parameters the model contains. A parameter is just a number that stores some attribute of the model; either the \"weight\" or importance a particular artificial neuron has relative to another one, or the importance of a particular token depending on its context (in the \"attention mechanism\"), etc.</p><p>Meta's latest Llama3 models come in a few sizes, for example: a 1 billion parameter version (the smallest), a 70B parameter model (the most commonly deployed one), and even a massive 405B parameter model. This largest model is of limited utility for most users because you would need to have tens of thousands of dollars worth of GPUs in your computer just to run at tolerable speeds for inference, at least if you deployed it in the naive full-precision version. Therefore most of the real-world usage and excitement surrounding these open source models is at the 8B parameter or highly quantized 70B parameter level, since that's what can fit in a consumer-grade Nvidia 4090 GPU, which you can buy now for under $1,000.</p><p>So why does any of this matter? Well, in a sense, the parameter count and precision tells you something about how much raw information or data the model has stored internally. Note that I'm not talking about reasoning ability, or the model's \"IQ\" if you will: it turns out that models with even surprisingly modest parameter counts can show remarkable cognitive performance when it comes to solving complex logic problems, proving theorems in plane geometry, SAT math problems, etc.</p><p>But those small models aren't going to be able to necessarily tell you every aspect of every plot twist in every single novel by Stendhal, whereas the really big models can potentially do that. The \"cost\" of that extreme level of knowledge is that the models become very unwieldy both to train and to do inference on, because you always need to store every single one of those 405B parameters (or whatever the parameter count is) in the GPU's VRAM at the same time in order to do any inference with the model.</p><p>The beauty of the MOE model approach is that you can decompose the big model into a collection of smaller models that each know different, non-overlapping (at least fully) pieces of knowledge. DeepSeek's innovation here was developing what they call an \"auxiliary-loss-free\" load balancing strategy that maintains efficient expert utilization without the usual performance degradation that comes from load balancing. Then, depending on the nature of the inference request, you can intelligently route the inference to the \"expert\" models within that collection of smaller models that are most able to answer that question or solve that task.</p><p>You can loosely think of it as being a committee of experts who have their own specialized knowledge domains: one might be a legal expert, the other a computer science expert, the other a business strategy expert. So if a question comes in about linear algebra, you don't give it to the legal expert. This is of course a very loose analogy and it doesn't actually work like this in practice.</p><p>The real advantage of this approach is that it allows the model to contain a huge amount of knowledge without being very unwieldy, because even though the aggregate number of parameters is high across all the experts, only a small subset of these parameters is \"active\" at any given time, which means that you only need to store this small subset of weights in VRAM in order to do inference. In the case of DeepSeek-V3, they have an absolutely massive MOE model with <a href=\"https://x.com/eliebakouch/status/1872304368462004608\">671B parameters</a>, so it's much bigger than even the largest Llama3 model, but only 37B of these parameters are active at any given time— enough to fit in the VRAM of two consumer-grade Nvidia 4090 GPUs (under $2,000 total cost), rather than requiring one or more H100 GPUs which cost something like $40k each.</p><p>It's rumored that both ChatGPT and Claude use an MoE architecture, with some leaks suggesting that GPT-4 had a total of 1.8 trillion parameters split across 8 models containing 220 billion parameters each. Despite that being a lot more doable than trying to fit all 1.8 trillion parameters in VRAM, it still requires multiple H100-grade GPUs just to run the model because of the massive amount of memory used.</p><p>Beyond what has already been described, the technical papers mention several other key optimizations. These include their extremely memory-efficient training framework that avoids tensor parallelism, recomputes certain operations during backpropagation instead of storing them, and shares parameters between the main model and auxiliary prediction modules. The sum total of all these innovations, when layered together, has led to the ~45x efficiency improvement numbers that have been tossed around online, and I am perfectly willing to believe these are in the right ballpark.</p><p>One very strong indicator that it's true is the cost of DeepSeek's API: despite this nearly best-in-class model performance, DeepSeek charges something like <a href=\"https://x.com/ai_for_success/status/1881371370120216618\">95% less money</a> for inference requests via its API than comparable models from OpenAI and Anthropic. In a sense, it's sort of like comparing Nvidia's GPUs to the new custom chips from competitors: even if they aren't quite as good, the value for money is so much better that it can still be a no-brainer depending on the application, as long as you can qualify the performance level and prove that it's good enough for your requirements and the API availability and latency is good enough (thus far, people have been <a href=\"https://x.com/VictorTaelin/status/1873876097794007545\">amazed</a> at how <a href=\"https://x.com/artificialguybr/status/1882979975692984373\">well</a> DeepSeek's infrastructure has held up despite the truly incredible surge of demand owing to the performance of these new models).</p><p>But unlike the case of Nvidia, where the cost differential is the result of them earning monopoly gross margins of 90%+ on their data-center products, the cost differential of the DeepSeek API relative to the OpenAI and Anthropic API could be simply that they are nearly 50x more compute efficient (it might even be significantly more than that on the inference side— the ~45x efficiency was on the training side). Indeed, it's not even clear that OpenAI and Anthropic are making great margins on their API services— they might be more interested in revenue growth and gathering more data from analyzing all the API requests they receive.</p><p>Before moving on, I'd be remiss if I didn't mention that many people are speculating that DeepSeek is simply lying about the number of GPUs and GPU hours spent training these models because they actually possess far more H100s than they are supposed to have given the export restrictions on these cards, and they don't want to cause trouble for themselves or hurt their chances of acquiring more of these cards. While it's certainly possible, I think it's more likely that they are telling the truth, and that they have simply been able to achieve these incredible results by being extremely clever and creative in their approach to training and inference. They explain how they are doing things, and I suspect that it's only a matter of time before their results are widely replicated and confirmed by other researchers at various other labs.</p><h2>A Model That Can Really Think</h2><p>The newer R1 model and technical report might even be even more mind blowing, since they were able to beat Anthropic to Chain-of-thought and now are basically the only ones besides OpenAI who have made this technology work at scale. But note that the O1 preview model was only released by OpenAI in mid-September of 2024. That's only ~4 months ago! Something you absolutely must keep in mind is that, unlike OpenAI, which is incredibly secretive about how these models really work at a low level, and won't release the actual model weights to anyone besides partners like Microsoft and other who sign heavy-duty NDAs, these DeepSeek models are both completely open-source and permissively licensed. They have released extremely detailed technical reports explaining how they work, as well as the code that anyone can look at and try to copy.</p><p>With R1, DeepSeek essentially cracked one of the holy grails of AI: getting models to reason step-by-step without relying on massive supervised datasets. Their DeepSeek-R1-Zero experiment showed something remarkable: using pure reinforcement learning with carefully crafted reward functions, they managed to get models to develop sophisticated reasoning capabilities completely autonomously. This wasn't just about solving problems— the model organically learned to generate long chains of thought, self-verify its work, and allocate more computation time to harder problems.</p><p>The technical breakthrough here was their novel approach to reward modeling. Rather than using complex neural reward models that can lead to \"reward hacking\" (where the model finds bogus ways to boost their rewards that don't actually lead to better real-world model performance), they developed a clever rule-based system that combines accuracy rewards (verifying final answers) with format rewards (encouraging structured thinking). This simpler approach turned out to be more robust and scalable than the process-based reward models that others have tried.</p><p>What's particularly fascinating is that during training, they observed what they called an \"aha moment,\" a phase where the model spontaneously learned to revise its thinking process mid-stream when encountering uncertainty. This emergent behavior wasn't explicitly programmed; it arose naturally from the interaction between the model and the reinforcement learning environment. The model would literally stop itself, flag potential issues in its reasoning, and restart with a different approach, all without being explicitly trained to do this.</p><p>The full R1 model built on these insights by introducing what they call \"cold-start\" data— a small set of high-quality examples— before applying their RL techniques. They also solved one of the major challenges in reasoning models: language consistency. Previous attempts at chain-of-thought reasoning often resulted in models mixing languages or producing incoherent outputs. DeepSeek solved this through a clever language consistency reward during RL training, trading off a small performance hit for much more readable and consistent outputs.</p><p>The results are mind-boggling: on AIME 2024, one of the most challenging high school math competitions, R1 achieved 79.8% accuracy, matching OpenAI's O1 model. On MATH-500, it hit 97.3%, and it achieved the 96.3 percentile on Codeforces programming competitions. But perhaps most impressively, they managed to distill these capabilities down to much smaller models: their 14B parameter version outperforms many models several times its size, suggesting that reasoning ability isn't just about raw parameter count but about how you train the model to process information.</p><p>The recent <a href=\"https://x.com/orikron/status/1882503121320214777\">scuttlebutt</a> on Twitter and Blind (a corporate rumor website) is that these models caught Meta completely off guard and that they perform better than the new Llama4 models which are still being trained. Apparently, the Llama project within Meta has attracted a lot of attention internally from high-ranking technical executives, and as a result they have something like 13 individuals working on the Llama stuff who each individually earn more per year in total compensation than the combined training cost for the DeepSeek-V3 models which outperform it. How do you explain that to Zuck with a straight face? How does Zuck keep smiling while shoveling multiple billions of dollars to Nvidia to buy 100k H100s when a better model was trained using just 2k H100s for a bit over $5mm?</p><p>But you better believe that Meta and every other big AI lab is taking these DeepSeek models apart, studying every word in those technical reports and every line of the open source code they released, trying desperately to integrate these same tricks and optimizations into their own training and inference pipelines. So what's the impact of all that? Well, naively it sort of seems like the aggregate demand for training and inference compute should be divided by some big number. Maybe not by 45, but maybe by 25 or even 30? Because whatever you thought you needed before these model releases, it's now a lot less.</p><p>Now, an optimist might say \"You are talking about a mere constant of proportionality, a single multiple. When you're dealing with an exponential growth curve, that stuff gets washed out so quickly that it doesn't end up matter all that much.\" And there is some truth to that: if AI really is as transformational as I expect, if the real-world utility of this tech is measured in the trillions, if inference-time compute is the new scaling law of the land, if we are going to have armies of humanoid robots running around doing massive amounts of inference constantly, then maybe the growth curve is still so steep and extreme, and Nvidia has a big enough lead, that it will still work out.</p><p>But Nvidia is pricing in a LOT of good news in the coming years for that valuation to make sense, and when you start layering all these things together into a total mosaic, it starts to make me at least feel extremely uneasy about spending ~20x the 2025 estimated sales for their shares. What happens if you even see a slight moderation in sales growth? What if it turns out to be 85% instead of over 100%? What if gross margins come in a bit from 75% to 70%— still ridiculously high for a semiconductor company?</p><p>At a high level, NVIDIA faces an unprecedented convergence of competitive threats that make its premium valuation increasingly difficult to justify at 20x forward sales and 75% gross margins. The company's supposed moats in hardware, software, and efficiency are all showing concerning cracks. The whole world— thousands of the smartest people on the planet, backed by untold billions of dollars of capital resources— are trying to assail them from every angle.</p><p>On the hardware front, innovative architectures from Cerebras and Groq demonstrate that NVIDIA's interconnect advantage— a cornerstone of its data center dominance— can be circumvented through radical redesigns. Cerebras' wafer-scale chips and Groq's deterministic compute approach deliver compelling performance without needing NVIDIA's complex interconnect solutions. More traditionally, every major NVIDIA customer (Google, Amazon, Microsoft, Meta, Apple) is developing custom silicon that could chip away at high-margin data center revenue. These aren't experimental projects anymore— Amazon alone is building out massive infrastructure with over 400,000 custom chips for Anthropic.</p><p>The software moat appears equally vulnerable. New high-level frameworks like MLX, Triton, and JAX are abstracting away CUDA's importance, while efforts to improve AMD drivers could unlock much cheaper hardware alternatives. The trend toward higher-level abstractions mirrors how assembly language gave way to C/C++, suggesting CUDA's dominance may be more temporary than assumed. Most importantly, we're seeing the emergence of LLM-powered code translation that could automatically port CUDA code to run on any hardware target, potentially eliminating one of NVIDIA's strongest lock-in effects.</p><p>Perhaps most devastating is DeepSeek's recent efficiency breakthrough, achieving comparable model performance at approximately 1/45th the compute cost. This suggests the entire industry has been massively over-provisioning compute resources. Combined with the emergence of more efficient inference architectures through chain-of-thought models, the aggregate demand for compute could be significantly lower than current projections assume. The economics here are compelling: when DeepSeek can match GPT-4 level performance while charging 95% less for API calls, it suggests either NVIDIA's customers are burning cash unnecessarily or margins must come down dramatically.</p><p>The fact that TSMC will manufacture competitive chips for any well-funded customer puts a natural ceiling on NVIDIA's architectural advantages. But more fundamentally, history shows that markets eventually find a way around artificial bottlenecks that generate super-normal profits. When layered together, these threats suggest NVIDIA faces a much rockier path to maintaining its current growth trajectory and margins than its valuation implies. With five distinct vectors of attack— architectural innovation, customer vertical integration, software abstraction, efficiency breakthroughs, and manufacturing democratization— the probability that at least one succeeds in meaningfully impacting NVIDIA's margins or growth rate seems high. At current valuations, the market isn't pricing in any of these risks.</p><p>I hope you enjoyed reading this article. If you work at a hedge fund and are interested in consulting with me on NVDA or other AI-related stocks or investing themes, I'm already signed up as an expert on <a href=\"https://glginsights.com/\">GLG</a> and <a href=\"https://www.colemanrg.com/\">Coleman Research</a>.</p>","contentLength":71791,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42822162"},{"title":"Show HN: I built a DIY plane spotting system at home","url":"https://pilane.obviy.us/","date":1737810877,"author":"obviyus","guid":178,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42821457"}],"tags":["dev"]}