{"id":"KZgg6v3y1EHngSu15w9ddbD2SchD7Q","title":"Dev News - Last 2 days","displayTitle":"Dev News - Last 2 days","url":"","feedLink":"","isQuery":true,"isEmpty":false,"isHidden":false,"itemCount":62,"items":[{"title":"Lifelong Learning: 88+ Resources I Don't Regret as a Senior Software Engineer","url":"https://thetshaped.dev/p/lifelong-learning-88-plus-resources-i-do-not-regret-as-senior-software-engineer","date":1737954912,"author":"/u/pepincho","guid":502,"unread":true,"content":"<p>The Internet is flooded with content, materials, and resources.</p><p>Knowing the most useful newsletters, books, courses, creators, and tools is hard.</p><p>In this article, I want to share some incredible resources that I‚Äôve found valuable in my experience and day-to-day job.</p><p>Each resource on this list taught me something new and helped me learn and grow as an engineer.</p><p>As a Senior Software Engineer, I need to keep up with the industry trends, updates, libraries, tools, vulnerabilities, etc, so that I can apply this knowledge at my job.</p><p>Here are most of the newsletters I read every week.</p><p>I use these four newsletters to stay up-to-date with the Web and JavaScript world.</p><p><strong>I‚Äôd suggest avoiding reading all these newsletter at once because you‚Äôll feel overwhelmed.</strong></p><p>Depending on your current needs, priorities, and career aspirations, you might want to choose a few of them and come to the rest when needed.</p><p>Books are a great way to learn and grow as an individual.</p><p>We can learn from a lot of people even though they‚Äôre not in front of us.</p><p>We can learn from their mistakes and see what lessons they have learned.</p><p>However, I‚Äôve found that if I read a book and don‚Äôt apply my knowledge from it as soon as possible, the value from reading the book drops drastically.</p><p><strong>Think in advance how reading a particular book will help you in your day-to-day tasks, job, and personal life. If you can‚Äôt apply the knowledge immediately, postpone reading it.</strong></p><p>Each book has taught me something or sparked a new idea and way of thinking.</p><p>It‚Äôs not necessary to apply everything from each book but rather look for the things that most suits you at the moment and adapt them to your lifestyle.</p><p>A great mistake I made in the past was to try to apply everything on 100%.</p><p><strong>The true wisdom comes when you find the 10-20% of the book to apply at the moment.</strong></p><p>At each phase of our lives we need different things, so think twice before applying anything directly. Be conscious.</p><ul><li><p>Don‚Äôt try to read and follow everything at once.</p></li><li><p>Think in advance how reading a particular book will help you in your day-to-day tasks, job, and personal life.</p></li><li><p>If you can‚Äôt apply the knowledge immediately, postpone reading the book or newsletter.</p></li><li><p>As you might see, there‚Äôre no courses. My preferred way is to read and apply what I read immediately in my day-to-day job or side-projects.</p></li></ul><p>That's all for today. I hope this was helpful.</p><p>What are the 1-2 resources you‚Äôve found life changing? Share them in the comments üëÄ üëá</p><p>Become a better React Software Engineer. Join 17,400+ engineers who are improving their skills every week.</p><p>I share daily practical tips to level up your skills and become a better engineer.</p><p><em>Thank you for being a great supporter, reader, and for your help in growing to 17.6K+ subscribers this week üôè</em></p><p><em>You can also hit the like ‚ù§Ô∏è button at the bottom to help support me or share this with a friend. It helps me a lot! üôè</em></p>","contentLength":2890,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1ib0lvg/lifelong_learning_88_resources_i_dont_regret_as_a/"},{"title":"If OpenSSL were a GUI (2022)","url":"https://smallstep.com/blog/if-openssl-were-a-gui/","date":1737952480,"author":"tambourine_man","guid":218,"unread":true,"content":"<blockquote><p>\"When something exceeds your ability to understand how it works,\nit sort of becomes magical.\" - Jony Ive</p></blockquote><p>*This is incomplete. It covers about 80% of one corner of OpenSSL's functionality. The certificate policy options have a lot more knobs that I didn't include.</p><div><div><p>Carl Tashian (<a href=\"https://tashian.com\">Website</a>, <a href=\"https://www.linkedin.com/in/tashian/\">LinkedIn</a>) is an engineer, writer, exec coach, and startup all-rounder. He's currently an Offroad Engineer at Smallstep. He co-founded and built the engineering team at Trove, and he wrote the code that opens your Zipcar. He lives in San Francisco with his wife Siobhan and he loves to play the modular synthesizer üéõÔ∏èüéöÔ∏è</p></div></div>","contentLength":613,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42837462"},{"title":"Orbitiny Desktop Environment Released (Originally Announced as LQDE)","url":"https://www.reddit.com/r/linux/comments/1iayzwm/orbitiny_desktop_environment_released_originally/","date":1737949743,"author":"/u/sash-au","guid":423,"unread":true,"content":"<p>Finally, after about a month after the original announcement (LQDE), the  has been released.</p><p>Built from the ground up using  and coded in C++,  is a new, 100% portable, innovative and traditional but modern looking desktop environment for Linux.  because it has features <strong>not seen in any other desktop environment before</strong> while <strong>keeping traditional aspects of computing alive</strong> (desktop icons, menus etc).</p><p>Portable because you can run it on any distro and on any live CD and that's because everything gets saved inside the directory that gets created when the archive is extracted (this can be changed so that the settings go to $HOME/.config/orbitiny).</p><p>One of these innovative features is  but more on that later in this post.</p><p>It comes with its own set of utilities and applications. It has a device manager which can disable / enable devices by right-clicking the device and selecting  and all that <strong>without black-listing the whole kernel module</strong> so it targets the selected device only and nothing more.</p><p>It has its own <strong>fully featured and innovative file manager</strong>, a fully featured <strong>desktop panel with 18 plugins</strong> with <strong>full and natural Drag&amp;Drop</strong> support, a dedicated search utility, one integrated with the file manager while the other is a stand-alone one, a , <strong>hot-plug detection with desktop notifications</strong> and more.</p><p> is  a derivative of or based on any other project. It started with a blank / main window - the one that you'd create in Qt Creator when you start a new project.</p><p>So what is so special and innovative in ? I don't know where to start, here are some of the features that sets it apart from other DEs (I've probably missed some).</p><ul><li> - On the blank area of the desktop, draw a gesture pattern (like in a web browser) but on the desktop to perform an action, like for example, launch a custom command or use one of the built-in supported actions available to choose from. Up to 12 gestures are supported for both left and right mouse buttons, 12 per button + additional configurations for middle clicks. Gestures are drawn on the blank area of the desktop and they work regardless whether icons are turned off or on.</li><li> When a file is  or  to the clipboard, a little icon emblem with a \"cut\" or \"copy\" symbol is attached to the icon to indicate that the file is on the clipboard, either copied or cut. If the file is a directory, and contents of that directory change (like a file is created or deleted), an emblem is attached to let you know that the folder contents have changed.</li><li> - Drag a text file over another text file to add the contents of the dragged file to the target file.</li><li> - If there is ASCII content on the clipboard, right click the files and select \"\" and the content will be appended to the end of the file. Prepending is also available. If the selected file is a folder, the text content will be pasted into that folder and a file gets generated automatically. There is also image pasting. If the clipboard has an image, right click + paste will generate an image file.</li><li> - Select a set of folders on the desktop and click \"Paste\" and the content from theclipboard will be pasted <strong>to all of the selected folders</strong>. Text content will also be pasted automatically by generating a unique file name and a file (works with images too).</li><li><strong>Custom Desktop Directories</strong> - Choose any folder and use it as a desktop directory. It doesn't have to be .</li><li> - Each screen is a separate desktop so on one screen you can have one desktop with its own set of icons (by selecting a desktop directory of your choice) and on another screen, you can have another desktop with its own icon by selecting a different desktop folder. Of course, works with wallpapers too. So it's like two different computers running on two screens</li><li><strong>Beautiful and Non-Blocking Custom Context Menus</strong>. Non-blocking means your traditional shortcuts you have assigned in X11, will continue to work when a context menu is open, the shortcut won't get caught/blocked by it like it is the case with many other applications that use standard context menus. The context menus are custom made, not using the QMenu component.</li><li> - Select several folders, right click and select Open Terminal and a new terminal will open for all of the selected folders.</li><li><strong>Built-in Run Drop-down Box (Combo Box)</strong> in the context menus allows you to run a command against the selectedfiles (highly experimental and new).</li><li><strong>Multi Profile Support on the Panel</strong> - Right click the edge button on the panel and create a new profile or select one of the previously created ones to get a new configuration / sets of applets. You can switch between profiles like you switch different TV channels.</li><li><strong>Full Drag&amp;Support on the Panel</strong> - Drop any File/Folder from the Desktop or a File Manager or Drag and Re-arrange any applet, any icon on the panel. <strong>No special \"Edit Mode\" is required</strong>. Just grab the applet on the panel or a file from the desktop / file manager and drop it straight onto the panel and an icon for it gets created or the dragged one gets re-positioned. So to be clear: Launch Thunar, Nemo, Dolphin or whatever and drop any file / folder from it onto the panel, either on the Quick Launch or anywhere else and a file icon gets created. This, Drag&amp;Drop Support . The panel can be resized, and placed on any corner of the screen by dragging its handle or you can put it on the middle of the screen if you wish, or turn it into a dock with auto-resizing, or a deskbar that takes the width or the height of the screen. It's highly configurable. I use it as a deskbar as I am used to it.</li><li><strong>A Comprehensive Start Menu / Application Launcher</strong> applet and again with full Drag&amp;Drop support. You can re-arrange icons within the menu, from / in the menu, and there is designated area for a sidebar too on the menu which you can also attach / remove icons from and in to it.</li><li> - Perform custom actions on the selected files. Commands can be edited in the configuration file.</li><li> inside the right-click context menu.</li><li> - click any edge on the desktop to launch a dashboard window that shows you running tasks + installed applications. Search/Filter is available. At the moment, the running applications only work with X11.</li><li> - All the files needed to run along with the applications it comes with can be downloaded to a USB flash drive (or a folder) along with the settings so you can just take the whole folder with you and run it on any Linux computer and the settings will remain the same so the settings are also portable.</li><li> support. All the components mentioned here support both WINE and DOSBOX. This means, if you drop a Windows or DOS exe onto the panel and click on it to launch it or double click it from the file manager or the desktop, its path will be handed over to either WINE or DOSBOX to run it.</li><li> - Remember this? Well, if you double click on a MAFF file, it will extract it in the /tmp dir and launch it for you, same as if you are clicking an HTML file.</li><li> - Some of the panel applets such as the launcher applet, quick launch and the drawer menu along with its items allow you to add two commands per launcher. One for left-click and another one for middle-click.</li><li><strong>Multi-content Search Support in File Manager</strong> - The file manager supports searching for content inside files but it also gives you an option to search for an additional word on the same line the match is found.</li><li> - To increase / decrease the icon size, along the standard CTRL + Wheel to zoom in / out, you can also click and hold the right-hand mouse button and use the scroll wheel ‚Äì up/down.</li><li><strong>Double-Clicking a Blank Desktop Area</strong> Run a preset gesture or an individual command when the blank area of the desktop is clicked. Hold-Down Right-Hand Mouse Button and Double Click - Run a preset gesture or an individual command</li></ul><p>Right now, it serves more like a desktop shell because it doesn't have a session manager and other utilities such as a power manager, screensaver, screen config etc but if I get enough motivation, I intend to develop that too.</p><p>The application can run in  and  mode.</p><p>To run in portable mode, make sure a file named \".portable_mode\" (without the quotes) exists in </p><p> If running in , it will return the path to the folder/dir that contains all the files. if running in e, it will return </p><p> Returns the path to <strong>$BASE_DIR/shared directory</strong>.</p><pre><code> To make sure the package remains portable across live CDs and distros, save/download all yours files to the \"shared\" folder and then when assigning commands to launchers, do something like $SHARED_DIR/my_file </code></pre><p>To run in , make sure a file named \"\" (without the quotes) exists in .</p><ol><li>This desktop can be run on top of any other desktop, even GNOME, Elementary, KDE. When so, it draws its own desktop window, full screen covering the already running one. When run under iconless desktops, you will get icons (works on GNOME).</li><li>Right-click the Desktop and go to \"Environment &amp; Workspace Settings\" and then \"Appearance\" to adjust the content margins of the desktop. This is the left, top, right and bottom positions of where the icons start. It's in the \"Content Margins &amp; Spacing\" section. This should be adjusted according to where the existing panels are positioned such as the GNOME menu bar or any other panels on the sides of the screen.</li><li>Double-clicking the \"Linux System\" icon brings a \"Disks &amp; Partitions\" menu. This behaviour will remain until I implement a proper and fancy \"Computer\" window. I have most (but not all) of the code already.</li><li>Right-clicking \"Linux System\" brings up a menu with a set of system utilities whose paths need to be set in \"Environment &amp; Workspace Settings\"-&gt;\"Applications\". Except for the \"Device Manager\" which I already have working (most of it), the rest of the utilities need implementation but as a work-around, you can enter a path to an external utility.</li><li>Double-clicking the \"Disks &amp; Partitions\" icon brings up a different, perhaps fancier \"Disks &amp; Partitions\" menu so use the one you prefer. Right-clicking the \"Disks &amp; Partitions\" icon will bring the same \"Disk &amp; Partitions\" menu as the one that comes when double-clicking the \"Linux System\" icon.</li><li>I have pre-prepared an existing \"Custom Actions\" menu for you to look at. Take a look at the examples, I think you will get the gist but if you don't, then just email me / ask me. \"Right-click\"-&gt;\"Custom Actions\"-&gt;\"Edit Custom Actions\".</li><li>When holding the \"Alt\" key when double-clicking an icon, either on the desktop or the file manager or any of the panel applets that let you run commands, will force-run the command in a terminal window  there is a catch. This will NOT work if your window manager's accessibility key is set to \"Alt\". On my system, I have this accessibility key set to the Super key so it works fine. I will make this customizabe in the future.</li><li>You will need to right-click the \"Orbitiny\" applications menu on the panel and go to \"Commands\" to set log out, reboot and power off commands. These will need to be matched with the ones used by the exisitng session manager.I have done it like this because I don't have a session manager yet. My next primary goal is to develop a session-manager so that you can select the DE from your display manager and run it. Right now, you can set \"start-orbitiny\" as a start-up application in your existing desktop environment settings and when so, it will start automatically.</li><li>Wayland support, as far as I am aware, the window tasks and the systray are the only parts that don't work but it has not been tested fully. When testing, you should be testing it under the X11 display server rather than a Wayland compositor. Right now, I don't support any of the Wayland copmositors but I intend to add official Wayland support in the future.</li><li>By default, middle-clicking an empty area on the desktop will bring the fancy looking \"Disk &amp; Partitions\" menu. You can change this in \"Environment &amp; Workspace Settings\"-&gt;\"Advanced\"-&gt;\"Gestures\"-&gt;\"Middle Button Click\".</li><li>You can change gestures in \"Environment &amp; Workspace Settings\"-&gt;\"Advanced\"-&gt;\"Gestures\"</li><li>Some of the panel applets such as the launcher applet and the drawer menu along with its items allow you to add two commands per launcher. One for left-click and another one for middle-click.</li></ol><p>The code base is huge, some of it is very old and requires a re-write and some very new and I've most likely missed something and that would cause an error.</p><p>Please don't get upset/disappointed if you encounter an error or something that's annoying, just let me know and I will fix it.</p><p>Finally, if you are happy with what you see, please consider making a monetary donation. That would be very much appreciated and would motivate me to continue working on the project and release updates, add/improve features etc. Originally I built this DE for my personal use but I now decided to release it to the public.</p><p>bce30f77bcdc42bdc9633095e4b97327</p><p>Again, the code base is large and without a doubt something is broken so please report bugs / issues and I will try to fix it. Looking forward to your feedback.</p><p>Something I forgot to add about the panel.</p><ul><li>In some VMs, pressing and holding keyboard keys simultaneously do not behave as expected and as such it is not an issue with this panel. </li><li>Click on a panel handle or the edge button and move the bar to any of the 4 edges of the screen / monitor to dock the panel to that egde position of the screen. </li><li>Click on a panel handle and then while holding CTRL, drag horizontally to resize the bar. </li><li>Click on a panel handle and then while holding SHIFT, drag vertically to move the bar vertically. </li><li>Click on a panel handle and then while holding ALT, drag horizontally to move the bar horizontally. </li><li>Also, the Edge button at the end of the panel can act as a handle <a href=\"http://too.Click\">too.Click</a> on a panel handle and then while holding CTRL, press the Up/Down keys on your keyboard to move the bar vertically by an inch at a time. </li><li>Likewise, press the Left/Right keys on your keyboard to move the bar horizontally by an inch at a time. </li><li>Hover over the panel and use the mouse wheel to scroll the panel Contents (when scrolling is enabled). </li><li>Hover over the panel and then while holding CTRL, use the mouse wheel to resize the bar. </li><li>Double clicking a panel handle will run a command. You can edit the command in Preferences. </li><li>Middle clicking a panel handle will expand/collapse a panel. </li><li>To copy the content of a tooltip, click the tooltip icon on the right. </li><li>To stop this message from popping up, go to Preferences and uncheck \"Show Drag Handles Tooltips\" located in the \"Other\" tab. </li><li>To get to Preferences, right click the panel and select Preferences from the popup menu.</li></ul>","contentLength":14438,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Linux 6.14 To Switch From SHA1 To SHA512 For Module Signing By Default","url":"https://www.phoronix.com/news/Linux-6.14-Modules","date":1737946679,"author":"/u/unixbhaskar","guid":424,"unread":true,"content":"<p>Michael Larabel is the principal author of Phoronix.com and founded the site in 2004 with a focus on enriching the Linux hardware experience. Michael has written more than 20,000 articles covering the state of Linux hardware support, Linux performance, graphics drivers, and other topics. Michael is also the lead developer of the Phoronix Test Suite, Phoromatic, and OpenBenchmarking.org automated benchmarking software. He can be followed via <a href=\"https://twitter.com/MichaelLarabel\">Twitter</a>, <a href=\"https://www.linkedin.com/in/michaellarabel/\">LinkedIn</a>, or contacted via <a href=\"https://www.michaellarabel.com/\">MichaelLarabel.com</a>.</p>","contentLength":500,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/linux/comments/1iaxzp8/linux_614_to_switch_from_sha1_to_sha512_for/"},{"title":"Purelymail: Cheap, no-nonsense email","url":"https://purelymail.com/","date":1737945505,"author":"LorenDB","guid":217,"unread":true,"content":"<p>Let's get straight to the point:</p><ul><li>We host your email address.</li><li>We're IMAP and POP3 compatible, so we work with most mail apps.</li><ul><li>Or you can use our webmail, powered by <a href=\"https://roundcube.net/\" target=\"_blank\" rel=\"noopener\">Roundcube</a>.</li></ul><li>No arbitrary limits. Have as many users and store as much mail as you want.</li><li>Bring as many of your own domains as you want, or use one of ours. No extra charges.</li><li>It's cheap. Really, really cheap.</li></ul><p>Let's say you only need one email address, and have 3 GB of data to store. For one year of use, this will cost:</p><p>For most use cases, Purelymail is the cheapest option available.  if you need more than one user. All of the plans above charge per user, but we don't. Check out our <a href=\"https://purelymail.com/pricing\">pricing page</a> for more information. (For an in-depth explanation of this particular comparison, <a href=\"https://purelymail.com/pricingcomparisonindepth\" target=\"_blank\" rel=\"noopener\">see here.</a>)</p><p>What you get here is   mail. </p><p>We're not trying to bamboozle you with glossy images, or sell you a lofty ideal. If we have a gimmick, it's that we offer a known service at a low price. What you do with it is up to you.</p><h3>An honest list of drawbacks</h3><p>Based on our experience, here are our weak points:</p><ul><li>Occasionally, obscure email servers will block emails sent through us. Usually this can be resolved within a day or two.</li><li>We don't have a 24/7 support staff, although we do try to get back to any inquiries within a day.</li><li>Some features other providers have, such as calendar syncing, are not yet implemented.</li><li>We're not for sending any type of unsolicited or marketing emails (you should use a dedicated marketing platform anyway).</li><li>Our UI can be a little unpolished and unglamorous, if that bothers you.</li></ul><p>That means there might be a few hiccups along the way. If you run across any problems you can always <a href=\"https://purelymail.com/support\">let us know,</a> and we'll do our best to fix them.</p><p>If you're interested in Purelymail but want to wait until we're out of beta, check out <a href=\"https://purelymail.com/betamailinglist\">our mailing list.</a></p><b>What about security and reliability?</b><p>As for reliability, we're in beta, but our architecture has proven itself robust so far, our infrastructure runs on the highly reliable AWS cloud, and even if we do have an outage the email protocols are pretty forgiving. (See our <a href=\"https://news.purelymail.com/status.html\">status page</a> for our historical issues- there aren't that many.)</p><b>Do you sell user data or ads?</b><b>What features do you support?</b><h2>Still can't decide if we're right for you?</h2>","contentLength":2215,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42836818"},{"title":"Event driven restart of Pods?","url":"https://www.reddit.com/r/kubernetes/comments/1iax3fa/event_driven_restart_of_pods/","date":1737943849,"author":"/u/ButterscotchWeak1192","guid":384,"unread":true,"content":"<p>Context: we have a particular Pod which likes to hang, for unknown to us reasons and conditions (it's external software, we can't modify, and logs don't show anything).</p><p>The most accurate way to tell when it's happening is by checking a liveness probe. We have monitoring set up for particular URL and we can check for non 2xx status.</p><p>This chart we talk about deploys  Pod as well as  Pods. Each is separate Deployment.</p><p>The issue: when  Pod fails it's liveness probe, it gets restarted by k8s. But we also need to restart  nodes, because for some reason it looks like they lose connection in such way that they don't pick up work, and only restart helps. And  in this case .  Pod first, then .</p><p>Restart in case of liveness probe restarts only affected Pod. Currently, to restart workers too, I installed <a href=\"https://keda.sh/\">KEDA</a> in cluster and created <a href=\"https://keda.sh/docs/2.14/concepts/scaling-jobs/\">ScaleJob</a> object to trigger deployment restart. As trigger we use <code>kube_pod_container_status_restarts_total</code> Prometheus query:</p><pre><code>apiVersion: keda.sh/v1alpha1 kind: ScaledJob metadata: name: n8n-restart-job-scaler namespace: company spec: jobTargetRef: kind: Job name: n8n-worker-restart-job spec: jobTargetRef: template: spec: containers: - name: kubectl image: bitnami/kubectl:latest # imagePullPolicy: Always command: [\"/bin/sh\", \"-c\"] args: [\"kubectl rollout restart deployment n8n-worker -n company\"] backoffLimit: 4 pollingInterval: 15 # Check every 15 seconds (default: 30) successfulJobsHistoryLimit: 1 # How many completed jobs should be kept. failedJobsHistoryLimit: 1 # How many failed jobs should be kept. triggers: - type: prometheus metadata: serverAddress: https://&lt;DOMAIN&gt;.com/select/0/prometheus metricName: pod_liveness_failure threshold: \"1\" # Triggers when any liveness failure alert is active query: increase(kube_pod_container_status_restarts_total{pod=~\"^n8n-[^worker].*$\"}[1m]) &gt; 0 </code></pre><p>This kind of works. I mean it succesfully triggers restarts. But: - in current setup it triggers multiple restarts when there was only single liveness probe failure. This extends downtime<p> - depending on different settings for check time, there might be a slight delay between time of event, and time of triggering</p></p><p>I've been thinking about more event-driven workflow. So that when event in cluster happens, I can perform matching action. but I don't know what options would be most suitable for this task.</p><p>What do you suggest here? Maybe you've had such problem? How would you deal with it?</p><p>if something is unclear or I didn't provide something, ask below and I'll provide more info.</p>","contentLength":2504,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Marginalia ‚Äì A search engine that prioritizes non-commercial content","url":"https://marginalia-search.com/","date":1737941945,"author":"herbertl","guid":216,"unread":true,"content":"<!DOCTYPE html>","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42836405"},{"title":"Tips for detecting if our shell is running inside a virtual machine","url":"https://distrowatch.com/weekly.php?issue=20250127#qa","date":1737940161,"author":"/u/daemonpenguin","guid":421,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/linux/comments/1iavvtw/tips_for_detecting_if_our_shell_is_running_inside/"},{"title":"How do popular Rust UI libraries compare? Iced vs Slint vs Egui","url":"https://www.reddit.com/r/rust/comments/1iavpit/how_do_popular_rust_ui_libraries_compare_iced_vs/","date":1737939640,"author":"/u/nikitarevenco","guid":509,"unread":true,"content":"<div><p>For creating a desktop application, I've come across 3 libraries which I'm thinking of using:</p><p>Which one would you use and why? If you have another library in mind I would love to hear it. </p></div>   submitted by   <a href=\"https://www.reddit.com/user/nikitarevenco\"> /u/nikitarevenco </a>","contentLength":223,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Openhaystack: Build 'AirTags' ‚Äì track Bluetooth devices via Apple's network","url":"https://github.com/seemoo-lab/openhaystack","date":1737936687,"author":"thunderbong","guid":215,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42835772"},{"title":"How did you go about \"Writing an interpreter in Go\" (The book)","url":"https://www.reddit.com/r/golang/comments/1iau5os/how_did_you_go_about_writing_an_interpreter_in_go/","date":1737935210,"author":"/u/PeachKnight96","guid":376,"unread":true,"content":"<p>Did anyone here finish this book?</p><p>The author says we should follow along the book and type the code in our machine but I really don't understand this way of teaching. What am I learning if I only type this into my machine?</p>","contentLength":221,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Lessons in creating family photos that people want to keep (2018)","url":"https://estherschindler.medium.com/the-old-family-photos-project-lessons-in-creating-family-photos-that-people-want-to-keep-ea3909129943","date":1737933181,"author":"mooreds","guid":214,"unread":true,"content":"<p><em>As a consequence of scanning thousands of slides, I learned quite a bit about taking photos that capture a family‚Äôs life. Here‚Äôs a personal memoir, with a few lessons in taking memorable snapshots.</em></p><p>My father was an avid amateur photographer. He loved to take pictures, he invested in expensive cameras, and I‚Äôve plenty of vacation memories where he had one of those cameras in hand.</p><p>But organizing the slides afterwards? Labeling them? No way. Pop threw the boxes of slides in big piles and said, ‚ÄúI‚Äôll sort them after I retire.‚Äù And, in preparation for his retirement, he put all those slides into five huge boxes ‚Äî the kind you‚Äôd use to ship vinyl records.</p><p>Whereupon, three days after my father formally retired in 1988, he died in his sleep.</p><p>The slides stayed with my mother. When she moved into assisted living, the boxes went into my sister‚Äôs garage. After mom died, three years ago, they came to me. The result was a huge project of scanning family slides ‚Äî between 8,000 and 10,000 of them.</p><p>The primary goal was to save the photos before the media deteriorated beyond hope. It was too late in some cases. I remember Pop telling me how much cheaper Ektachrome was (compared to Kodachrome), but many of those images were as ghost-like as a half-remembered dream. Memories fade even faster. Is that a photo of my second cousin Charlotte? I‚Äôve no idea.</p><p>For those who want practical lessons, herein you will find two categories:</p><ul><li>How to go about a family photo archive project (or at least how I did it) and</li><li>Practical suggestions for taking photos that your family will treasure long after you‚Äôre gone.</li></ul><p>This was an oddly spiritual process. We take pictures of the moments we think are valuable or important. So, in the photos he took, I saw my father‚Äôs dreams, the things he thought were beautiful, his moments of pride. And in so doing, I gained more understanding of who my parents were. ‚Ä¶but I‚Äôll leave that essay to another time.</p><p>I have spoken with several people who have similar family photo archives, so let me begin by describing I went about the project.</p><p>Before I began, I had an inexpensive <a href=\"http://amzn.to/2BzhIkw\" rel=\"noopener ugc nofollow\" target=\"_blank\">Wolverine slide scanner</a> but I knew a manual unit would not cut it. I bought a heavy-duty slide scanner to help me process the images. It‚Äôs a <a href=\"http://amzn.to/2u4f8Ee\" rel=\"noopener ugc nofollow\" target=\"_blank\">Canon CanoScan 9000F</a>. I like it, in case you‚Äôre shopping for an affordable unit; in particular, I do not loathe the built-in software, which sets it apart from other scanners I‚Äôve used.</p><p>The project, which took me about a year, became a background process. I could scan a box of slides while I was reading my daily morning e-mail, then clean up and share the images during moments of down-time (such as waiting for poky websites to load site statistics). Over a weekend I usually could get through five or six boxes of slides.</p><p>Scanning a box of slides had several steps, each of which became a kind of emotional triage:</p><ul><li>I held up a slide (in front of a desk lamp) to identify it generally and decide if it was worth scanning. In other words: Do I care about this at all? Something out-of-focus easily could be thrown away. A picture of people I didn‚Äôt care about (e.g. someone my folks met on a bus tour and never spoke with again) could be dumped, too. It soon became obvious that I didn‚Äôt need to scan tourist photos; there are just-so-many pictures you need to see of the Tower of London (which looks the same today as it did in 1972 when my parents visited) or random sunsets over random mountains.</li><li>If the slide looked interesting, I did a fast preview scan. For instance, if my father took three pictures ‚Äújust to be sure‚Äù I could choose the best image; I could throw out the ones where my brother had his eyes closed. And I could eliminate the pictures that were inherently uninteresting, by which I mean it brought me no sense of nostalgia.</li><li>By the time I scanned an image, I was pretty committed to keeping it and sharing it with my siblings. Sometimes, if an image was entertaining or meaningful, I‚Äôd share it among my friends on Facebook.</li></ul><p>From a box of 24‚Äì36 slides, I usually shared about 8 with my brother and sisters. By the end of the project, I‚Äôd shared 2,800 images with my siblings, and a few hundred on Facebook.</p><p>I used iPhoto to clean up the images and sort them into a dedicated folder. While tools like PhotoShop certainly could do a better job (and were trotted out for a few special images), 98% were treated with iPhoto‚Äôs crop, straighten, and the ‚ÄúEnhance‚Äù button. I also added dates and locations to the images‚Äô metadata.</p><p>To share the images with my family, I uploaded photos to Flickr. Other photo sharing sites have far better user interfaces, but Flickr has two advantages: I can limit sharing to a set of people marked as friends-and-family, and viewers can comment on the images. Plus you can search images, if you‚Äôre smart enough to add tags as you go. (Do.)</p><p>Towards the end I also created private Facebook groups, which let me share with cousins as well as siblings, though its search capabilities are poor. It‚Äôs been useful for sharing those videos, though, and for encouraging conversations among my relatives.</p><p>For general sharing online, I created an Old Family Photos album on Facebook. iPhoto makes it easy to share to an album (though, alas, not to a private group). I‚Äôve been astonished by how many of my family‚Äôs history touches a chord. Don‚Äôt be shy; but do keep your family‚Äôs privacy sensitivities in mind when you share.</p><p>The earliest roll of slides was from my parents‚Äô engagement party circa 1941, followed by their honeymoon snapshots in 1942. Thousands of slides record their lives all the way through the 1980s, with a Family Circle gathering held only two months before my father‚Äôs death.</p><p>Inside the big boxes were two shoeboxes with a hundred 8mm video movies, which went back to the 1920s but mainly record 1950s camping trips. (<a href=\"https://www.imemories.com/\" rel=\"noopener ugc nofollow\" target=\"_blank\">iMemories</a> did a very good job at digitizing those.)</p><p>Most images are from family vacations and special occasions, rather than ‚Äúdaily life.‚Äù Earlier vacations (1950s and 1960s) are mostly camping trips; later pictures are from trips to Europe, particularly when money eased up after ‚Äúthe kids left home.‚Äù</p><p>But more is visible than the campsites and Boy Scout trips. I saw a young couple‚Äôs struggles to cope with three young children (I was an afterthought); I watched their idealism diminish and exhaustion set in.</p><p>I threw away many thousands of pictures. Some of them undoubtedly had meaning to my parents, but nobody alive cares about those photos. Yet I also came across special moments ‚Äî and none of us need to have ‚Äúbeen there‚Äù to appreciate them.</p><p>In reviewing thousands of slides, I learned quite a bit about taking photos that capture a family‚Äôs life. Perhaps these lessons can help you, too, in considering which images to snap ‚Äî on vacation or in daily life.</p><p><strong>Those ‚Äútitle slides‚Äù are meaningful after all</strong>. I remember rolling my eyes whenever my father would station me in front of a road sign or National Park entrance. Such pictures seemed really lame.</p><p>As I reviewed the pictures, though, the title slides were priceless. In all those years, my parents went to dozens of beaches, gardens, and campsites in random mountain ranges. Other than the date on the slide (‚ÄúSep 83‚Äù) I have no way to identify which one it is. (Occasionally, there‚Äôs a scribbled note, like, ‚ÄúExplorer Trip‚Äù or ‚ÄúLondon.‚Äù Um, thanks, Pop.)</p><p>So I was always glad when I found a photo of us kids standing next to a ‚ÄúMystic Seaport‚Äù sign or ‚ÄúUnderground tours‚Äù (always looking put-upon and sullen, because we were told to ‚ÄúStand up straight! And smile ‚Äî it might turn out good!‚Äù).</p><p>Labels matter. Even a few words helped me know when-and-where something happened: ‚Äú1955 Nova Scotia‚Äù or my grandfather‚Äôs name. One of the saddest experiences was looking at a family-gathering photo from the 50s with several people in it, and having no idea who‚Äôs in it. (Is that my great-aunt? Maybe my sister remembers? ‚Ä¶and too often she didn‚Äôt.) If you inherit the photos, take the time to identify the people in them. Even if it‚Äôs obvious to you that the picture is of cousin Janet who died in 1943, you can‚Äôt assume that the next viewer will know.</p><p>: Do take pictures that give the viewer a clue of where you are, and with whom.</p><p><strong>Kodak picture spots aren‚Äôt memorable</strong>. Destination pictures surely remind the travelers of their experience. I‚Äôm sure that that picture of the beach in Portugal would have encouraged my father to say, ‚ÄúThelma, remember that night?‚Äù That‚Äôs fine, for the people who participated. I‚Äôve taken thousands of such photos myself.</p><p>But if I wasn‚Äôt there, the image brings me no nostalgia.</p><p>The worst of these pictures are the touristy photos. My father took plenty of pictures of the Eiffel Tower on their trip in the 70s. But the tower doesn‚Äôt look any different today, so I didn‚Äôt bother to scan those photos. In fact, I dumped boxes without even looking at the contents, because there‚Äôs nothing in that experience that speaks to anyone but the participants.</p><p>: It‚Äôs fine to take pictures that capture a moment for those who were present. But if  could have taken that photo, don‚Äôt expect anyone to care.</p><p><strong>People pictures matter the most</strong>. Especially the non-staged ones. The formal pictures of special occasions, where we kids are lined up like we‚Äôre in front of a firing squad, are not the ones that bind us.</p><p>The best family photos are the ones where we‚Äôre clowning around and laughing, or where we‚Äôre doing something together, or a moment captured without the subject realizing it. The most precious are those where the family is putting up a pup tent, or using the water pump, or packing the car for a trip.</p><p>In general, try to capture your family when they are actively doing something, ideally an entire process. Let it be a photo essay: ‚ÄúMom making Thanksgiving dinner‚Äù or ‚ÄúDaddy taking the kids to the petting zoo.‚Äù Don‚Äôt choose only the ‚Äúreveal‚Äù moments such as Mom presenting the turkey to the table; include a picture of her hurriedly putting on lipstick before Grandpa arrives, or the kids conked out, asleep in the back seat, on the car trip home.</p><p>A few exceptions: Nobody looks attractive or interesting while he‚Äôs swimming. Few people look great sitting on a towel on the beach, wearing a bathing cap. Also don‚Äôt take pictures of people eating dinner, even at a fancy dinner. And while it‚Äôs no longer relevant, it was never a good idea to photograph exhausted travelers arriving at an airport gate.</p><p>Include the photographer. I have few pictures of my father, because he was always the guy behind the camera. When he did ask someone to take a picture it was always posed, such as ‚ÄúMom and Pop standing in front of the Grand Canyon.‚Äù</p><p>: Photos that capture you ‚Äúbeing there‚Äù ‚Äî which means most selfies ‚Äî rarely have meaning.  matters far more.</p><p><strong>Take photos of daily life</strong>. I‚Äôm stunned by the pictures my father  take. There isn‚Äôt a single photo that represents what my parents did for a living. They weren‚Äôt the type to attend company picnics, fine. But I found nothing indicating ‚Äútake your daughter to work‚Äù or ‚ÄúMom typing up a report‚Äù or ‚Äúthe building I worked in‚Äù or ‚Äúthe woman Mom commuted to work with for 10 years.‚Äù That would be more understandable if my parents disliked their jobs, but both of them were passionate about their careers.</p><p>Take photos of people at rest. Even though I spent much of my childhood writing letters, there is only one photo of me with a pen in my hand ‚Äî and that was taken by a friend at summer camp. Yet my friends and family all recall me with a book or pen within reach. My father never captured that essential part of who I was.</p><p>Some of the absences may reflect their superstitions. There are zero photos of any woman who is visibly pregnant. Maybe that was considered bad luck; I don‚Äôt know.</p><p>: Don‚Äôt limit photo-taking to special occasions.</p><p><strong>Take at least a short class in photography basics</strong>. Or read a basic book on the topic. As much as my father loved photography, he never got any kind of formal training. I spend a lot of editing time cropping images to take advantage of the simplest rule-of-thirds, for instance.</p><p>Even if you aren‚Äôt devoted to photography that much: Crop photos closely. My father took a lot of photos of ‚ÄúMom in front of a pretty vista‚Äù but in the long run I care more about Mom‚Äôs expression than the expanse of mountains in the background. Thanks to iPhoto I can zoom in, but a lot of detail is lost.</p><p>: Take the best quality photos you can. Your grandchildren will appreciate it.</p>","contentLength":12639,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42835282"},{"title":"Kansas tuberculosis outbreak is America's largest recorded since the 1950s","url":"https://www.cjonline.com/story/news/politics/government/2025/01/24/kansas-tuberculosis-outbreak-is-largest-in-recorded-history-in-u-s/77881467007/","date":1737932590,"author":"toastedwedge","guid":213,"unread":true,"content":"<p>An ongoing tuberculosis outbreak in Kansas has become the largest in recorded history in the United States.</p><p>\"Currently, Kansas has the largest outbreak that they've ever had in history,\" Ashley Goss, a deputy secretary at the Kansas Department of Health and Environment, told the Senate Public Health and Welfare Committee on Tuesday.</p><p>As of Jan. 17, <a href=\"https://www.kdhe.ks.gov/2242/Tuberculosis-Outbreaks\" data-type=\"link\" data-id=\"https://www.kdhe.ks.gov/2242/Tuberculosis-Outbreaks\" target=\"_blank\" rel=\"noreferrer noopener\" data-t-l=\":b|z|k|${u}\">public health officials reported</a> that they had documented 66 active cases and 79 latent infections in the Kansas City, Kansas, metro area since 2024. Most of the cases have been in Wyandotte County, with a handful in Johnson County.</p><p>Jill Bronaugh, a KDHE spokesperson, confirmed Goss's statement afterward.</p><p>\"The current KCK Metro TB outbreak is the largest documented outbreak in U.S. history, presently,\" Bronaugh said in a statement to The Capital-Journal. \"This is mainly due to the rapid number of cases in the short amount of time. This outbreak is still ongoing, which means that there could be more cases. There are a few other states that currently have large outbreaks that are also ongoing.\"</p><p>She noted that the Centers for Disease Control and Prevention started monitoring and reporting tuberculosis cases in the U.S. in the 1950s.</p><p>Tuberculosis is caused by a bacterium that typically affects the lungs, <a href=\"https://www.kdhe.ks.gov/2242/Tuberculosis-Outbreaks\" data-type=\"link\" data-id=\"https://www.kdhe.ks.gov/2242/Tuberculosis-Outbreaks\" target=\"_blank\" rel=\"noreferrer noopener\" data-t-l=\":b|z|k|${u}\">according to KDHE</a>. People with an active infection feel sick and can spread it to others, while people with a latent infection don't feel sick and can't spread it. Tuberculosis is spread person-to-person through the air when a person with an active infection coughs, speaks or sings. It is treatable with antibiotics.</p><p>State public health officials say there is \"very low risk to the general public.\"</p><p>\"Some of you are aware, we have and still have mobilized staff and resources addressing an unprecedented tuberculosis outbreak in one of our counties,\" Goss told lawmakers. \"We are working collaboratively with CDC on that. CDC remains on the ground with us to support. That's not a negative. This is normal when there's something unprecedented or a large outbreak of any kind, they will come and lend resources to us to help get a stop to that. We are trending in the right direction right now.\"</p><p>Goss said that when KDHE got involved with the Kansas City outbreak last summer, there were 65 active cases and roughly the same number of latent cases. She said the number is now down to about 32 active cases.</p><p>For active patients, after 10 days of taking medications and having three sputum tests, they will generally no longer be able to transmit tuberculosis.</p><p>\"They're no longer contagious,\" Goss said. \"They can go about their lives, they don't have to stay away from people, and they can go back to work, do the things, as long as they continue to take their meds.\"</p><p>The course of treatment is several months long for active and latent cases.</p><p>\"We still have a couple of fairly large employers that are involved that we're working with on this,\" Goss said. \"So we do expect to find more, but we're hoping the more that we find is latent TB not active, so that their lives are not disrupted and having to stay home from work. Because it is highly contagious.\"</p><p><em>(This story was updated because an earlier version included an inaccuracy.)</em></p><p><em>Jason Alatidd is a Statehouse reporter for The Topeka Capital-Journal. He can be reached by email at jalatidd@gannett.com. Follow him on X&nbsp;</em><a href=\"https://twitter.com/Jason_Alatidd\" target=\"_blank\" rel=\"noreferrer noopener\" data-t-l=\":b|z|k|${u}\"></a>.</p>","contentLength":3324,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42835183"},{"title":"k3s pods networking","url":"https://www.reddit.com/r/kubernetes/comments/1iaszwq/k3s_pods_networking/","date":1737932042,"author":"/u/crewman4","guid":380,"unread":true,"content":"<p>im not used to \"onprem\" k8s and am testing setting up an k3s in my homelab and i cant get it to work. ive been testing this on debian server and whatever i do, fresh installs and such, i cant enter a pod and wget an external internet site. all sites point to some IP (213.163.146.142:443)</p><p>Non-authoritative answer:</p><p>i can resolve dns , but thats hosted internally. everything else works from debian server and no firewalls active. ive been chatGPTing for hours but im stuck. ive rolled new servers and tested everything :P</p>","contentLength":519,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"MoxyProxy, an Atreugo(fasthttp) proxy with web interface","url":"https://www.reddit.com/r/golang/comments/1iasbf8/moxyproxy_an_atreugofasthttp_proxy_with_web/","date":1737930237,"author":"/u/ShotgunPayDay","guid":374,"unread":true,"content":"<p>I wanted to make a proxy that was as easy as possible to configure with functionality that I've always wanted. Here is the list of features from the README:</p><ul><li>Built with Atreugo (fasthttp).</li><li>Simple Web Interface (html/template, HTMX, Surreal, BulmaCSS), hijacks /moxyproxy route</li><li>ACME autocert using TLS-ALPN-01. Activates upon setting DomainName and restarting application.</li><li>Automatically upgrade http:// to https:// when DomainName is set.</li><li>Wireguard Server automatic update/restart upon peer changes.</li><li>Wireguard Peer config generation through HTTPS GET /moxyproxy/wg with dedicated Token and new Peer Name.</li><li>Serve static assets from /moxyproxy/public and /moxyproxy/private (OAuth2 protected)</li><li>Built in OAuth2 to block non-logged in users and send JSON user data to upstream servers using \"moxyuser\" header.</li><li>User data is not stored in the proxy and is instead sent to client in compressed ZSTD then encrypted AES256/GCM cookie.</li><li>Built in RateLimiter that will return 429 Too Many Requests on any request.</li><li>Automatic IP banning (403 Forbidden) on 4xx Response which counts against the IPs LimiterBanCount for the day this includes responses from upstream servers: <ul><li>401 Unauthorized 5x penalty</li><li>400 Any other 400 1x penalty</li></ul></li><li>Minimal configuration needed to get started.</li></ul><p>It's still a work in progress and currently being used for my website and services.</p><p>Not production ready and there will probably be breaking changes. I still need to figure out a testing strategy and benchmarking to do fine tuning. I'd like to test HTTPS to HTTP with wireguard with a net/http server serving HTML which means using VPSs to test the round trip without it breaking the bank. Synthetic tests aren't going to show any real world performance.</p><p>Screenshots are in the README.</p>","contentLength":1726,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Show HN: DeepSeek My User Agent","url":"https://www.jasonthorsness.com/20","date":1737929019,"author":"jasonthorsness","guid":183,"unread":true,"content":"<p><a href=\"https://github.com/deepseek-ai/DeepSeek-R1\">DeepSeek R1</a> is a new model and service that exposes\nchain-of-thought to the user. You can use it live for free at\n<a href=\"https://chat.deepseek.com/\">chat.deepseek.com</a>, or via an API at\n<a href=\"https://platform.deepseek.com/\">platform.deepseek.com</a> that is currently significantly less\nexpensive than OpenAI o1. OR, simply click  to see what the model thinks about your user\nagent, browser capabilities, and IP location headers. If you dare.</p>","contentLength":364,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42834648"},{"title":"Learning Rust is like running a marathon ‚Äî you need cardio!","url":"https://www.reddit.com/r/rust/comments/1iaqh5i/learning_rust_is_like_running_a_marathon_you_need/","date":1737925763,"author":"/u/orionwambert","guid":510,"unread":true,"content":"<p>I‚Äôve started learning Rust, and I have to admit, it‚Äôs a serious challenge! After years of coding in more \"conventional\" languages (started with Java 7, then moved to JS/TS, Python, Dart‚Ä¶), I thought I was ready for anything. But Rust? It‚Äôs a whole different ball game! </p><p>Between memory management, the heap, the stack, borrowing, ownership, and all these concepts that feel out of the ordinary, I‚Äôm feeling a bit overwhelmed. This is my second attempt to dive into it seriously, and I have to say, it‚Äôs not as \"friendly\" as what I‚Äôm used to.</p><p>Do any seasoned Rustaceans have tips to help me keep my head above water? Any resources, tricks, or even personal experiences to help me tame this beast?</p><p>I‚Äôm determined to crack the Rust code, but a little boost would be much appreciated! </p>","contentLength":793,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Astronomers delete asteroid because it turned out to be Tesla Roadster","url":"https://www.astronomy.com/science/astronomers-just-deleted-an-asteroid-because-it-turned-out-to-be-elon-musks-tesla-roadster/","date":1737925156,"author":"geox","guid":212,"unread":true,"content":"<p>On Jan. 2, the Minor Planet Center at the Harvard-Smithsonian Center for Astrophysics in Cambridge, Massachusetts, announced the <a href=\"https://minorplanetcenter.net/mpec/K25/K25A38.html\">discovery of an unusual asteroid</a>, designated 2018 CN41. First identified and submitted by a citizen scientist, the object‚Äôs orbit was notable: It came less than 150,000 miles (240,000 km) from Earth, closer than the orbit of the Moon. That qualified it as a near-Earth object (NEO) ‚Äî one worth monitoring for its potential to someday slam into Earth.</p><p>But less than 17 hours later, the Minor Planet Center (MPC) issued an <a href=\"https://minorplanetcenter.net/mpec/K25/K25A49.html\">editorial notice</a>: It was deleting 2018 CN41 from its records because, it turned out, the object was not an asteroid.</p><p>To be precise, it was <a href=\"https://en.wikipedia.org/wiki/Elon_Musk%27s_Tesla_Roadster\">Elon Musk‚Äôs Tesla Roadster</a> mounted to a Falcon Heavy upper stage, which boosted into orbit around the Sun on Feb. 6, 2018. The car ‚Äî which had been owned and driven by Musk ‚Äî was a test payload for the <a href=\"https://www.nasa.gov/history/5-years-ago-first-flight-of-the-falcon-heavy-rocket/\">Falcon Heavy‚Äôs first flight</a>. At the time, it received a great deal of notoriety as the first production car to be flung into space, complete with a suited-up mannequin in the driver‚Äôs seat named Starman.</p><p>The case of mistaken identity was resolved swiftly in a collaboration between professional and amateur astronomers. But some astronomers say it is also emblematic of a growing issue: the lack of transparency from nations and companies operating craft in deep space, beyond the orbits used by most satellites. While objects in lower Earth orbits are tracked by the U.S. Space Force, deeper space remains an unregulated frontier.</p><p>If left unchecked, astronomers say the growing number of untracked objects could hinder efforts to protect Earth from potentially hazardous asteroids. They could lead to wasted observing effort and ‚Äî if sufficiently numerous ‚Äî even throw off statistical analyses of the threat posted by near-Earth asteroids, said Center for Astrophysics (CfA) astrophysicist Jonathan McDowell in an email to . ‚ÄúWorst case, you spend a billion launching a space probe to study an asteroid and only realize it‚Äôs not an asteroid when you get there,‚Äù he said.</p><p>And it is a problem that is set to worsen as more nations and companies venture to the Moon and beyond.</p><p>The <a href=\"https://minorplanetcenter.net/\">Minor Planet Center</a> ‚Äî which operates under the auspices of the International Astronomical Union ‚Äî is the globally accepted authority on handling observations and reports of new asteroids, comets, and other small bodies in the solar system. Its responsibilities include identifying, designating, and computing their orbits.</p><p>It is also no stranger to spacecraft and discarded rocket stages masquerading as asteroids. In the 2000s, NASA‚Äôs Wilkinson Microwave Anisotropy Probe (WMAP), stationed in deep space around a million miles (1.5 million kilometers) from Earth, made it multiple times onto the MPC‚Äôs Near-Earth Object Confirmation Page (NEOCP), <a href=\"https://www.minorplanetcenter.net/iau/NEO_dev/toconfirm_tabular.html\">a list of NEOs pending confirmation</a>. And in 2007, the MPC had to retire the asteroid designation 2007 VN84 when the object was discovered to be the Rosetta spacecraft ‚Äî a high-profile European mission then performing a flyby of Earth en route to make the first ever landing on a comet.</p><p>‚ÄúThis incident, along with previous NEOCP postings of the WMAP spacecraft, highlights the deplorable state of availability of positional information on distant artificial objects,‚Äù the MPC fumed when it <a href=\"https://www.minorplanetcenter.net/mpec/K07/K07V70.html\">retracted 2007 VN84</a>. ‚ÄúA single source for information on all distant artificial objects would be very desirable.‚Äù</p><p>That central repository has yet to manifest itself. And the rise in space launches coupled with advances in telescope surveys means the MPC is seeing an uptick in reports of artificial objects, said the center‚Äôs director, Matthew Payne, in an email.</p><p>These include defunct craft and rocket boosters as well as operational space missions. Spacecraft that are swinging by Earth for a gravity assist (like Rosetta) to more distant locales are particularly prone to being misidentified as near-Earth asteroids. So are spacecraft stationed at the L2 Lagrange point of gravitational stability beyond the Moon, like WMAP.</p><p>Over the course of 2020 through 2022, at least four spacecraft were added to the MPC‚Äôs asteroid record books ‚Äî and quickly deleted. They include the European-Japanese <a href=\"https://minorplanetcenter.net/mpec/K20/K20G97.html\">BepiColombo mission</a> (in transit to Mercury), NASA‚Äôs <a href=\"https://minorplanetcenter.net/mpec/K20/K20G97.html\">Lucy mission</a> (headed to the Trojan asteroids in Jupiter‚Äôs orbit), the <a href=\"https://www.minorplanetcenter.net/mpec/K20/K20X56.html\">Spektr-RG</a> X-ray observatory at L2, and what is thought to be the <a href=\"https://minorplanetcenter.net/mpec/K21/K21D62.html\">Centaur upper rocket stage</a> for the 1966 Surveyor 2 lunar probe.</p><p>Closer to Earth, spacecraft are monitored and tracked with much more more scrutiny. Satellites in Earth orbit are regulated by national and international agencies, like the U.S. Federal Communications Commission. Companies also routinely publish orbit information for their own satellites, traditionally in a format known as two-line elements (TLEs). These data are collated by the U.S. Space Force, which also performs its own radar tracking observations and issues alerts to operators when two satellites are at risk of colliding so that they can take avoiding actions. Sharing positions and trajectories is generally in companies‚Äô best interest as it protects their own assets from collisions and helps prevents destructive clouds of debris that could, <a href=\"https://www.astronomy.com/science/study-satellite-traffic-jam-calls-for-urgent-changes/\">in a worst-case scenario</a>, render near-Earth space unusable.</p><p>But the situation is different in deep space, which is filled with a growing fleet of spacecraft at the Moon, in orbit around the Sun, and at associated Lagrange points of gravitational stability. Because of the Tesla Roadster‚Äôs fame, it happens to be included in a database maintained by NASA‚Äôs Jet Propulsion Lab called <a href=\"https://ssd.jpl.nasa.gov/horizons/\">Horizons</a>, which computes orbits for natural bodies in the solar system. But disclosing artificial bodies‚Äô trajectories in deep space is not a standard industry practice.</p><p>Deep space is ‚Äúlargely unregulated,‚Äù McDowell told a special-session audience Jan. 14 at the American Astronomical Society‚Äôs (AAS) winter meeting in National Harbor, Maryland. ‚ÄúThere‚Äôs no requirement to file some kind of public flight plan, no equivalent of the TLEs or the corporate data that we get for low-orbit satellites.‚Äù</p><p>McDowell has also been critical of the asteroid mining startup <a href=\"https://www.astroforge.com/\">AstroForge</a>, which plans to launch two probes this year, ridesharing on the Intuitive Machines IM-2 and IM-3 missions. The craft will visit a target asteroid, prospecting for valuable platinum group metals that the company hopes to one day mine. But in order to avoid giving competitors a chance to get there first, the company does not intend to disclose which asteroid it is going to. ‚ÄúThat‚Äôs kind of not OK,‚Äù said McDowell dryly at the AAS meeting.</p><p>Last September, the AAS raised the issue of deep-space transparency <a href=\"https://compasse.aas.org/aas-releases-a-compasse-led-statement-on-transparency-in-cislunar-and-interplanetary-spaceflight-activities/\">in a statement</a> led by its Committee for the Protection of Astronomy and the Space Environment (of which McDowell is a member). It called on U.S. space operators ‚Äî government agencies and non-governmental alike ‚Äî to publicly report and update trajectories of deep-space objects. It also urged operators to place those data in a public repository like JPL‚Äôs Horizons, echoing the call from the MPC 17 years earlier.</p><p>AstroForge says it will be transparent about aspects of its target asteroid ‚Äî other than its identity ‚Äî including releasing images of it. The company‚Äôs co-founder and CEO Matt Gialich told  that Astroforge has not yet settled on a target asteroid because ‚Äúas a ride share customer, we don‚Äôt control our launch date.‚Äù He added, ‚ÄúJonathan McDowell is someone I respect, and I love the pushback. It‚Äôs what science is built on. I hope that images and information we deliver outweigh the perceived negatives in this case.‚Äù</p><p>At the time of publication, SpaceX had not responded to a query from .</p><h2>‚ÄòA rare confluence of factors‚Äô</h2><p>The Tesla Roadster mix-up came as something of a disappointment to the Turkish amateur astronomer, who asked to be identified as ‚ÄúG.‚Äù He hoped he had discovered a near-Earth asteroid, not a used car from 2010 with a few billion miles on it.</p><p>He identified (the object briefly known as) 2018 CN41 with software he wrote in his spare time to parse through the MPC‚Äôs public archive of observations of objects, which anyone can peruse in search of asteroids and other small solar system bodies. His code identified several candidate objects that could be traced through multiple observations from various telescopes around the world. 2018 CN41 was one of them. It had shown up in images taken by the Catalina Sky Survey at Steward Observatory near Tucson, Arizona, and the Pan-STARRS and ATLAS surveys in Hawaii, among others.</p><p>After G. calculated an orbit to fit the observations, he saw that the object had a very small minimum orbital intersection distance (MOID) from Earth. In other words, its orbit came very close to Earth‚Äôs, making it a potential near-Earth object. ‚ÄúI was ecstatic and submitted the identification‚Äù to the MPC, he told  in an email. The MPC accepted the submission and notified the astronomical community in what it calls an ‚Äú<a href=\"https://minorplanetcenter.net/mpec/K25/K25A38.html\">electronic circular</a>,‚Äù a term of art that reflects the long legacy of observational tradition.</p><p>But after seeing the object‚Äôs trajectory plotted in 3D on the MPC‚Äôs website, he began to harbor doubts about its origins. He realized the orbit resembled that of a spacecraft traveling to Mars, using a <a href=\"https://en.wikipedia.org/wiki/Hohmann_transfer_orbit\">Hohmanm transfer orbit</a>, with the exception that it slightly overshoots Mars‚Äô orbit. (He credits, only half-jokingly, his time playing the spaceflight simulation video game Kerbal Space Program.)</p><blockquote><p>I first went to JPL‚Äôs Small Body Database to quickly take a look at the Earth close approach dates and potential Mars close approach dates, to see if I could correlate those to a known interplanetary mission. I failed ‚Äî the Falcon launch had never crossed my mind. I almost concluded it was an actual NEO and stopped looking, but I asked around on the Minor Planet Mailing List just to erase my final doubts. To my surprise, Jonathan McDowell quickly figured out it was the Falcon upper stage. Being slightly embarrassed that I might have caused unnecessary excitement (it WAS quite a low MOID), I quickly went to MPC‚Äôs help desk and let them know the NEO I just submitted was a rocket stage.</p></blockquote><p>The MPC has multiple checks to flag artificial objects, said Payne, the center director, all of which broke down on the Tesla Roadster. ‚ÄúThis case highlights a rare confluence of factors,‚Äù he said.</p><p>First, the MPC uses a routine called <a href=\"https://github.com/Bill-Gray/sat_code/blob/master/sat_id.cpp\">sat_id</a>, written by Bill Gray and commonly used by the minor-planet community, to see if an observation of an object matches the position of a known satellite on the sky. The database of satellites it checks against is maintained by the research community of both professional and amateur astronomers.</p><p>Payne noted that when the Tesla Roadster was originally launched in 2018, the community caught it and flagged it as an artificial object, and the MPC ‚Äúcorrectly labeled it as such without assigning a minor planet designation.‚Äù</p><p>But when subsequent observations were archived by the MPC and later identified by G., sat_id failed to locate the Roadster, said Payne. And the object was not caught upon further review because unlike most satellites, it orbits the Sun and not Earth. In addition, it is an unusual Sun-centric orbit for a spacecraft. Because it was a test flight for the Falcon Heavy, there was no destination in particular; that is why its trajectory originates near Earth but overshoots Mars‚Äô orbit, as G. noted.</p><p>Payne agreed that a central repository, ‚Äúregularly updated by national and private space agencies, would significantly enhance the identification process.‚Äù Currently, he said, the MPC is collaborating with JPL on a system to better detect artificial objects that aren‚Äôt in Earth orbit and filter them out of the MPC‚Äôs observational database.</p><h2>Citizen science remains key</h2><p>In one sense, this case shows the scientific process at work. Mistakes are inevitable, but quick corrections mean science is working as it should.</p><p>It also highlights the crucial role that amateur astronomers play in making discoveries ‚Äî a role they have played for centuries, well before the term ‚Äúcitizen scientists‚Äù came into vogue. ‚ÄúTheir involvement significantly improves the overall efficiency of object identification and contributes to the broader mission of the MPC,‚Äù said Payne.</p><p>G. is able to see the bright side of what he calls ‚Äúthe Tesla incident.‚Äù</p><p>‚ÄúI‚Äôm still sort of disappointed it wasn‚Äôt a NEO, but it was an interesting experience to say the least,‚Äù he said. ‚ÄúAt the very least we managed to filter out some non-minor-planet observations from [the] MPC database.‚Äù</p><p>G. continues to hunt for small bodies in the solar system on his own and in citizen science projects like <a href=\"https://web-coias.u-aizu.ac.jp/\">Come On! Impacting ASteroids</a> (COIAS). Developed by a team of Japanese astronomers, COIAS allows anyone to scour observations taken by the Subaru Telescope on Maunakea in Hawaii for asteroids, comets, and trans-Neptunian objects and report their measurements to the MPC.</p><p>Through COIAS, G. has been a co-discoverer of two named asteroids: 697402 Ao and 718492 Quro. The asteroids are named for one of the main characters and the author, respectively, of a slice-of-life manga named  (also adapted as an anime), about two high school friends who join their school‚Äôs Earth sciences club and dream of discovering an asteroid. G. said that while he didn‚Äôt know much about it before, he ‚Äúloved people who were fans of the manga get crazy about it on social media.‚Äù</p><p>Recently on COIAS, G. came across a small, ‚Äúbarely noticeable‚Äù speck of light moving slowly across the sky. According to his measurements, it appears to be a small body in the outer solar system that crosses Neptune‚Äôs orbit. He identified the measurements and submitted them to the MPC. On Jan. 18, <a href=\"https://x.com/Astro_Guler/status/1880713913656119689\">he posted about it on X</a>, the social media platform now owned by Musk, noting that the object‚Äôs orbit takes it within half an astronomical unit ‚Äî the average Earth-Sun distance ‚Äî from Neptune. If confirmed, the object would be a member of a dynamically intriguing subset of trans-Neptunian objects, one that has recently been studied for clues to the <a href=\"https://doi.org/10.3847/2041-8213/ad3cd2\">whereabouts of the theorized Planet Nine</a>.</p><p>Of course, G. has his sights set on even rarer observational feats. In an email, he wrote: ‚ÄúI‚Äôm thinking the holy grail could be a beautiful comet, an interstellar visitor, or an alien spacecraft like in [Arthur C.] Clarke‚Äôs book , heh üôÇ None of that might happen, but that won‚Äôt stop me from dreaming about it.</p><p>‚ÄúRealistically, at this point in time I will settle for anything that‚Äôs not a car.‚Äù</p><p><strong>Editor‚Äôs note (Jan. 25, 2025):</strong> At the request of the amateur astronomer who identified the object, the story has been updated to remove his first initials and last name.</p>","contentLength":14844,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42834043"},{"title":"Best Way to Collect Traces for Tempo","url":"https://www.reddit.com/r/kubernetes/comments/1iaq420/best_way_to_collect_traces_for_tempo/","date":1737924977,"author":"/u/Sule2626","guid":382,"unread":true,"content":"<p>I'm currently using Prometheus, Grafana, and Loki in my stack, and I'm planning to integrate Tempo for distributed tracing. However, I'm still exploring the best way to collect traces efficiently.</p><p>I've looked into Jaeger and OpenTelemetry:</p><ul><li> seems to require a relatively large infrastructure, which feels like overkill for my use case.</li><li> looks promising, but it overlaps with some functionality I already have covered by Prometheus (metrics) and Loki (logs).</li></ul><p>Does anyone have recommendations or insights on the most efficient way to implement tracing with Tempo? I'm particularly interested in keeping the setup lightweight and complementary to my existing stack.</p>","contentLength":658,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"DeepSeek R1 API First Look: How This Open-Source Model Outperforms OpenAI","url":"https://www.kaishira.com/2025/01/26/deepseek-r1-api-first-look-how-this-open-source-model-outperforms-openai/","date":1737922386,"author":"/u/haberveriyo","guid":504,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1iaoyh2/deepseek_r1_api_first_look_how_this_opensource/"},{"title":"Terminal Trove - Discover CLI tools","url":"https://terminaltrove.com/categories/","date":1737916591,"author":"/u/Pollux_Mabuse","guid":422,"unread":true,"content":"<p>The $HOME of all things in the terminal</p>","contentLength":39,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/linux/comments/1iamc9b/terminal_trove_discover_cli_tools/"},{"title":"Has the behaviour of maxUnavailable and maxSurge for RollingUpdates changed since v1.21.9","url":"https://www.reddit.com/r/kubernetes/comments/1iam71l/has_the_behaviour_of_maxunavailable_and_maxsurge/","date":1737916265,"author":"/u/mrnadaara","guid":381,"unread":true,"content":"<p>We've deployed a new cluster with v1.30.7 and tried to deploy a deployment with a maxSurge of 1 and maxUnavailable with 0. The new pod remains stuck in Pending with the following reasons:</p><p>0/3 nodes are available: 3 Insufficient cpu. preemption: 0/3 nodes are available: 3 No preemption victims found for incoming pod.</p><p>Changing maxUnavailable to 1 fixes it but I'm curious as to why it fails with the new version when it worked fine in the old version. It exceeds the replica count when doing a rolling update so it makes sense the pod wouldn't be scheduled until the old one is deleted, but since we've set the maxUnavailable to 0 the old pods are never deleted. This in theory shouldn't have worked in the old version as well. Am I misconstruing things here?</p>","contentLength":757,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"[Media] Introducing: yeehaw! A TUI Framework with Batteries Included","url":"https://www.reddit.com/r/rust/comments/1ialadw/media_introducing_yeehaw_a_tui_framework_with/","date":1737914311,"author":"/u/bogz314","guid":513,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"OpenJazz is a free, open-source version of the classic Jazz Jackrabbit games","url":"https://alister.eu/jazz/oj/about.php","date":1737913211,"author":"doener","guid":211,"unread":true,"content":"OpenJazz is a free, open-source version of the classic Jazz Jackrabbit‚Ñ¢ games.\n     OpenJazz can be compiled on a wide range of operating systems, including Windows\n     98/Me/XP and Linux.\n     To play, you will need the files from one of the original games.\n     <p>With the demise of DOS-based operating systems, it became necessary\n     to use emulators to play old DOS games.\n     Jazz Jackrabbit‚Ñ¢ deserves more - and would benefit greatly from new features.\n     </p><p>OpenJazz was started on the 23rd of August, 2005, by </p><a href=\"https://alister.eu/\">AJ Thomson</a>.\n     Academic pressures put the project on hold until late December 2005. The\n     source code was released on the 25th, and the first version with a degree of playability\n     was released on the 15th of January. Since then, a variety of ports have been released\n     by other people.\n     <p>In 2009, a multiplayer version was released.</p>","contentLength":870,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42831927"},{"title":"How long is a second in JS? | Why Some Are Longer Than Others","url":"https://docs.timetime.in/blog/how-long-is-a-second-in-js","date":1737912975,"author":"/u/iagolast","guid":505,"unread":true,"content":"<p>When you ask the question \"How long is a second in JavaScript?\", it seems like a straightforward query. However, the answer reveals layers of complexity intertwined with history, science, and the foundations of modern computing. Let‚Äôs dive deep to understand how humanity has measured time and how it connects to JavaScript‚Äôs timekeeping.</p><h3>The Early Days of Timekeeping<a href=\"https://docs.timetime.in/blog/how-long-is-a-second-in-js#the-early-days-of-timekeeping\" aria-label=\"Direct link to The Early Days of Timekeeping\" title=\"Direct link to The Early Days of Timekeeping\">‚Äã</a></h3><p>Time measurement began with observing natural periodic phenomena. Early civilizations looked to the moon's phases and the apparent movement of the sun to divide time into manageable units. These observations gave rise to the concepts of days, months, and years.</p><p>As human needs evolved, a more granular division of time became necessary. The ancient Egyptians and Babylonians divided the day into 24 hours, likely influenced by their base-12 numbering system. Later, hours were divided into 60 minutes and minutes into 60 seconds, creating the framework we still use today.</p><p>While these early methods sufficed for centuries, they lacked precision. By the mid-20th century, advancements in technology demanded a more accurate measurement of time. The invention of the atomic clock in the 1950s marked a revolutionary step. These clocks measure time based on the vibrations of cesium atoms, offering unparalleled precision.</p><p>As a result, the definition of a second was updated to:</p><blockquote><p>\"The duration of 9,192,631,770 periods of the radiation corresponding to the transition between the two hyperfine levels of the ground state of the cesium-133 atom.\"</p></blockquote><p>This definition formed the foundation for what we now call international atomic time (TAI)</p><p><a href=\"https://en.wikipedia.org/wiki/Universal_Time\" target=\"_blank\" rel=\"noopener noreferrer\">Universal Time</a> is based on the Earth's rotation. It‚Äôs intuitive and tied to our everyday experience of day and night. However, the Earth's rotation is not perfectly consistent due to various factors such as gravitational interactions and geophysical processes. As a result, we could say that Universal Time is imprecise and variable.</p><p><a href=\"https://en.wikipedia.org/wiki/International_Atomic_Time\" target=\"_blank\" rel=\"noopener noreferrer\">Atomic Time</a>, derived from atomic clocks, is based on physical phenomena and is both precise and consistent. It serves as the backbone for modern timekeeping systems.</p><p>In the 1970s, <a href=\"https://en.wikipedia.org/wiki/Coordinated_Universal_Time\" target=\"_blank\" rel=\"noopener noreferrer\">Coordinated Universal Time (UTC</a>) was introduced to reconcile the discrepancies between Universal Time and Atomic Time. UTC aligns with Universal Time but incorporates adjustments, such as the addition or removal of leap seconds, to compensate for the Earth's irregular rotation.</p><p>Leap seconds are occasional one-second adjustments added to UTC to keep it in sync with Universal Time. These adjustments ensure that UTC remains within 0.9 seconds of Universal Time. However, they introduce complications for systems that rely on precise time calculations.</p><p>Here‚Äôs the improved article in English, incorporating the original tables:</p><h3>ECMAScript and POSIX Time<a href=\"https://docs.timetime.in/blog/how-long-is-a-second-in-js#ecmascript-and-posix-time\" aria-label=\"Direct link to ECMAScript and POSIX Time\" title=\"Direct link to ECMAScript and POSIX Time\">‚Äã</a></h3><p>This approach treats every day as having exactly  (24 hours), ignoring both leap seconds and astronomical variations in the Earth's rotation. While this simplifies calculations and suffices for most applications, it introduces limitations in scenarios where precise timekeeping is critical.</p><p>Although POSIX and UTC appear similar, . Here are the key differences:</p><ol><li><ul><li>UTC includes leap seconds to adjust official time to the Earth's rotation.</li><li>POSIX does not count leap seconds, meaning that <strong>POSIX days always have 86,400 seconds</strong>, even when UTC days have 86,401 or 86,399 seconds due to a leap second.</li></ul></li><li><p><strong>Simplified Interoperability</strong>:</p><ul><li>POSIX assumes all seconds are of equal duration. This makes calculating time differences straightforward but causes discrepancies when leap seconds occur.</li><li>For example, during a leap second (e.g., ), POSIX simply ignores the additional second, making timestamps near the leap second ambiguous or inaccurate.</li></ul></li></ol><h3>Step Adjustment: The Traditional Solution<a href=\"https://docs.timetime.in/blog/how-long-is-a-second-in-js#step-adjustment-the-traditional-solution\" aria-label=\"Direct link to Step Adjustment: The Traditional Solution\" title=\"Direct link to Step Adjustment: The Traditional Solution\">‚Äã</a></h3><p>Historically, systems that needed to account for leap seconds would use a technique called . This method can be described as just ignoring the leap second, causing the clock to jump forward or backward by one second at the exact moment of the leap second.</p><p>Lets see a table to understand this:</p><table><thead><tr></tr></thead><tbody><tr></tr><tr></tr><tr></tr><tr></tr></tbody></table><p>As you can see from the both TAI and UTC are strictly increasing, but POSIX (step) has a jump in time at the leap second. This means that 2 different UTC seconds are mapped to the same POSIX second. This can cause issues in some applications. The biggest problem is that some apps can go \"back in time\" when a leap second is added.</p><p>Lets say that a payment is requested at , and approved during the next second at . Our logs will show something like:</p><div><div><pre tabindex=\"0\"><code></code></pre></div></div><p>This is a problem because the payment was approved before it was requested. This is why most system use a different approach to handle leap seconds.</p><h3>Smearing: The Practical Solution<a href=\"https://docs.timetime.in/blog/how-long-is-a-second-in-js#smearing-the-practical-solution\" aria-label=\"Direct link to Smearing: The Practical Solution\" title=\"Direct link to Smearing: The Practical Solution\">‚Äã</a></h3><p>In many modern systems implementing POSIX time, a technique called  is used to handle leap seconds. Instead of adding or removing a whole second, the effects of the leap second are distributed gradually over a longer period (typically 24 hours). This has several implications: First of all during the smear period, <strong>seconds are slightly longer or shorter than a standard second</strong> (measured in atomic time). This ensures a smooth transition instead of an abrupt jump in time. On the other hand compared to stepping the clock is strictly increasing, which is a requirement for many applications.</p><h4>Example: Smearing and Step Adjustment Tables<a href=\"https://docs.timetime.in/blog/how-long-is-a-second-in-js#example-smearing-and-step-adjustment-tables\" aria-label=\"Direct link to Example: Smearing and Step Adjustment Tables\" title=\"Direct link to Example: Smearing and Step Adjustment Tables\">‚Äã</a></h4><table><thead><tr></tr></thead><tbody><tr></tr><tr></tr><tr></tr><tr></tr></tbody></table><p>In this table:  ignores the leap second entirely, treating  as if it doesn't exist while  gradually adjusts the clock, ensuring smoother transitions but at the cost of seconds having slightly different durations.</p><p>This is how Google's NTP servers handle leap seconds. They smear the leap second over a 24-hour period, ensuring that the clock is always strictly increasing. More information can be found <a href=\"https://developers.google.com/time/smear\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.</p><h2>Implications for Applications<a href=\"https://docs.timetime.in/blog/how-long-is-a-second-in-js#implications-for-applications\" aria-label=\"Direct link to Implications for Applications\" title=\"Direct link to Implications for Applications\">‚Äã</a></h2><h3>Why It Usually Doesn‚Äôt Matter<a href=\"https://docs.timetime.in/blog/how-long-is-a-second-in-js#why-it-usually-doesnt-matter\" aria-label=\"Direct link to Why It Usually Doesn‚Äôt Matter\" title=\"Direct link to Why It Usually Doesn‚Äôt Matter\">‚Äã</a></h3><p>For tasks like scheduling events, calculating ages, or displaying time in user-facing applications, JavaScript (and POSIX) time is precise enough and 99% of the problem will be derived from timezones.</p><p>For applications requiring high precision, such as those in scientific research or financial systems, the discrepancies caused by leap seconds and smearing can lead to significant errors. Accurate timekeeping is crucial to ensure the reliability and accuracy of measurements and transactions. During a leap second, a single POSIX timestamp can refer to two different moments in UTC, creating ambiguities and potential errors in systems that demand precise time synchronization.</p>","contentLength":6446,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1iakow2/how_long_is_a_second_in_js_why_some_are_longer/"},{"title":"New Michigan Law Requires High Schools to Offer CS Classes","url":"https://news.slashdot.org/story/25/01/26/1547204/new-michigan-law-requires-high-schools-to-offer-cs-classes?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1737912840,"author":"EditorDavid","guid":251,"unread":true,"content":"The state of Michigan will now require each public high school in the state to offer at least one computer science course to its students. \"This bill aligns Michigan with a majority of the country,\" according to the state's announcement, which says the bill \"advances technological literacy\" and ensures their students \"are well-equipped with the critical thinking skills necessary for success in the workforce.\" \nSlashdot reader theodp writes:\n\n\n\nFrom the Michigan House Fiscal Agency Analysis: \"Supporters of the bill say that increasing access to computer science courses for students in schools should be a priority of the state in order to ensure that students can compete for the types of jobs that have good pay and will be needed in the coming decades.\" \nThat analysis goes on to report that testifying in favor of the bill were tech-giant backed nonprofit Code.org (Microsoft is a $30 million Code.org donor), Amazon and AWS (Amazon is a $30+ million Code.org donor), the tech-supported Computer Science Teachers Association (CSTA), and the lobbying organization TechNet, whose members include Amazon, Apple, Google, Meta, and OpenAI). \nIt's not clear how many high schools in Michigan are already teaching CS courses, but this still raises a popular question for discussion. Should high schools be required to teach at least one CS course?","contentLength":1349,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Improve Rust Compile Time by 108X","url":"https://burn.dev/blog/improve-rust-compile-time-by-108x","date":1737912528,"author":"/u/Handsome_AndGentle","guid":503,"unread":true,"content":"<p>\nBefore you get too excited, the techniques used to reduce compilation\n          time are not applicable to all Rust projects. However, I expect the\n          learnings to be useful for any Rust developer who wants to improve\n          their project's compilation time. Now that this is clarified, let's\n          dive into the results.\n</p><p>\nWe started with a compilation time of 108 seconds for the matmul\n          benchmarks, which was reduced to only 1 second after all the\n          optimizations. The most effective optimization was the element-type\n          generics swap, where we instantiated generic functions with predefined\n          \"faked\" element types to reduce the amount of LLVM code generated. The second optimization also had a major impact, further\n          reducing the compilation time by nearly 3√ó. This was achieved by using\n          our comptime system instead of associated const generics to represent the\n          matmul instruction sizes. Finally, the last optimization‚Äîalso the simplest‚Äîwas\n          to reduce the LLVM optimization level to zero, which is particularly useful\n          for debug builds, such as tests.\n</p><div><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"720pt\" height=\"432pt\" viewBox=\"0 0 720 432\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"></svg></div><div><p>\nCompilation times are measured using incremental compilation.\n</p></div><p>\nFirst, let me explain the situation that led me to investigate our\n          compile time. During the last iteration of CubeCL, we refactored our matrix multiplication GPU kernel to work with\n          many different configurations and element types. CubeCL is a dialect\n          that lets you program GPUs for high-performance computing applications\n          directly in Rust. The project supports multiple compiler backends,\n          namely WebGPU, CUDA, ROCm, and Vulkan with more to come.\n</p><p>\nThe refactoring of the matrix multiplication kernel was done to\n          improve tensor cores utilization across many different precisions. In\n          fact, each kernel instance works across 3 different element types: the\n          global memory element type, the staging element type, and the\n          accumulation element type. These are all different since we normally\n          want to accumulate in a higher precision element type, as this is\n          where numerical approximation is most sensitive. Also, the tensor\n          cores don't work across all input precisions; if you have f32 inputs,\n          you need to convert those to tf32 element types (staging) to call the\n          tensor cores instructions. To add to the complexity, tensor cores\n          instructions only work across fixed matrix shapes that also depend on\n          the precisions. For instance, f16 staging matrices work across all\n          shapes from (32, 8, 16), (16, 16, 16), (8, 32, 16). But tf32 only\n          works on (16, 16, 8).\n</p><p>\nIn our first refactoring, we represented the shape of the matrices\n          supported by the instructions using const associated types, since this\n          is the abstraction component that makes the most sense in this case.\n          For the element types, we naturally used generic arguments for traits\n          and functions - pretty much what any developer would do in this\n          scenario. However, with all the possible combinations, we ended up\n          with a compilation time of 1m48s using the cache.\n</p><p>\nYes, you read that right: 1m48s just to rebuild the matmul benchmark\n          if we change anything in the bench file.\n</p><p>\nFor the purpose of this optimization, we only consider incremental\n          compilation using cargo caching, since this is the most important one\n          to speed up dev iteration time. Changing one configuration to test if\n          an optimization worked took almost 2 minutes just to create the binary\n          to execute a few matmuls.\n</p><p>\nWell, we need to understand that the Rust compiler is actually very\n          fast. The slow parts are the linking and LLVM. The best way to improve\n          compilation time is to reduce the amount of LLVM IR generated.\n</p><p>\nIn our specific case, each combination of the matmul would generate a\n          whole new function - this is what zero-cost abstraction means. There\n          is no dynamic dispatch; every type change duplicates the code to\n          improve performance at the cost of a bigger binary. Before all of our\n          optimizations, the binary generated was 29M, and after we reduced it\n          to 2.5M - a huge difference.\n</p><p>\nTo reduce the amount of code generated, we had to use different Rust\n          techniques to make our abstractions for the matmul components. In our\n          case, we don't need zero-cost abstractions, since the code written in\n          Rust for the matmul components actually generates the code that is\n          used to compile at runtime a kernel that will be executed on the GPU.\n          Only the GPU code needs to be fast; the JIT Rust code takes almost no\n          time during runtime. Zero-cost abstraction would actually be optimal\n          in a setting where we would perform ahead-of-time compilation of\n          kernels.\n</p><p>\nEver wonder why LibTorch or\n          cuBLAS have executables that are\n          GIGABYTES in size? Well, it's because all kernels for all precisions with\n          all edge cases must be compiled to speed up runtime execution. This is\n          necessary in a compute-heavy workload like deep learning.\n</p><p>\nHowever, CubeCL is different - it performs JIT compilation, therefore\n          we don't need to compile all possible variations ahead of time before\n          creating the binary: we can use dynamic abstractions instead! This is\n          one of the two optimizations that we made for the matmul components.\n          Instead of relying on const associated types, we leveraged the\n          comptime system to dynamically have access to the instruction sizes\n          during the compilation of a kernel at runtime. This is actually the\n          second optimization that we made and helped us go from 14s compilation\n          time to around 5s.\n</p><p>\nHowever, the biggest optimization was quite hard to pull off and is\n          linked to the generic element types passed in each function. We still\n          wanted to use zero-cost abstraction in this case, since passing around\n          an enum listing what element type operations are on would be terrible\n          in terms of developer experience. However, the hint to improve our\n          compilation time was that when you write a function that will execute\n          on the GPU, we have an attribute on top .\n</p><p>\nWe want the code to look and feel like normal Rust, but the macro\n          actually parses the Rust code written and generates another function,\n          which we normally call the expand function, where the actual GPU IR is\n          built for the function. That code will actually run during runtime,\n          not the code that the user is writing. The element types generics are\n          only used to convert the generic element type into the enum IR element\n          type. In the expand functions, we also pass a context where all IR is\n          tracked.\n</p><p>\nSo the optimization was to pass a fake generic element type, called  instead of the actual element type like . When\n          compiling a kernel, we first register the real element type in the\n          context, using the const generic item to differentiate multiple\n          element types if a function has multiple generic element types. Since\n          we always call the expand function with the exact same generic items\n          for all element types, we only generate one instance of that function,\n          and the element types are fetched at runtime using the context.\n</p><p>\nThe most tedious part was actually implementing that optimization\n          while trying not to break our components. The biggest problem caused\n          by that optimization is that we can't support generic dependencies\n          between traits over the element type in launch functions of CubeCL.\n</p><div><pre tabindex=\"0\" data-language=\"rust\"><code></code></pre></div><p>\nIt makes sense though - we don't want to recompile all the instruction\n          types for all different precisions. Since our optimization is\n          activated at the boundaries of CPU code and GPU code, where cube\n          functions are identified as launchable, we need the generic trait to\n          not have a dependency on the element type. They are going to be\n          switched by our macro. We use generic associated types instead of\n          traits with generic element types.\n</p><p>\nThis is known as the family pattern, where a trait is describing a family of types.\n</p><div><pre tabindex=\"0\" data-language=\"rust\"><code></code></pre></div><p>\nUsing this pattern, we can inject the family type at the boundaries of\n          CPU and GPU code and instantiate the inner instruction type with the\n          expand element type.\n</p><div><pre tabindex=\"0\" data-language=\"rust\"><code></code></pre></div><p>\nMigrating most of the components to the new pattern, we reduced\n          compile time from 1m48s to about 14s.\n</p><p>\nIt was a lot of work, and I don't expect all projects to face cases\n          like this, but it was worth it! Now waiting for about 5 seconds after\n          trying something in the code to see if performance is improved doesn't\n          break the flow, but almost 2 minutes did.\n</p><p>\nWe essentially leveraged the fact that CubeCL is a JIT compiler and\n          not an AOT compiler, which is very appropriate for throughput-focused\n          high-performance applications.\n</p><h2>Playing with LLVM optimization settings</h2><p>\nSince our benchmarks are compiled with optimization level set to 3, we\n          could still improve the compilation time further to about 1s by\n          reducing the optimization level to zero. Another 5X speedup that we\n          can have by simply adjusting the LLVM optimization level.\n</p><p>\nWe decided not to keep that optimization in production, since we want\n          the benchmarks to have the same LLVM optimization level as user\n          applications. However, we activated it for testing, since we often\n          rerun tests to ensure we don't break correctness when implementing or\n          optimizing kernels.\n</p><h2>Not a Rust Compiler Issue</h2><p>\nAll of our optimizations actually created tons of code - we used proc\n          macros, associated type generics, const generics, and tons of complex\n          features from the Rust type system.\n</p><p>\nThe Rust compiler is actually very fast; the slow part is really the\n          linking and optimizing of the LLVM IR. If there's one thing to take\n          from this post, it's that you shouldn't worry about using complex\n          features of Rust, but make sure you don't generate huge binaries.\n          Reducing the binary size will improve compile time even if you use\n          complex methods to do so! \"Less code compiles faster\" is not exactly\n          right. \"Less generated code compiles faster\" is what we have to keep\n          in mind!\n</p>","contentLength":10722,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1iakht9/improve_rust_compile_time_by_108x/"},{"title":"Qwen2.5-1M: Deploy your own Qwen with context length up to 1M tokens","url":"https://qwenlm.github.io/blog/qwen2.5-1m/","date":1737912255,"author":"meetpateltech","guid":210,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42831769"},{"title":"Hard numbers in the Wayland vs. X11 input latency discussion","url":"https://mort.coffee/home/wayland-input-latency/","date":1737910672,"author":"todsacerdoti","guid":209,"unread":true,"content":"<p>Yesterday, I read this blog post:\n<a href=\"https://gist.github.com/generic-internet-user/e8eec46ce159571032115f6fb064523c\">Wayland Cursor Lag: Just give me a break already...</a>,\nwhere a Linux user discusses their frustration with input latency under Wayland.\nThey detailed their own subjective experience of the problem,\nbut failed to produce hard evidence.</p><p>Even though I'm a very happy user of wayland overall,\nI share the blog post's author's subjective impression that there's more\ncursor lag under Wayland than under X11.\nIn my opinion, their experiment was limited by their phone camera's 90 FPS,\nwhich really doesn't feel like it's enough to get conclusive numbers\nwhen we're talking about differences which are probably on the order of\nsingle screen refresh cycles.</p><p>So I thought: hey, I have a phone with a 240 FPS camera mode,\nI bet that's enough to get some conclusive results!</p><p>I simply pointed my phone's camera at the screen and desk using my left hand,\nmade sure to get the mouse cursor, the mouse and my right hand in frame,\nand recorded myself repeatedly flicking the mouse with my finger.\nI recorded myself flicking it 16 times under Wayland,\nlogged out of the GNOME Wayland session and into a GNOME X11 session,\nthen did the same there.</p><p>I then converted the two resulting video files into a series of JPEGs\nusing ffmpeg (<code>ffmpeg -i &lt;input file&gt; %04d.jpg</code>),\nand counted from the first frame where I could see the mouse move\nuntil the first frame where I could clearly see that the cursor had moved.</p><p>I elected to include the start and end frame;\nso if I saw the mouse move in frame 1045,\nthen I saw the cursor move in frame 1047,\nI would count that as 3 frames.</p><p>Here's an example which depicts a latency of 3 frames (requires JavaScript):</p><div><div><blockquote><p>Here's a frame from before the mouse has begun moving.</p></blockquote></div><div><blockquote><p>The mouse still hasn't moved.</p></blockquote></div><div><blockquote><p>Here, the mouse has just about started moving,\nso I consider this \"frame 1\".\nThe cursor hasn't moved yet.</p></blockquote></div><div><blockquote><p>The mouse moves a bit further, but the cursor still hasn't moved.\nThis is \"frame 2\".</p></blockquote></div><div><blockquote><p>This is the frame where the cursor starts moving.\nThis is \"frame 3\", so I would note down this sequence\nas taking 3 frames.</p></blockquote></div></div><ul><li>Distro: Fedora Workstation 41</li><li>GPU: AMD Radeon RX 7900XT</li><li>Monitor: Gigabyte M32U (4k IPS @ 144.99, no DPI scaling)</li><li>Mouse: Logitech G502 Lightspeed</li><li>Camera: iPhone 15 Pro, slo-mo 240 FPS</li></ul><p>The main limitations of this experiment are:</p><ul><li>240 FPS still isn't  much. With my 144Hz screen, I have less than\ntwo camera frames per screen refresh. This introduces some random variance.</li><li>Pixels don't switch instantly, so there are ambiguous frames where the cursor\nis  starting to become visible in its new location.\nI decided to count the cursor as \"having moved\" when there is a clearly visible\ncursor in a new location on the screen, even if the pixels haven't fully lit up.</li><li>For some reason, the video recording from my phone contains some duplicate frames.\nI don't know why this happens. I decided to interpret these duplicate frames\nas a representation of a frame's worth of time passing, so I counted them as normal.</li></ul><p>All these factors introduce some uncertainty in the results.\nHowever, they  affect Wayland and X11 equally, so with enough data,\nit should all even out.</p><p> Another caveat I should clearly point out is that there are\nmany other Wayland compositors out there than GNOME's, and I have not tested them.\nFor that matter, there are other GPU drivers out there than AMD's.\nOther compositors and other GPU drivers may show different results.</p><p>Here's the data I captured:</p><p>Wayland, on average, has roughly 6.5ms more cursor latency than X11 on my system.\nI don't have the statistics expertise necessary to properly analyze\nwhether this difference is statistically significant or not,\nbut to my untrained eye, it looks like there's a clear and consistent difference.</p><p>Interestingly, the difference is very close to 1 full screen refresh.\nI don't know whether or not that's a coincidence.</p><p>Here are the numbers in chart form:</p><p>In my mind, these results are conclusive proof that there  a difference\nin input latency between X11 and Wayland, at least with my hardware,\nand that the difference is large enough that it's plausible for some people to notice.</p><p>Further testing on more varied hardware and refresh rates is necessary\nto get a clear picture of how wide-spread the problem is and how large it is.\nIt's likely that the magnitude of the difference varies based on factors\nsuch as which compositor is used and what the refresh rate of the screen is.</p><p>I probably won't undertake that further testing,\nbecause this is all very time intensive work.\nMy goal was only to see if I could conclusively measure  difference.</p><p> I want to add a note here about what this testing does  show.\nIt does not show that there's higher input latency \nin Wayland compared to X11 in a way which affects, for example, games.\nIt is possible that this added latency is entirely cursor-specific\nand that Wayland and X11 exhibit the exact same input latency\nin graphical applications and games.\nIt is my understanding that the cursor is handled very differently from\nnormal graphical applications.\nFurther testing would be necessary to show whether Wayland has more input latency\n than X11.</p>","contentLength":5083,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42831509"},{"title":"Hard numbers in the Wayland vs X11 input latency discussion","url":"https://mort.coffee/home/wayland-input-latency/","date":1737909856,"author":"/u/mort96","guid":425,"unread":true,"content":"<p>Yesterday, I read this blog post:\n<a href=\"https://gist.github.com/generic-internet-user/e8eec46ce159571032115f6fb064523c\">Wayland Cursor Lag: Just give me a break already...</a>,\nwhere a Linux user discusses their frustration with input latency under Wayland.\nThey detailed their own subjective experience of the problem,\nbut failed to produce hard evidence.</p><p>Even though I'm a very happy user of wayland overall,\nI share the blog post's author's subjective impression that there's more\ncursor lag under Wayland than under X11.\nIn my opinion, their experiment was limited by their phone camera's 90 FPS,\nwhich really doesn't feel like it's enough to get conclusive numbers\nwhen we're talking about differences which are probably on the order of\nsingle screen refresh cycles.</p><p>So I thought: hey, I have a phone with a 240 FPS camera mode,\nI bet that's enough to get some conclusive results!</p><p>I simply pointed my phone's camera at the screen and desk using my left hand,\nmade sure to get the mouse cursor, the mouse and my right hand in frame,\nand recorded myself repeatedly flicking the mouse with my finger.\nI recorded myself flicking it 16 times under Wayland,\nlogged out of the GNOME Wayland session and into a GNOME X11 session,\nthen did the same there.</p><p>I then converted the two resulting video files into a series of JPEGs\nusing ffmpeg (<code>ffmpeg -i &lt;input file&gt; %04d.jpg</code>),\nand counted from the first frame where I could see the mouse move\nuntil the first frame where I could clearly see that the cursor had moved.</p><p>I elected to include the start and end frame;\nso if I saw the mouse move in frame 1045,\nthen I saw the cursor move in frame 1047,\nI would count that as 3 frames.</p><p>Here's an example which depicts a latency of 3 frames (requires JavaScript):</p><div><div><blockquote><p>Here's a frame from before the mouse has begun moving.</p></blockquote></div><div><blockquote><p>The mouse still hasn't moved.</p></blockquote></div><div><blockquote><p>Here, the mouse has just about started moving,\nso I consider this \"frame 1\".\nThe cursor hasn't moved yet.</p></blockquote></div><div><blockquote><p>The mouse moves a bit further, but the cursor still hasn't moved.\nThis is \"frame 2\".</p></blockquote></div><div><blockquote><p>This is the frame where the cursor starts moving.\nThis is \"frame 3\", so I would note down this sequence\nas taking 3 frames.</p></blockquote></div></div><ul><li>Distro: Fedora Workstation 41</li><li>GPU: AMD Radeon RX 7900XT</li><li>Monitor: Gigabyte M32U (4k IPS @ 144.99, no DPI scaling)</li><li>Mouse: Logitech G502 Lightspeed</li><li>Camera: iPhone 15 Pro, slo-mo 240 FPS</li></ul><p>The main limitations of this experiment are:</p><ul><li>240 FPS still isn't  much. With my 144Hz screen, I have less than\ntwo camera frames per screen refresh. This introduces some random variance.</li><li>Pixels don't switch instantly, so there are ambiguous frames where the cursor\nis  starting to become visible in its new location.\nI decided to count the cursor as \"having moved\" when there is a clearly visible\ncursor in a new location on the screen, even if the pixels haven't fully lit up.</li><li>For some reason, the video recording from my phone contains some duplicate frames.\nI don't know why this happens. I decided to interpret these duplicate frames\nas a representation of a frame's worth of time passing, so I counted them as normal.</li></ul><p>All these factors introduce some uncertainty in the results.\nHowever, they  affect Wayland and X11 equally, so with enough data,\nit should all even out.</p><p> Another caveat I should clearly point out is that there are\nmany other Wayland compositors out there than GNOME's, and I have not tested them.\nFor that matter, there are other GPU drivers out there than AMD's.\nOther compositors and other GPU drivers may show different results.</p><p>Here's the data I captured:</p><p>Wayland, on average, has roughly 6.5ms more cursor latency than X11 on my system.\nI don't have the statistics expertise necessary to properly analyze\nwhether this difference is statistically significant or not,\nbut to my untrained eye, it looks like there's a clear and consistent difference.</p><p>Interestingly, the difference is very close to 1 full screen refresh.\nI don't know whether or not that's a coincidence.</p><p>Here are the numbers in chart form:</p><p>In my mind, these results are conclusive proof that there  a difference\nin input latency between X11 and Wayland, at least with my hardware,\nand that the difference is large enough that it's plausible for some people to notice.</p><p>Further testing on more varied hardware and refresh rates is necessary\nto get a clear picture of how wide-spread the problem is and how large it is.\nIt's likely that the magnitude of the difference varies based on factors\nsuch as which compositor is used and what the refresh rate of the screen is.</p><p>I probably won't undertake that further testing,\nbecause this is all very time intensive work.\nMy goal was only to see if I could conclusively measure  difference.</p><p> I want to add a note here about what this testing does  show.\nIt does not show that there's higher input latency \nin Wayland compared to X11 in a way which affects, for example, games.\nIt is possible that this added latency is entirely cursor-specific\nand that Wayland and X11 exhibit the exact same input latency\nin graphical applications and games.\nIt is my understanding that the cursor is handled very differently from\nnormal graphical applications.\nFurther testing would be necessary to show whether Wayland has more input latency\n than X11.</p>","contentLength":5083,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/linux/comments/1iajb1o/hard_numbers_in_the_wayland_vs_x11_input_latency/"},{"title":"Linux 6.14 Brings Some Systems Faster Suspend and Resume","url":"https://linux.slashdot.org/story/25/01/25/2343225/linux-614-brings-some-systems-faster-suspend-and-resume?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1737909240,"author":"EditorDavid","guid":250,"unread":true,"content":"Amid the ongoing Linux 6.14 kernel development cycle, Phoronix spotted a pull request for ACPI updates which \"will allow for faster suspend and resume cycles on some systems.\" \n\nWikipedia defines ACPI as \"an open standard that operating systems can use to discover and configure computer hardware components\" for things like power management and putting unused hardware components to sleep. Phoronix reports:\n\nThe ACPI change worth highlighting for Linux 6.14 is switching from msleep() to usleep_range() within the acpi_os_sleep() call in the kernel. This reduces spurious sleep time due to timer inaccuracy. Linux ACPI/PM maintainer Rafael Wysocki of Intel who authored this change noted that it could \"spectacularly\" reduce the duration of system suspend and resume transitions on some systems... \n\nRafael explained in the patch making the sleep change: \n\n \"The extra delay added by msleep() to the sleep time value passed to it can be significant, roughly between 1.5 ns on systems with HZ = 1000 and as much as 15 ms on systems with HZ = 100, which is hardly acceptable, at least for small sleep time values.\" \nOne 2022 bug report complained a Dell XPS 13 using Thunderbolt took \"a full 8 seconds to suspend and a full 8 seconds to resume even though no physical devices are connected.\" In November an Intel engineer posted on the kernel mailing list that the fix gave a Dell XPS 13 a 42% improvement in kernel resume time (from 1943ms to 1127ms).","contentLength":1452,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"It's not a crime if we do it with an app","url":"https://pluralistic.net/2025/01/25/potatotrac/#carbo-loading","date":1737905093,"author":"keepit","guid":244,"unread":true,"content":"<p>The core regulatory proposition of the tech industry is \"it's not a crime if we do it with an app.\" It's not an unlicensed taxi if we do it with an app. It's not an illegal hotel room if we do it with an app. It's not an unregistered security if we do it with an app. It's not wage theft if we do it with an app.</p><p>Inflation is one of the most politically salient factors of this decade, and so much of inflation can be attributed to a crime, done with an app, with impunity for the criminals. The entire food supply has been sewn up by cartels of 2-5 giant companies, and they colluded to raise prices, and bragged about it, and got away with it, because neoclassical economists insist that it's impossible for this kind of price fixing to occur in an \"efficient market.\"</p><p>Some of these cartels are well-known, like the Coke/Pepsi duopoly. Pepsi's bosses boasted to their shareholders about \"Pepsi pricing power,\" and how they were able to raise prices over the inflationary increases caused by covid and the Russian invasion of Ukraine:</p><p>You might know that pretty much every packaged good in your grocery store is made by one of two companies, Unilever and Procter and Gamble. Both CEOs boasted to their investors about their above-inflation price increases:</p><p>But other cartels are harder to spot. It may seem like your grocer's eggs department is filled with many different companies' products. In reality, a single company, Cal-Maine Foods, owns practically every brand of eggs in the case: Farmhouse Eggs, Sunups, Sunny Meadow, Egg-Land‚Äôs Best and Land O‚Äô Lakes. They made record profits after the pandemic and through bird flu, a fact that CFO Max Bowman attributed to \"significantly higher selling prices\" and \"our ability to adapt to inflationary market pressures\":</p><p>But Cal-Maine is comparatively transparent. The other food cartels ‚Äì especially those that serve the restaurant sector ‚Äì are harder to spot. In , Katya Schwenk describes how four companies ‚Äì Lamb Weston, JR Simplot, McCain Foods and Cavendish Farms ‚Äì have captured the frozen potato market and all that comes with it (fries, tater tots, etc):</p><p>These companies have been hiking prices for years, but  started to turn the screws during the post-covid inflationary period. One of Schwenk's sources is Josh Saltzman, owner of the DC sports bar Ivy and Coney. Ten years ago, Saltzman charged $3 for fries; now it's $6 ‚Äì and Saltzman's margins have declined. Saltzman has a limited number of suppliers, and they all get their potatoes from Big Potato, and they bundle those potato orders with their other supplies, making it effectively impossible for Saltzman to buy his potatoes from anyone else.</p><p>Big Potato controls  of the frozen potato market, and any sector that large and concentrated is going to be pretty cozy. The execs at these companies all meet at industry associations, lobbying bodies, and as they job-hop between companies in the cartel. But they don't have to rely on personal connections to rig the price of potatoes: they do it through a third-party data-broker called Potatotrac. Each cartel member sends all their commercially sensitive data ‚Äì supply costs, pricing, sales figures ‚Äì to Potatotrac, and then Potatotrac uses that data to give \"advice\" to the cartel members about \"optimal pricing.\"</p><p>This is just price-fixing, with an app. The fact that they don't sit around a table and openly discuss pricing doesn't keep this from being price-fixing. What's more, they . A director at McCain said that \"higher ups\" forbade anyone in the company from competing on price. A Lamb Weston exec described the arrangement as everyone \"behaving themselves,\" chortling that they'd \"never seen margins this high in the history of the potato industry.\" Lamb Weston's CEO attributed a 111% increase in net income to \"pricing actions.\"</p><p>Lamb Weston's execs understand that they're driving small restaurants out of business, and that the real beneficiaries are big chains that can pass the price increases onto their customers, like \"Chili‚Äôs and the Texas Roadhouses and Cheesecake Factory\":</p><p>This is by no means unique to the potato industry. A data-broker called Agri Stats works with America's largest meat-packers to rig the price of meat ‚Äì packers send Agri Stats the same kind of data that Big Potato sends to Potatotrac, and Agri Stats sends back the same \"recommendations\" that allow them to raise meat prices across the board, in lockstep:</p><p>Lots of food categories are as inbred as meat and potatoes: \"four firms controlled nearly 80 percent of the almond milk market, for instance. Three companies controlled 83 percent of the canned tuna market, and four companies controlled more than 86 percent of the microwave popcorn market.\"</p><p>The \"price fixing is legal if we do it with an app\" gambit is not just about food, either. Apps like Realpage let big corporate landlords ‚Äì who've bought up a sizable fraction of all the available homes in America ‚Äì collude to raise rents:</p><p>And private equity companies have rolled up all the  companies, hiking the price of trucks, creating backlogs and bottlenecks for parts and service, and starving the nation's municipalities (including Los Angeles) of fire-fighting equipment:</p><p>This kind of price-fixing was central to the enforcement actions of the Biden administration's trustbusters at the FTC, and their investigations and actions inspired state AGs and private parties to bring their own antitrust suits. The question is, will Trump's enforcers continue this agenda? And will Trump's judges ‚Äì steeped in Heritage Foundation economics that insists that monopolies are \"efficient\" ‚Äì find in their favor if they do?</p><p>Inflation has lots of causes, it's true. But when an industry is consolidated enough to take advantage of a data brokerage or just engage in tacit collusion,  source of inflation ‚Äì war, disease, weather ‚Äì allows whole sectors to raise prices together, and keep them high, long after the shock has passed.</p><ul><li>Picks and Shovels: a sequel to \"Red Team Blues,\" about the heroic era of the PC, Tor Books, February 2025</li><li><p>Unauthorized Bread: a middle-grades graphic novel adapted from my novella about refugees, toasters and DRM, FirstSecond, 2025</p></li></ul><ul><li>Enshittification: a nonfiction book about platform decay for Farrar, Straus, Giroux. Status: second pass edit underway (readaloud)</li><li><p>A Little Brother short story about DIY insulin PLANNING</p></li><li><p>Picks and Shovels, a Martin Hench noir thriller about the heroic era of the PC. FORTHCOMING TOR BOOKS FEB 2025</p></li></ul><p>This work ‚Äì excluding any serialized fiction ‚Äì is licensed under a Creative Commons Attribution 4.0 license. That means you can use it any way you like, including commercially, provided that you attribute it to me, Cory Doctorow, and include a link to pluralistic.net.</p><p>Quotations and images are not included in this license; they are included either under a limitation or exception to copyright, or on the basis of a separate license. Please exercise caution.</p><p>Blog (no ads, tracking, or data-collection):</p><p>Newsletter (no ads, tracking, or data-collection):</p><p>Mastodon (no ads, tracking, or data-collection):</p><p>Medium (no ads, paywalled):</p><p>Twitter (mass-scale, unrestricted, third-party surveillance and advertising):</p><p>Tumblr (mass-scale, unrestricted, third-party surveillance and advertising):</p><p>\"<em>When life gives you SARS, you make sarsaparilla</em>\" -Joey \"Accordion Guy\" DeVilla</p>","contentLength":7342,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42830646"},{"title":"Someone has submitted my project on AUR.","url":"https://aur.archlinux.org/packages/bunster","date":1737905019,"author":"/u/yassinebenaid","guid":378,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/golang/comments/1iah7j9/someone_has_submitted_my_project_on_aur/"},{"title":"SQLC - migrating existing queries to a new schema","url":"https://www.reddit.com/r/golang/comments/1iaglnn/sqlc_migrating_existing_queries_to_a_new_schema/","date":1737903573,"author":"/u/Sliczzz","guid":373,"unread":true,"content":"<p>I've been happily using SQLC with Postgresql as an engine to enjoy type safe SQL in a project I've recently been working on. By now the application is quite mature and I have quite some queries (13 tables, 10-15 query files, 50-100 queries).</p><p>Now my application is evolving and I want to build another module, which needs its own separate schema. I could go all the way and split the application in two and have two databases, but for now a modular monolith with separate schemas will do just fine.</p><p>The problem I now have is that those queries/tables assume the schema being used is `public`. Now, I'd like to split my queries into 2 schemas (`game` and `lobby`), but from what I understand the only way to achieve this is to migrate every single query (and corresponding golang imports) to the new schema manually.</p><p>Is there a way to specify the schema context in which the queries are running and being generated without impacting the existing codebase too much (like, having to change all existing imports because the postgres schema changed)?</p>","contentLength":1041,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"No one is disrupting banks ‚Äì at least not the big ones","url":"https://www.popularfintech.com/p/no-one-is-disrupting-banks","date":1737900315,"author":"kazanins","guid":208,"unread":true,"content":"<p><strong>despite almost 30 years of trying, Fintech companies have not disrupted banks</strong></p><p><strong>they hardly challenged the key banking model - taking deposits and issuing loans</strong></p><p><strong>banks and Fintech companies will need to learn how to co-exist</strong></p><p><em><a href=\"https://x.com/jevgenijs\" rel=\"\">on X/Twitter</a></em></p><p><strong>The money center banks survived the ‚Äúdeposit flight‚Äù</strong></p><blockquote><p><em><strong>we expect to see a more visible growth trend</strong><strong>we can already see that trend in consumer checking deposits</strong></em></p><p><em>Jeremy Barnum, JPMorgan Q4 2024 earnings call</em></p></blockquote><p><strong>a perfect time for Fintech companies to get deposits</strong></p><p><strong>high-yield savings accounts to make people move their money from the incumbents</strong></p><p><strong>These customers want to bank with us now</strong></p><p><strong>for how long will Wells Fargo keep paying 4% to Cash App customers?</strong></p><blockquote><p><em><strong>these are the most valuable deposits in the franchise</strong></em></p><p><em>Alastair Borthwick, Bank of America Q4 2024 earnings call</em></p></blockquote><p><strong>At the end of Q3 2024, LendingClub had $9.5 billion in deposits, and SoFi had $24.4 billion</strong></p><p><strong>Fintechs haven‚Äôt managed to challenge banks in lending. </strong></p><p><strong>Affirm quickly got to 1.4 million Affirm Card cardholders</strong></p><p><strong>Robinhood claims that 2 million people are on the waitlist</strong></p><blockquote><p><em><strong>Robinhood Gold credit card crossed 2 million on the waitlist and is adding roughly 200,000 waitlist sign-ups per month</strong></em></p><p><em>Vlad Tenev, Robinhood 2024 Investor Day</em></p></blockquote><p><strong>in 2024, Amex opened 13 million new card accounts, Chase opened 10 million</strong></p><p><strong>JPMorgan finished 2024 with $233 billion in credit card loans</strong></p><blockquote><p><em><strong>We expect healthy card loan growth again this year, but below the 12% pace we saw in 2024</strong></em></p><p><em>Jeremy Barnum, JPMorgan Q4 2024 earnings call</em></p></blockquote><p><strong>last few years were ideal for building a credit card business as loan balances exploded</strong></p><blockquote><p><em><strong>a Fintech perspective on the consumer side, we really have not seen anything. Not that we don't look at it, not that we're not aware of it.</strong></em></p><p><em>Stephen Squeri, American Express Q4 2024 earnings call</em></p></blockquote><p><strong>Banks might be losing (or have already lost?) payment acceptance business to Fintech companies. </strong></p><blockquote><p><em><strong>have you considered about whether you should get rid of this business and deploy the capital to other areas where you're in a much stronger position</strong></em></p><p><em>Analyst‚Äôs question on U.S. Bank Q4 2024 earnings call</em></p></blockquote><p><strong>be losing the cross-border payments business</strong></p><p><strong>Ramp and Brex are certainly becoming a force in commercial cards</strong></p><blockquote><p><em><strong>we keep our eye on Ramp, Brex</strong><strong>they have good products, and they're making some inroads</strong></em></p><p><em>Stephen Squeri, American Express, Q4 2024 earnings call</em></p></blockquote><p><strong>‚Ä¶but (and that‚Äôs an important but!) big banks have figured out mobile too. </strong></p><p><strong>JPMorgan Chase reported 58 million active mobile users</strong></p><p><strong>threw billions on catching up with Fintech companies</strong><strong>still delivering crazy high profitability. </strong></p><blockquote><p><em><strong>we had probably reached peak modernization spend</strong><strong>to focus on features and new product development</strong></em></p><p><em>Jeremy Barnum, JPMorgan Q4 2024 earnings call</em></p></blockquote><p><strong>Fintech companies might be disrupting community banks, but was that the ambition? </strong></p><p><strong>a dozen or so largest banks (with $250+ in assets) generate 60% of the industry‚Äôs profit</strong></p><p><strong>banks and Fintech companies will need to learn how to co-exist</strong></p><div data-attrs=\"{&quot;url&quot;:&quot;https://www.popularfintech.com/p/no-one-is-disrupting-banks?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share&quot;,&quot;text&quot;:&quot;Share&quot;}\" data-component-name=\"CaptionedButtonToDOM\"><div><p>Thanks for reading Popular Fintech! This post is public so feel free to share it.</p></div></div><p><em>Disclaimer: Information contained in this newsletter is intended for educational and informational purposes only and should not be considered financial advice. You should do your own research or seek professional advice before making any investment decisions.</em></p>","contentLength":3243,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42830155"},{"title":"Break up with Adobe, switch to Linux","url":"https://youtu.be/lm51xZHZI6g?si=bl-gjEb2KGa2YKii","date":1737899242,"author":"/u/BulkyMix6581","guid":426,"unread":true,"content":"<!DOCTYPE html>","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/linux/comments/1iaexty/break_up_with_adobe_switch_to_linux/"},{"title":"sortedmap ‚Äì sorted map implementation for Go with a heap and iterators under the hood","url":"https://www.reddit.com/r/golang/comments/1iaeqla/sortedmap_sorted_map_implementation_for_go_with_a/","date":1737898681,"author":"/u/egregors","guid":375,"unread":true,"content":"<p>Check this out: a generic map that maintains order (by keys or values). To be honest, I was surprised not to find something like this in the current state of things. Perhaps it solves too specific problems, idk. But anyway, here is my implementation: <a href=\"https://github.com/egregors/sortedmap\">sortedmap</a>. I believe it could be useful for someone.</p><p>The constructor expects a custom  function to define the ordering rule. To maintain order, I use a generic heap of key-value pairs with an  insert time complexity. The map access API is mostly inspired by standard library  and .</p><p>The only thing I don‚Äôt really like is the  method. In the current implementation, it requires a full scan of the heap to find the key-value pair to remove. I‚Äôll probably find a more efficient way to handle this, but for now, in real-world use cases, it doesn‚Äôt seem like a major issue.</p><p><strong>Why do I need a sorted map?</strong></p><p>Quite simple: I need a recursive category tree that can be edited at runtime and must always remain ordered.</p>","contentLength":957,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Rust‚Äôs worst feature* (spoiler: it‚Äôs BorrowedBuf, I hate it with passion)","url":"https://mina86.com/2025/rusts-worst-feature/","date":1737893558,"author":"/u/mina86ng","guid":511,"unread":true,"content":"<p><small>* available in Rust nightly.</small></p><p>There are several aspects of Rust that I‚Äôm&nbsp;not particularly fond of but the one that takes the cake is <a href=\"//doc.rust-lang.org/core/io/struct.BorrowedBuf.html\"></a> which I despise with passion. It‚Äôs a&nbsp;nightly feature which puts in question my extreme emotions about it. On the other hand it means there‚Äôs time to stop it from getting stabilised and figure out something better.</p><p>In this article I‚Äôll describe the problem the feature addresses, the issues I&nbsp;have with the solution and describe some alternatives. As it turns out, things aren‚Äôt as easy as they seem on the first look.</p><p>Consider the  routine below which copies data between two I/O streams. On each iteration of the loop, it zero-initialises the buffer which wastes time considering that  will override the data. The compiler doesn‚Äôt know that and has no choice but to fill the array with zeros each time. Even an obvious optimisation of moving the buffer declaration outside of the loop isn‚Äôt available to the compiler.</p><pre>fn slow_copy(\n  mut rd: impl std::io::Read,\n  mut wr: impl std::io::Write,\n) -&gt; std::io::Result&lt;()&gt; {\n  loop {\n    let mut buf = [0; 4096];\n    let read = rd.read(&amp;mut buf)?;\n    if read == 0 {\n      break Ok(());\n    }\n    wr.write_all(&amp;buf[..read])?;\n  }\n}</pre><p>An attempt at a&nbsp;solution is to use  which makes it possible to declare a&nbsp;region of uninitialised memory. Some explicit pointer casting is necessary, but otherwise code using it is straightforward.</p><pre>use core::mem::MaybeUninit;\n\npub fn unsound_copy(\n    mut rd: impl std::io::Read\n    mut wr: impl std::io::Write,\n) -&gt; std::io::Result&lt;()&gt; {\n  loop {\n    let mut buf = [MaybeUninit::&lt;u8&gt;::uninit(); 4096];\n    // \n    // <i>For demonstration purposes only.</i>\n    let buf = unsafe {\n      &amp;mut *(&amp;mut buf as *mut [_] as *mut [u8])\n    };\n    let read = rd.read(buf)?;\n    if read == 0 {\n      break Ok(());\n    }\n    wr.write_all(&amp;buf[..read])?;\n  }\n}</pre><p>While replacing the array of zeros by an array of uninitialised values may work in specific circumstances, the code is unsound. Change to the compiler, its options, modification of unrelated parts of the code or using the function for a&nbsp;different  trait implementation may break the program in unpredictable ways.</p><p>The solution in nightly Rust is the  struct. It‚Äôs a&nbsp;bytes slice which remembers how much of it has been initialised. It doesn‚Äôt own the memory and operates on a&nbsp;borrowed buffer (hence the name). It can point at an array on the stack or a&nbsp;slice living on the heap (such as ‚Äôs spare capacity). A&nbsp;na√Øve use of the feature is the following:</p><pre>#![feature(core_io_borrowed_buf, read_buf)]\n\nuse core::io::BorrowedBuf;\nuse core::mem::MaybeUninit;\n\nfn almost_good_copy(\n    mut rd: impl std::io::Read,\n    mut wr: impl std::io::Write,\n) -&gt; std::io::Result&lt;()&gt; {\n  loop {\n    let mut buf = [MaybeUninit::uninit(); 4096];\n    let mut buf = BorrowedBuf::from(&amp;mut buf[..]);\n    rd.read_buf(buf.unfilled())?;\n    if buf.len() == 0 {\n      break Ok(());\n    }\n    wr.write_all(buf.filled())?;\n  }\n}</pre><h2>Issues with the </h2><p>While  appears to work as expected,  isn‚Äôt without its share of problems. I&nbsp;describe them below.</p><p>The  does not seamlessly integrate with existing Rust code. In fact quite the opposite. APIs need to support it explicitly. For example, many third-party  implementations do not provide  method. In its absence, the default version initialises the memory and calls  negating any potential benefits of .</p><p>Similarly, functions which take output slice as an argument‚Ää‚Äî‚Ääsuch as <a href=\"//docs.rs/rand/0.8.5/rand/trait.RngCore.html\">‚Äôs </a>‚Ää‚Äî‚Ääcould benefit from being able to write to uninitialised memory. However, to offer that benefit, they need to be changed to support . A&nbsp;motivated programmer can try adding necessary support to actively maintained packages, like , but what if one is stuck at an older version of the crate or deals with apparently abandoned crates like  or . To support those cases, forking would be necessary leading the programmer towards deeper circles of dependency hell.</p><p>Then again, should functions such as  integrate with  in the first place instead of taking an  argument? The issue with the latter is that there‚Äôs no safe way to convert  into .<a href=\"https://mina86.com/2025/rusts-worst-feature/#f1\"></a> As such, users who so far happily used such functions with regular initialised buffers would need convoluted incantation to make their previously straightforward code to compile. Meanwhile, creating  is somewhat convenient and can be done from initialised and uninitialised buffers alike.</p><p>In addition to , the  crate offers <a href=\"//docs.rs/rand/latest/rand/trait.Rng.html#method.fill\">a&nbsp; method</a> which fills a&nbsp;generic slice of integers with random data. It could easily work with  except that the struct works on  slices only. As a&nbsp;result, a&nbsp;crate which deals with different types cannot consistently use .</p><p>I&nbsp;don‚Äôt know the reasons why  is not generic. It‚Äôs possible that its design focused on addressing the the  trait use case only. Complications around dealing with  types could have been a&nbsp;contributing factor. However, even then the type could be generic on  types.</p><p> being optional brings another problem. Without full understanding of the behaviour and interactions of the  type, it‚Äôs easy to misuse it such as in . One can be excused from assuming that the function eliminates unnecessary initialisation. It declares an uninitialised region, wraps it in  and reads data into it. Even inspection of the assembly output <a href=\"//rust.godbolt.org/z/dvaPqz4co\">shows lack of the  call</a>.</p><p>Alas, while  avoids memory initialisation when reading data from a&nbsp;, it wastes time zeroing the buffer when, for example, decompressing data with help of <a href=\"//crates.io/crates/flate2\"> crate</a> (which does not offer custom  method) effectively becoming a&nbsp;.</p><p>Unless the underlying type is known, the programmer must assume that  may resort to filling the memory. The proper use of  is to construct it only once so that it can remember that the memory has been initialised.</p><pre>#![feature(core_io_borrowed_buf, read_buf)]\n\nuse core::io::BorrowedBuf;\nuse core::mem::MaybeUninit;\n\nfn copy(\n  mut rd: impl std::io::Read,\n  mut wr: impl std::io::Write,\n) -&gt; std::io::Result&lt;()&gt; {\n  let mut buf = [MaybeUninit::uninit(); 4096];\n  let mut buf = BorrowedBuf::from(&amp;mut buf[..]);\n  loop {\n    buf.clear();\n    rd.read_buf(buf.unfilled())?;\n    if buf.len() == 0 {\n      break Ok(());\n    }\n    wr.write_all(buf.filled())?;\n  }\n}</pre><p>With ‚Äôs complexity it‚Äôs not hard to imagine why people might use it in inefficient way. The struct is harder to understand than the unsound casting in . This may lead people to use the more straightforward option even if it‚Äôs not correct. An analogy to a&nbsp; with its contents and spare capacity partially helps‚Ää‚Äî‚Ääa&nbsp; has analogous filled and unfilled parts‚Ää‚Äî‚Ääbut is an oversimplified view. A&nbsp; is also split into initialised and uninitialised parts. The documentation visualises it as follows:</p><table><tbody></tbody></table><p>There are reasons for this madness. Consider loop in the  function above. If  only knew how much of it was filled, each call to  would lose the information about memory being initialised. In the default implementation of  it would need to unnecessarily zero the whole buffer. Separately storing information about how much of the buffer has been filled and initialised, let the type avoid double-initialisation of memory.</p><p>As an aside, I find modelling  as divided into filled and spare capacity with spare capacity further divided into initialised and uninitialised as more intuitive. Leaning into the analogy of  is in my opinion more natural and it helps by reinforcing terminology used in existing parts of the language rather than introducing new models.</p><table><tbody></tbody></table><p>Having looked at issues with , let‚Äôs consider what people actually want.<a href=\"https://mina86.com/2025/rusts-worst-feature/#f2\"></a> The easiest mental model is that uninitialised memory stores arbitrary data, unknown unless accessed. To achieve such semantics, the uninitialised memory would need to be . A&nbsp;frozen region becomes safe to read and can be accessed through regular Rust references. With freezing operation available, the buffer definition in the copying routine could be turned into something like:</p><pre>  let mut buf = [MaybeUninit::uninit(); 4096];\n  // SAFETY: u8 has no invalid bit patterns.\n  let buf = unsafe {\n    MaybeUninit::slice_freeze_mut(&amp;mut buf)\n  };</pre><pre>  let buf = MaybeUninit::frozen();\n  // SAFETY: u8 has no invalid bit patterns.\n  let mut buf: [u8; 4096] = unsafe { buf.assume_init() };</pre><p>Unsafe blocks are required to account for invalid bit patterns. With a&nbsp;trait like <a href=\"//docs.rs/bytemuck/latest/bytemuck/trait.AnyBitPattern.html\"></a>, a&nbsp;safe versions could exist. Either of those alternatives would require no new methods on the  trait and would work without any modifications on methods such as ‚Äôs .</p><h2>Why can‚Äôt we have what we want?</h2><p>Reading uninitialised memory is hardly an issue when analysing things on hardware level. So long as a&nbsp;memory address is mapped with proper permissions, accessing data from it will always produce some value. There‚Äôs no undefined behaviour there.<a href=\"https://mina86.com/2025/rusts-worst-feature/#f3\"></a> In fact, in typical Linux environment all newly allocated anonymous pages are zero-initialised.<a href=\"https://mina86.com/2025/rusts-worst-feature/#f4\"></a></p><figure><pre>tautology:\n  cmp  BYTE PTR [rdi], 0\n  je   tautology_ok\n  cmp  BYTE PTR [rdi], 0\n  jne  tautology_ok\n  mov  al, 0\n  ret\ntautology_ok:\n  mov  al, 1\n  ret</pre><figcaption>An x86 assembly function which checks whether value in memory is zero or non-zero. This seemingly tautological test can fail when operating on a&nbsp;memory page marked with  and the kernel changes the mapping in between the two memory reads.</figcaption></figure><p>Unfortunately, even when looking from the point of view of machine code, this analysis isn‚Äôt complete‚Ä¶</p><h3>Giving advice about use of memory</h3><p> flag of the <a href=\"//man7.org/linux/man-pages/man2/madvise.2.html\"></a> system call allows user space to advise the kernel that (until next write) it no longer cares about contents of specified anonymous pages. This optimisation enables the kernel to discard those pages without swapping them to disk. While the advice is in effect, the user space  access the memory, but has no guarantee whether it‚Äôll read the old values or zeros. Even code written directly in assembly language, like the  function on the right can result in unexpected behaviour.</p><p>This isn‚Äôt a&nbsp;theoretical concern either. jemalloc, a&nbsp;somewhat popular memory allocator, uses  when memory is freed. As a&nbsp;result, new allocations returned from the allocator may point to region of memory where the  advice is in effect. Nicholas Ormrod, in his <a href=\"//youtu.be/kPR8h4-qZdk?t=1150\">talk about C++  at Facebook</a>, describes how interaction between jemalloc,  and reading uninitialised memory resulted in outages.</p><p>To prevent this issue, the proposed  function would need to write into each page of the slice to make sure the kernel notices that the program cares about contents of the page again. This could be a simple loop stepping 4‚ÄäKiB at a time and look something like the following:</p><pre>pub unsafe fn slice_freeze_mut&lt;T&gt;(\n  slice: &amp;mut [MaybeUninit&lt;T&gt;]\n) -&gt; &amp;mut [T] {\n  const PAGE_SIZE: usize = 4096;\n  let ptr = slice.as_mut_ptr() as *mut _;\n  let len = slice.len() * size_of::&lt;T&gt;();\n  // SAFETY: It‚Äôs always safe to split MU object into MU bytes.\n  let bytes: &amp;mut [MaybeUninit&lt;u8&gt;] = unsafe {\n    core::slice::from_raw_parts(ptr, len);\n  };\n  for el in bytes.iter_mut().step_by(PAGE_SIZE) {\n    let p = el.as_mut_ptr();\n    // SAFETY: Unsafe without language semantics change\n    // since we‚Äôre reading uninitialised byte.\n    unsafe { p.write_volatile(p.read()) };\n  }\n  // SAFETY: Caller promises that T has no invalid bit patterns,\n  // but this is still unsafe without language semantics change\n  // since we haven‚Äôt initialised all the bytes.\n  unsafe { &amp;mut *(slice as *mut _ as *mut [T]) }\n}</pre><p>Unfortunately, this would hardly be the no-operation that people expect from writing into uninitialised memory. It would be an improvement over a full initialisation and would address some issues with  but would do that at the cost of unavoidable page touching.</p><p>It may seem that the second form‚Ää‚Äî‚Ääthe <code>MaybeUninit::frozen().assume_init()</code> variant‚Ää‚Äî‚Ääwhich creates frozen buffer directly on stack could be easier to optimise. The compiler controls the stack and unless it issues , no stack pages will be marked . Unfortunately it‚Äôs not clear that always hold true. For example, with async programming the stack lives God-knows-where and there may be other corner cases that would need to be considered.</p><p>I&nbsp;started this article with a&nbsp;promise of some alternatives to  and yet, as I&nbsp;conclude it, no working alternative is presented. Indeed, this is perhaps what frustrates me the most about the . On the face of it, writing data into uninitialised memory is a&nbsp;feature with an obvious solution, but it doesn‚Äôt take long before all the obvious solutions clash with Rust‚Äôs safety requirements.</p><p>So what‚Äôs a&nbsp;lowly programmer to do? Donald Knuth is often quoted as stating that ‚Äòpremature optimisation is the root of all evil‚Äô. True to that adage, in most cases it‚Äôs safe to pay the price of the memory initialisation. I/O operations usually take orders of magnitude more time so the time saved not initialising the memory is often negligible.</p><p>But there is more to Knuth‚Äôs quote:</p><blockquote><p>We  forget about small efficiencies, say about 97% of the time: premature optimisation is the root of all evil.</p><p>Yet we should not pass up our opportunities in that critical 3%. A&nbsp;good programmer will not be lulled into complacency by such reasoning, he will be wise to look carefully at the critical code; but only after that code has been identified.<a href=\"https://mina86.com/2025/rusts-worst-feature/#f5\"></a></p></blockquote><p>For the remaining 3%, the options now are somewhat bleak and depend on the particular code base. They may require switching to nightly compiler, patching third-party crates, going straight to doing unsafe syscalls (e.g. <a href=\"//man7.org/linux/man-pages/man2/read.2.html\"></a>) or isolating critical code paths and writing them in C.</p><p>And while we deal with the lack of ideal solution for writing to uninitialised memory, maybe someone will figure out some alternative fast and ergonomic approach.</p><p><a href=\"https://mina86.com/2025/rusts-worst-feature/#b1\">1</a> The reference conversion itself is safe since all possible values of type  are valid values of type  and both those types have the same layout. However, the latter allows writing arbitrary data into the object which may result in invalid representation of  (see <a href=\"//play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=72ca09295e9b98dfdd85a3af573aa0b9\">playground demonstration</a>). With interior mutability, even converting shared references may lead to issues.</p><p><a href=\"https://mina86.com/2025/rusts-worst-feature/#b2\">2</a> I&nbsp;am aware that I&nbsp;presumptuously speak for everyone. However, I&nbsp;do believe that alternatives presented here, if they existed, would be favoured by everyone and that includes contributors to the  struct. As I&nbsp;discuss later, the type is the way it is not because that‚Äôs what anyone finds appealing but due to other constraints.</p><p><a href=\"https://mina86.com/2025/rusts-worst-feature/#b3\">3</a> Semantics that reading uninitialised memory has arbitrary but consistent value can be useful in practice. Briggs and Torczon describe in <a href=\"//doi.org/10.1145/176454.176484\">An efficient representation for sparse sets</a> an algorithm which is built on such semantics.</p><p><a href=\"https://mina86.com/2025/rusts-worst-feature/#b3\">4</a> The atypical environment is ¬µClinux which runs on platforms without memory management unit (MMU). <a href=\"//www.kernel.org/doc/Documentation/admin-guide/mm/nommu-mmap.rst\">It supports  option</a> which skips zeroing of the memory region. However, even with that flag, allocated pages maintain consistent state.</p><p><a href=\"https://mina86.com/2025/rusts-worst-feature/#b5\">5</a> Donald E. Knuth. 1974. Structured Programming with  Statements. ACM Computing Surveys. Vol. 6, Issue 4 (Dec. 1974), 261‚Äì301. <a href=\"//doi.org/10.1145/356635.356640\">doi:10.1145/356635.356640</a>.</p>","contentLength":14955,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/rust/comments/1iad0lk/rusts_worst_feature_spoiler_its_borrowedbuf_i/"},{"title":"Show HN: Orange intelligence, an open source alternative to Apple Intelligence","url":"https://github.com/sharingan-no-kakashi/orange-intelligence","date":1737889379,"author":"MexicanYoda","guid":182,"unread":true,"content":"<p>Hi HN! I‚Äôm excited to share Orange Intelligence, an open-source alternative to Apple Intelligence for macOS.</p><p>Orange Intelligence allows you to interact with any text on your macOS system in a more powerful and customizable way. It brings a floating text processor that integrates seamlessly with your workflow. Whether you‚Äôre a developer, writer, or productivity enthusiast, this tool can boost your efficiency.\nKey Features:</p><pre><code>    Floating Text Processor: Trigger a floating window by double-tapping the Option key to process selected text.\n    Run Any Python Function: From basic text manipulations to running large language models (LLM) like OpenAI or local LLaMA, you can execute any Python function on the fly.\n    Full Customization: Want to add your own functions or logic? Just write them in Python, and they‚Äôll appear in the floating window.\n</code></pre>\nHow does it work?<pre><code>    Capture: Uses AppleScript to simulate a global Cmd+C and capture selected text from any active macOS app.\n    Process: A floating window pops up, letting you choose what to do with the text (run a function, format it, or apply an LLM).\n    Replace: After processing, the app returns focus to the original application and pastes the processed text back with a global Cmd+V.\n</code></pre>\nWhy open source?<p>I built this to overcome the limitations of Apple‚Äôs proprietary tools, and I wanted to make it fully customizable and extendable. Orange Intelligence is built with Python and PyQt6, so it‚Äôs easy to adapt, extend, and contribute to.</p><p>It‚Äôs not just a text processor‚Äîit‚Äôs a platform for building custom workflows, whether you want to automate simple tasks or integrate with complex AI systems.</p><p>I‚Äôm looking forward to your thoughts, ideas, and contributions. Thanks!</p>","contentLength":1736,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42829309"},{"title":"Release of ureq 3.0.0","url":"https://www.reddit.com/r/rust/comments/1iab9x8/release_of_ureq_300/","date":1737887633,"author":"/u/LovelyKarl","guid":512,"unread":true,"content":"<p><a href=\"https://crates.io/crates/ureq\">ureq 3.0.0</a> is released replacing the 2.x branch (which is still maintained).</p><p>3.x is a ground up rewrite with underpinnings of Sans-IO and retains . The library keeps most of the functionality of 2.x, but pivots to use the common <a href=\"https://crates.io/crates/http\"></a> crate as basis for the API.</p><p>The goals for ureq remain largely the same: A simple, sync, HTTP/1.1 client with a minimum number of dependencies.</p><p><a href=\"https://docs.rs/ureq/3.0.0/ureq/unversioned/transport/index.html\"></a> and <a href=\"https://docs.rs/ureq/3.0.0/ureq/unversioned/resolver/index.html\"></a> are now pluggable, meaning it's possible to use alternative socket implementations, TLS or name resolvers separate to the main project.</p><p>Happy to answer any questions.</p>","contentLength":541,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"'First AI software engineer' is bad at its job","url":"https://www.theregister.com/2025/01/23/ai_developer_devin_poor_reviews/","date":1737886945,"author":"/u/Wownever","guid":507,"unread":true,"content":"<p>A service described as \"the first AI software engineer\" appears to be rather bad at its job, based on a recent evaluation.</p><p>The auto-coder is called ‚ÄúDevin‚Äù and was <a target=\"_blank\" rel=\"nofollow\" href=\"https://www.cognition.ai/blog/introducing-devin\">introduced</a> in March 2024. The bot‚Äôs creator, an outfit called Cognition AI, has made claims such as ‚ÄúDevin can build and deploy apps end to end,\" and \"can autonomously find and fix bugs in codebases.\" The tool <a target=\"_blank\" rel=\"nofollow\" href=\"https://www.cognition.ai/blog/devin-generally-available\">reached general availability</a> in December 2024, starting at $500 per month.</p><p>\"Devin is an autonomous AI software engineer that can write, run and test code, helping software engineers work on personal tasks or their team projects,\" Cognition's <a target=\"_blank\" rel=\"nofollow\" href=\"https://docs.devin.ai/get-started/devin-intro\">documentation</a> declares. It \"can review PRs, support code migrations, respond to on-call issues, build web applications, and even perform personal assistant tasks like ordering your lunch on DoorDash so you can stay locked in on your codebase.\"</p><p>The service uses Slack as its main interface for commands, which are sent to its computing environment, a Docker container that hosts a terminal, browser, code editor, and planner. The AI agent supports API integration with external services. This allows it, for example, to send email messages on a user's behalf via SendGrid.</p><p>Devin is a \"<a target=\"_blank\" rel=\"nofollow\" href=\"https://cognition.ai/blog/evaluating-coding-agents\">compound AI system</a>,\" meaning it relies on multiple underlying AI models, a set that has included OpenAI's GPT-4o and can be expected to evolve over time.</p><p>In theory, you should be able to ask it to undertake tasks like migrating code to <a target=\"_blank\" rel=\"nofollow\" href=\"https://nbdev.fast.ai/\">nbdev</a>, a Jupyter Notebook development platform, and expect it to do so successfully. But that may be asking too much.</p><p>Early assessments of Devin have found problems. Cognition AI posted a <a target=\"_blank\" rel=\"nofollow\" href=\"https://www.youtube.com/watch?v=UTS2Hz96HYQ\">promo video</a> that supposedly showed the AI coder autonomously completing projects on the freelancer-for-hire platform Upwork. Software developer <a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/carlbrown\">Carl Brown</a> analyzed that vid and debunked it on his <a target=\"_blank\" rel=\"nofollow\" href=\"https://www.youtube.com/watch?v=tNmgmwEtoWE\">Internet of Bugs YouTube channel</a>.</p><p>Now, three data scientists affiliated with <a target=\"_blank\" rel=\"nofollow\" href=\"https://answer.ai\">Answer.AI</a>, an AI research and development lab founded by Jeremy Howard and Eric Ries, have <a target=\"_blank\" rel=\"nofollow\" href=\"https://devin.ai/\">tested Devin</a> and found it completed just three out of 20 tasks successfully.</p><p>In an <a target=\"_blank\" rel=\"nofollow\" href=\"https://www.answer.ai/posts/2025-01-08-devin.html#what-is-devin\">analysis</a> conducted earlier this month by <a target=\"_blank\" rel=\"nofollow\" href=\"https://hamel.dev/\">Hamel Husain</a>, <a target=\"_blank\" rel=\"nofollow\" href=\"https://isaac-flath.github.io/website/blog.html\">Isaac Flath</a>, and <a target=\"_blank\" rel=\"nofollow\" href=\"https://johnowhitaker.dev/\">Johno Whitaker</a>, Devin started well, successfully pulling data from a Notion database into Google Sheets. The AI agent also managed to create a planet tracker for checking claims about the historical positions of Jupiter and Saturn.</p><p>But as the three researchers continued their testing, they encountered problems.</p><p>\"Tasks that seemed straightforward often took days rather than hours, with Devin getting stuck in technical dead-ends or producing overly complex, unusable solutions,\" the researchers explain in their report. \"Even more concerning was Devin‚Äôs tendency to press forward with tasks that weren‚Äôt actually possible.\"</p><p>As an example, they cited how Devin, when asked to deploy multiple applications to the infrastructure deployment platform <a target=\"_blank\" rel=\"nofollow\" href=\"https://railway.com/\">Railway</a>, failed to understand this wasn't supported and spent more than a day trying approaches that didn't work and hallucinating non-existent features.</p><p>Of <a target=\"_blank\" rel=\"nofollow\" href=\"https://www.answer.ai/posts/2025-01-08-devin.html#appendix-tasks-attempted-with-devin\">20 tasks presented to Devin</a>, the AI software engineer completed just three of them satisfactorily ‚Äì the two cited above and a third challenge to research how to build a Discord bot in Python. Three other tasks produced inconclusive results, and 14 projects were outright failures.</p><p>The researchers said that Devin provided a polished user experience that was impressive when it worked.</p><p>\"But that‚Äôs the problem ‚Äì it rarely worked,\" they wrote.</p><p>\"More concerning was our inability to predict which tasks would succeed. Even tasks similar to our early wins would fail in complex, time-consuming ways. The autonomous nature that seemed promising became a liability ‚Äì Devin would spend days pursuing impossible solutions rather than recognizing fundamental blockers.\"</p><p>Cognition AI did not respond to a request for comment. ¬Æ</p>","contentLength":3870,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1iab2wq/first_ai_software_engineer_is_bad_at_its_job/"},{"title":"üîí What's OAuth2, anyway?","url":"https://www.romaglushko.com/blog/whats-aouth2/","date":1737886623,"author":"/u/roma-glushko","guid":506,"unread":true,"content":"<p>Have you ever logged into a website using your Google or Facebook account?\nOr connected an app to access your GitHub data? If so, you‚Äôve already used OAuth2, whether you knew it or not.</p><p>OAuth2 is the world‚Äôs most popular, extensible authorization framework.\nIt allows you to integrate a couple of systems together by delegating access to your data from one service to another.\nBut here is the thing - most people don‚Äôt really understand how OAuth2 really works.</p><p>Personally, I‚Äôve implemented several applications that were using OAuth2.\nThe process was so straightforward that I had no need to stop and think about the protocol itself along the way.\nThat‚Äôs by design. OAuth2 is built to be super simple to implement client applications, not to wrestle with complex authentication requirements.</p><p>But if we pause and dig deeper, there‚Äôs a lot to learn from the software engineering point of view.</p><p>In this article, we will uncover the ‚Äúwhys‚Äù behind the OAuth2 protocol design and\nbreak down the most common authentication grants.</p><p>It‚Äôs helpful to start with the historical context of the problem that OAuth2 was created to solve\nand consider alternatives we‚Äôd have without it.</p><p>Imagine we want to build a user-friendly deployment platform like Fly.io or Vercel.\nRight away, we hit the key problem: how can our customers import their code into our platform?</p><p>These days, almost everyone uses Git.\nWe could try building a Git hosting functionality directly into the platform,\nbut that‚Äôs a huge piece of work, while our primary business goal is resource management, autoscaling, load balancing, etc.\nOn top of that, most of our customers are probably already using one of the existing popular Git hosting services like GitHub, GitLab, or Bitbucket.\nUnfortunately, we don‚Äôt have any way to convince these platforms to integrate with us.</p><p>So, what‚Äôs our options? How could we possibly get access to our customers‚Äô Git repositories hosted elsewhere?</p><p>Our customers log into their Git hosting services using their credentials.\nWhy can‚Äôt they just share their credentials to us?</p><p>We could store their credentials securely and then, when needed, log in to the Git service on their behalf,\nuse their session cookies, and fetch the required Git repositories.</p><div>Plain User Credentials Sharing (sounds great, huh?)</div><p>At first glance, this sounds like a straightforward idea to let our platform work with customer data, even when they are not around.</p><p>But then we realize, it‚Äôs riddled with problems:</p><ul><li>. The platform gets full access to everything that our customers can do without a way to limit or control that, even if we only need to access their repositories.</li><li>. It‚Äôs hard to distinguish between sessions created by the users and those initialized by the platform. If the login process is the same for both, it‚Äôs hard to implement more advanced login security measures like MFA.</li><li>. Once shared, the credentials can be cached and leaked in unexpected ways even if you removed them from the platform UI. The only way to fully revoke access is to change your password.</li><li>. If you change your password, this would effectively break the platform‚Äôs access to your data.</li><li>. The platform must store the credentials securely, which is a significant responsibility. If the shared credentials are managed in a sloppy way, they may be breached and expose the whole customer account.</li></ul><p>It‚Äôs a problem that one and the same set of credentials with broad, top level permissions are used for two vastly different purposes.\nWhat could we do about that?</p><p>Apparently, if we want to do any better, we need to keep the main credentials private.\nInstead, we could introduce an alternative type of credentials just for using in integrations.</p><p>Let‚Äôs call these Personal Access Tokens (PATs). Think of them as a static secret string with a relatively long lifespan.\nTechnically, each PAT could have a custom set of permissions assigned to it, limiting what the platform can do with the associated data.</p><p>Whenever a customer wants to integrate Git repositories with a new service, like our deployment platform, they would generate a new personal access token with the necessary permissions  and share it with the service.</p><div>Personal Access Tokens Sharing</div><p>This approach is a great improvement over sharing the plain credentials, since it addresses its major problems.\nHowever, there are still a couple of things to keep in mind:</p><ul><li>Keeping track of expiration dates and replacing stale tokens gets tedious very quickly if you need to manage more than a handful of tokens.</li><li>To minimize the management burden, token lifetime could be extended (we are talking about months or even years). Unfortunately, in that case, a token gets compromised, malicious actors will have plenty of time to exploit it.</li></ul><p>But do customers really need to manage their tokens for every service and integration they use?\nCould we simplify this further, so customers will have to do as little as possible to enable new integrations and the whole token management process is automated by the party that needs it?</p><p>That‚Äôs exactly why we need something like the OAuth framework.</p><p><a href=\"https://datatracker.ietf.org/doc/html/rfc6749\" target=\"_blank\" rel=\"noopener noreferrer\">OAuth2</a> is a framework that defines how access or permissions are requested or delegated from one\nan authoritative entity (like the user) to third-party applications.</p><p>The core idea behind OAuth2 is to give users the power to decide what applications (beyond those that are natively supported by the resource server)\ncan access their data. It ensures that the access is controlled and convenient, allowing these applications use your data whenever they need to, even when you‚Äôre not around, to extend the base functionality of the resource server.\nLet‚Äôs break it down a bit.</p><p>Without mechanisms like OAuth2, the resource server essentially controls which applications can access with your data.\nI imagine this happens through partnerships, where two companies collaborate to integrate their services into each other‚Äôs offerings (often in a very custom, non-standardized way).</p><p>This approach is centralized because:</p><ul><li>Only allowed partner‚Äôs applications are at play</li><li>Everything else is effectively blocked.</li></ul><p>OAuth2 introduces a middle ground, allowing the third-party applications to use the resource server, as long as users are willing to\ngrant permissions to their data or functionality. In this model, the resource server decides nothing for end users (unless it‚Äôs blocking malicious applications to protect users from abuse).</p><p>This creates a powerful form of decentralization that:</p><ul><li>Let resource owner extend the resource server‚Äôs functionality in a few clicks</li><li>Help to build an ecosystem of tools and applications around the resource server</li></ul><p>OAuth2 defines three main roles to organize the delegation process:</p><ul><li>. This is a service that the client application needs to access, either on user or their own behalf. For example, in our case, it‚Äôs the Git hosting provider like GitHub.</li><li> (the user if it‚Äôs a person). The entity that holds permissions to the resource server and can grant access to the client application.</li><li>. This service issues resource access tokens for the client application in exchange for various forms of authorization or grants.</li><li> (a.k.a. the client, OAuth application). An application or service that accesses the protected resource server, typically on behalf of the resource owner.</li></ul><div>OAuth2 Roles and High-Level Interactions Between Them</div><p>OAuth2 introduces the Authorization Server, acts as a middleman between\nthe Resource Owner (who has the authority) and the Client Application (that needs some of that authority).\nThe Authorization Server is trusted by the target Resource Server (which provides some functionality based on the authority).</p><p>The Resource Owner reviews the permission request and gives a consent to grant the access to the Client Application via the Authorization Server.</p><p>Depending on <a href=\"https://www.romaglushko.com/blog/whats-aouth2/#oauth2-flows\">the authorization flow</a>, the Client Application receives an authorization grant in some form and uses it to trade for an access token (or a pair of tokens)\nfrom the Authorization Server.</p><p>Finally, the Client Application uses the access token to access the Resource Server on behalf of the Resource Owner.</p><p>The Resource Server knows how to validate <a href=\"https://www.romaglushko.com/blog/whats-aouth2/#access-tokens\">the access tokens</a> issued by the Authorization Server, typically through an internal request to the Authorization Server.</p><p>The journey into the OAuth2 world begins with Client Applications.\nThere are two types of Client Applications, categorized by their abilities to keep secrets:</p><ul><li> like in-browser JS applications, desktop or native mobile apps. Any secrets embedded in this type of application can be reverse-engineered and extracted, even if you try to obfuscate their distributions or encrypt them.</li><li><strong>Private (or confidential) applications</strong>, which are typically any web applications with frontend and, most importantly, backend parts. The backend is capable of securely storing secrets and establishing protected communication with the Authorization Server.</li></ul><p>OAuth2 assumes there are much more Client Applications than Authorization and Resource Servers,\nso it aims to simplify the Client Application side as much as possible.\nThis not only reduces the work to do to implement a Client Application, but also limits opportunity for implementing insecure Clients.</p><p>To plug our Client Applications into the OAuth2 workflow, they first need to be registered with the Authorization Server.</p><p>The OAuth2 doesn‚Äôt make any assumptions how the registration process should work,\nbut it‚Äôs typically a part of the OAuth2 provider website‚Äôs settings e.g. functionality to create and manage OAuth apps.</p><div>The Gitlab OAuth Client Registration</div><p>The registration form usually includes:</p><ul><li>Redirect URL(s) - A list of allowed URLs for redirects in interactive authorization flows, such as the <a href=\"https://www.romaglushko.com/blog/whats-aouth2/#authorization-code\">authorization code</a> or <a href=\"https://www.romaglushko.com/blog/whats-aouth2/#implicit\">implicit</a> flows.</li><li><a href=\"https://www.romaglushko.com/blog/whats-aouth2/#scopes\">Scopes</a> - A list of delegated access to the Resource Server‚Äôs functionality e.g. read Git repositories, create issues, etc.</li><li>Miscellaneous information like application name, icon, privacy and terms of service URLs, etc.</li></ul><p>There are other, less popular client registration approaches. For example, I‚Äôve seen:</p><ul><li>Registration via internal admin requests to the Authorization Server like <a href=\"https://github.com/ory/hydra/tree/master\" target=\"_blank\" rel=\"noopener noreferrer\">ORY Hydra</a>.</li><li>Declarative registration by creating Kubernetes Custom Resources in the cluster using <a href=\"https://github.com/ory/hydra-maester\" target=\"_blank\" rel=\"noopener noreferrer\">ORY Hydra Maester</a>.</li></ul><p>At the end of registration, you typically receive the client credentials:</p><ul><li> (a.k.a App ID) - a public, non-secret identifier of your Client Application.</li><li> - a secret password that the Client Application keeps privately.</li></ul><p>The client credentials are used to:</p><ul><li>authenticate the Client Application requests to the Authorization Server</li><li>bind <a href=\"https://www.romaglushko.com/blog/whats-aouth2/#oauth2-flows\">a specific authorization flow</a> to the Client Application that has started it. This ensures it‚Äôs not possible to finish that flow with completely different Client Application</li></ul><p>The client ID is tied to authorization grants and refresh tokens, so it‚Äôs essential to keep it unchanged.\nChanging it would invalidate all authorizations (e.g. <a href=\"https://www.romaglushko.com/blog/whats-aouth2/#refresh-tokens\">refresh tokens</a>) that you‚Äôve already obtained.</p><p>On the other hand, the client secret can, and should be, rotated periodically.\nChanging the secret would have an effect of ‚Äúrotation‚Äù of all refresh tokens received by the Client Application\neven though the tokens would not be affected.\nThis is because if the client credentials were leaked along with some refresh tokens,\nmalicious actors would not be able to obtain new access tokens using the old client secret after the client secret rotation.</p><p>This significantly simplifies the process of secret rotation as you need to rotate only one secret\ninstead of rotating thousands of refresh tokens for each end user that has ever authorized your Client Application.</p><p>In practice, you may want to also have a bunch of others that are not defined in OAuth2 directly:</p><ul><li><strong>Access token introspection endpoint</strong> (it has its own <a href=\"https://www.rfc-editor.org/rfc/rfc7662.html\" target=\"_blank\" rel=\"noopener noreferrer\">RFC</a>) that returns metadata information associated with the given access token. It can be used by resource servers to validate incoming access tokens.</li><li><strong>Authorization grant revocation endpoint</strong> that allows it to revoke the whole authorization grant.</li><li><strong>Token revocation endpoint</strong> that allows to revoke the issued access and refresh tokens.</li><li>and a bulk of other endpoints that were introduced in the all follow-up RFCs and drafts if you need that.</li></ul><p>Historically, the Authorization Server OAuth2 endpoints were not fixed nor was there a way to discover them.\nThe endpoints were extracted by the provider documentation and hardcoded in the OAuth2 libraries or Client Application\n(here is <a href=\"https://github.com/markbates/goth/blob/master/providers/github/github.go#L29-L34\" target=\"_blank\" rel=\"noopener noreferrer\">an example</a> from the goth library).</p><p>The Authorization Server is represented as a separate component conceptually, but the protocol has no requirements on how it should be implemented under the hood.\nIt could be either a separate microservice, or it can be a part of the Resource Server.</p><p>One important assumption that OAuth2 protocol makes implicitly is that one authorization server can potentially handle authorizations for multiple Resource Servers.\nThis means that among all OAuth2 components, the Authorization Servers are the rarest to implement.\nThat‚Äôs why they are responsible for handling <a href=\"https://datatracker.ietf.org/doc/html/rfc6819\" target=\"_blank\" rel=\"noopener noreferrer\">a lot of security nuances</a> around the Authorization Server implementations.\nYour OAuth2 is essentially as secure as your Authorization Server.</p><p>The Authorization Server generates access tokens as a result of the successful authorization flow.</p><p>The access tokens are a special credential that serves as an alternative method of authentication for the Resource Server.\nThey can be also seen as an abstraction around the exact authorization flow.\nThere could be multiple authorization flows supported by the Authorization Server, but they all will result in access tokens that have the same format.\nThis makes them easier to validate for the Resource Server that doesn‚Äôt need to know too much information about how the specific token was obtained.</p><div>Access Tokens unifies the authorization flows</div><p>The concept of access token is also important because we can generate multiple access tokens with different reduced subset of <a href=\"https://www.romaglushko.com/blog/whats-aouth2/#scopes\">the originally requested scopes</a>.\nIf there was no access tokens as a separate credential and we were using <a href=\"https://www.romaglushko.com/blog/whats-aouth2/#authorization-code\">the authorization code</a>,\nlet‚Äôs say, for that purpose, it would have all permission scopes requested by the client application at the point of passing authorization flow.</p><p>OAuth2 doesn‚Äôt define how the access tokens should look like.\nThey are opaque strings to the Client Applications and likely Resource Servers too.</p><p>Apart from that, when an access token is generated, the Authorization Server indicates what type of token was issued.</p><p>In the wild, Authorization Servers may issue bearer tokens as:</p><ul><li>a unique random string. The string should be non-guessable and not possible to generate outside the Authorization Server.</li><li>or as a self-contained JWT token that includes the signed meta information.</li></ul><p>Other types of tokens are theoretically possible, but I have never seen them in the wild.</p><p>OAuth2 requires Authorization Servers to generate access tokens only.\nIf so, the generated token is considered as a long-lived and that‚Äôs not great for two reasons:</p><ul><li>The access tokens are linked to the client application, but they are usually passed to the resource server without any additional proof of token possession. Hence, if they are leaked, the malicious actors would have enough time to exploit them.</li><li>The access token is linked to the original access scopes and there is no way to generate a new access token with a subset of scopes without going through the whole authorization flow again.</li></ul><p>To address these concerns, it‚Äôs the best practice to keep access tokens short-lived.\nAlong with that, you can generate a separate, long-lived token that generates you fresh access tokens as needed.\nThis type of token is called <a href=\"https://www.romaglushko.com/blog/whats-aouth2/#refresh-tokens\">refresh token</a>.</p><p>Authorization scopes are a set of functionalities that the Resource Owner delegates to the Client Application,\nallowing the Client to access resources as thought it were the original owner.</p><p>The scopes are simply a space-separated list of strings, where each string specifies a particular access type.\nThe scope format is not defined in the OAuth2 protocol, but they are normally structured like this: <code>{resource}_{access level}</code>.</p><ul><li> may allow the Client to read the current user (e.g. Resource Owner) profile information</li><li> may allow the Client Application to commit to the repositories to which the Resource Owner has access to.</li></ul><p>As you can see, the scopes are fairly coarse-grained, they don‚Äôt grant access to specific resources,\nbut rather work on the resource types and access levels (e.g. read/write/admin).</p><p>Scopes are additive, meaning when multiple scopes are requested, they are combined to broaden the Client Application‚Äôs or access token‚Äôs permissions.</p><p>Authorization flows, also known as authorization grants, are how permissions are delegated to the Client Applications.\nRegardless of the flow you use, the end result is <a href=\"https://www.romaglushko.com/blog/whats-aouth2/#access-tokens\">a set of access tokens</a> that enable the Client Application to directly access the Resource Server.</p><p>The main differences between flows are:</p><ul><li>whenever it‚Äôs interactive or non</li><li>the number of participants involved (2- or 3-leg flows)</li></ul><p>We‚Äôll start by reviewing the most canonical and secure OAuth2 flow called the authorization code flow.</p><p>This flow is interactive and works for Client Applications that can keep secrets and perform browser redirects, typical for web services with a backend.</p><p>The flow consists of two stages:</p><div>OAuth2 Authorization Code Flow</div><p>The whole authorization code flow can be divided into two main parts:</p><ul><li>The interactions that happen indirectly between the Authorization Server and the Client Application using the browser as a mediator. These actions are performed via the frontend channel and can be potentially intercepted or manipulated along the way (e.g. a malicious browser extension may try to sniff the code parameters).</li><li>The interactions occur directly between Authorization Server and the client via trusted backend channel.</li></ul><p>The authorization code flow is designed so that it‚Äôs not possible to get access delegation by using only information transmitted via the frontend channel.</p><p>In order to start the OAuth2 flow, the client application needs to request the authorization with the needed scopes from the Resource Owner.\nThis happens by redirecting the resource owner to the authorization server‚Äôs  endpoint.</p><p>The authorization URL usually contains the following URL parameters:</p><div data-rehype-pretty-code-fragment=\"\"><pre data-language=\"http\" data-theme=\"dark\"><code data-language=\"http\" data-theme=\"dark\"></code></pre><pre data-language=\"http\" data-theme=\"light\"><code data-language=\"http\" data-theme=\"light\"></code></pre></div><ul><li>The  is what defines what kind of interactive flow we are going to perform. It‚Äôs always  for the authorization code flow (or  for <a href=\"https://www.romaglushko.com/blog/whats-aouth2/#implicit\">the implicit flow</a>).</li><li>The  is required as the authorization code is strictly assigned to the client application that has initialized the flow (to prohibit finishing the flow from another Client Application).</li><li>The  is the URL of the client application callback page where the authorization code will be passed after\nthe authorization consent. This URL must be specified in <a href=\"https://www.romaglushko.com/blog/whats-aouth2/#client-registration\">the client registration settings</a>.</li></ul><p>The Resource Owner browser should already have a user session (e.g. session cookie) with the Authorization Server (or login otherwise),\nso the redirect can leverage that to seamlessly show the authorization consent screen.</p><div>The Example of the Authorization Consent Screen</div><p>Let‚Äôs note that the client application communicates with the Authorization Server indirectly via HTTP redirects\nand the Resource Owner browser. This way the Client Application doesn‚Äôt have to know about the Resource Owner credentials or session\nwhich is itself the key problem the OAuth2 protocol was born to solve.</p><p>Because of that, the authorization consent page should not have any client-specific CORS configuration.\nThis remains true for all OAuth2 flows.</p><p>Once the Resource Owner approves the delegation of access to the Client Application, the Authorization Server redirects\nthe Resource Owner back to the Client Application callback URL specified during the authorization request.</p><p>The client callback redirect looks like this:</p><div data-rehype-pretty-code-fragment=\"\"><pre data-language=\"http\" data-theme=\"dark\"><code data-language=\"http\" data-theme=\"dark\"></code></pre><pre data-language=\"http\" data-theme=\"light\"><code data-language=\"http\" data-theme=\"light\"></code></pre></div><ul><li>the  parameter is called the authorization code (it gives this flow its name).</li><li>the  is returned back if it was specified originally to let the Client Application verify the integrity of the flow.</li></ul><p>The authorization code is a one-time-use token that represents the specific Resource Owner‚Äôs consent to give to the specific Client Application.\nIt is tied to the client ID that has obtained it, so it‚Äôs not possible to exchange it from another Client Application.\nSo even if the code was leaked somehow, you would need to have valid client credentials to turn it into access tokens.</p><p>Finally, to finish the flow, we need to exchange the authorization code for the access tokens.\nThis is done via the OAuth2 token endpoint:</p><div data-rehype-pretty-code-fragment=\"\"><pre data-language=\"http\" data-theme=\"dark\"><code data-language=\"http\" data-theme=\"dark\"></code></pre><pre data-language=\"http\" data-theme=\"light\"><code data-language=\"http\" data-theme=\"light\"></code></pre></div><ul><li>The  defines what kind of flow or grant we want to use to trade for access tokens. It‚Äôs a universal endpoint used in the other flows too, but in the case of this flow, it‚Äôs always going to be .</li><li>The  is mandatory to provide in the authorization code exchange.</li></ul><p>In response, if everything went fine, you would get response like this:</p><div data-rehype-pretty-code-fragment=\"\"><pre data-language=\"json\" data-theme=\"dark\"><code data-language=\"json\" data-theme=\"dark\"></code></pre><pre data-language=\"json\" data-theme=\"light\"><code data-language=\"json\" data-theme=\"light\"></code></pre></div><p>That‚Äôs all. Now you need to persist the access and refresh tokens and use them to access the Resource Server.</p><p>The analysis of real-world attacks on the authorization flows has shown that it can be further secured.\nSpecifically, malicious actors can intercept the authorization code or try to inject it into the callback URL to do token exchange via unauthorized workflows.\nThese attack vectors are the most probable in public applications like native applications.</p><p>PKCE is a simple way to prove that the authorization code was obtained via the legitimate authorization request.\nThe beauty of PKCE is that it just slightly extends the authorization &amp; token requests without major changes to the flow.</p><div>OAuth2 Authorize Code with PKCE</div><ul><li>The Client Applications generate a random string called the  and then hash it with a cryptographically secure algorithm as SHA256. The hashed value is called the .</li><li>The Client Application keeps the original  privately and shares the  and the hash code (e.g. ) as query params in the authorization request.</li><li>The Authorization Server remembers the  and the . No other changes are needed to the existing Authorization Server responses.</li><li>Then, the client sends the  during token exchange. The Authorization Server computes the hash of that value and compares it with the  passed during the authorization request.</li></ul><p>PKCE supports two hashing methods:</p><ul><li> - the SHA256 hashing algorithm</li></ul><div data-rehype-pretty-code-fragment=\"\"><pre data-language=\"plain\" data-theme=\"dark\"><code data-language=\"plain\" data-theme=\"dark\"></code></pre><pre data-language=\"plain\" data-theme=\"light\"><code data-language=\"plain\" data-theme=\"light\"></code></pre></div><ul><li> - the plain text method. It‚Äôs basically just <code>code_challenge = code_verifier</code>. The  method should be avoided as it doesn‚Äôt really introduce any challenges. It can only protect you from attacks where nefarious actors can intercept the Authorization Server responses.</li></ul><p>The PKCE extension allows the public clients to finally leverage the authorization code flow securely.\nHowever, the Authorization Server must be ready to support PKCE for public clients which boils down to not requiring these clients to provide any client secrets.</p><p>The refresh token is an optional but highly recommended additional token that <a href=\"https://www.romaglushko.com/blog/whats-aouth2/#code-exchange\">the OAuth2 token endpoint</a> can return to you.\nUnlike <a href=\"https://www.romaglushko.com/blog/whats-aouth2/#access-tokens\">the access token</a>, the refresh token is meant to be a long-lived token (either no expiration time or an extended period of time like half a year)\nthat is sent to the authorization server only.</p><p>Essentially, the refresh token is an ‚Äúinternal‚Äù authorization grant because it implies the authorization that the resource owner has given to the Client Application.</p><p>The refresh token is important for two reasons:</p><ul><li>it allows to keep access tokens short-lived, so minimize the attack surface if they are leaked</li><li>it allows to the generation of access tokens with the reduced access scope that is more limited than the scopes granted to the Client Application during authorization. This enables the clients to implement the least privilege principle on their side.</li></ul><div>OAuth2 Refresh Token Flow</div><p>In order to refresh your access token, you send a request to the OAuth2 token endpoint with the  set to :</p><div data-rehype-pretty-code-fragment=\"\"><pre data-language=\"http\" data-theme=\"dark\"><code data-language=\"http\" data-theme=\"dark\"></code></pre><pre data-language=\"http\" data-theme=\"light\"><code data-language=\"http\" data-theme=\"light\"></code></pre></div><p>The refresh token is linked to the specific client credentials, so it‚Äôs not possible to leverage it with an unauthorized client.</p><p>The refresh token request generally returns the same response as we have seen in the <a href=\"https://www.romaglushko.com/blog/whats-aouth2/#code-exchange\">authorization code exchange</a>.\nIt contains the new active access token, its expiration time and the actual access scopes.\nIn some cases (GitHub and GitLab do this, for instance), the refresh token request may actually also refresh your previous refresh token, so if the token response\ncontains the  field and it‚Äôs different from your current refresh token, it means that this is your new refresh token to persist and use going forward.</p><p>The refresh token request generally invalidates all previous access tokens (and refresh tokens).</p><p>We have said that <a href=\"https://www.romaglushko.com/blog/whats-aouth2/#authorization-code\">the authorization code flow</a> is designed to make it impossible to\nget Resource Owner delegation by using only information passed via the frontend channel (e.g. the authorization code and client ID).\nIn order to achieve this, that flow requires the Client Application to have a secure backend channel.\nBut what if the application is public and doesn‚Äôt have a place to put a secret, so it remains a secret?</p><p>The original OAuth2 specification introduced a simplified version of the authorization code flow\nthat makes a significant security trade-off in order to support public applications, first of all, in-browser JS applications\nlike browser extensions or single page applications (SPAs) without backends. It‚Äôs called the implicit flow.</p><p>The implicit flow is also an interactive, redirect-based flow, but there is no explicit code exchange via the backend channel.\nInstead, it happens implicitly and the Client Application just receives the access token in the callback URL.</p><p>The authorization request looks close to what we have seen in the authorization code but\nthis time we have to specify  as :</p><div data-rehype-pretty-code-fragment=\"\"><pre data-language=\"http\" data-theme=\"dark\"><code data-language=\"http\" data-theme=\"dark\"></code></pre><pre data-language=\"http\" data-theme=\"light\"><code data-language=\"http\" data-theme=\"light\"></code></pre></div><p>In JS applications, there are a few ways you can do this request:</p><ul><li>Do a full-page redirect to the Authorization Server</li><li>Open a separate popup window and do the redirect there and then close it when the callback URL is hit.</li></ul><p>If you specify the authorization  parameter, the best place to temporarily persist it will be <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage\" target=\"_blank\" rel=\"noopener noreferrer\">window.sessionStorage</a>.</p><p>Once the Resource Owner approves the delegation, the Authorization Server redirects them back to the client callback URL which would look like this:</p><div data-rehype-pretty-code-fragment=\"\"><pre data-language=\"http\" data-theme=\"dark\"><code data-language=\"http\" data-theme=\"dark\"></code></pre><pre data-language=\"http\" data-theme=\"light\"><code data-language=\"http\" data-theme=\"light\"></code></pre></div><p>The  is returned right away in the callback URL along with other parameters. This is a simple GET request,\nso the sensitive access token is a part of the URL and can be potentially intercepted by other browser extensions, malicious scripts injected via XSS attacks, etc.\nAdditionally, the whole callback URL is cached in the browser history along with the access token.\nThat‚Äôs the main reason why the implicit flow is considered insecure.</p><p>All parameters are returned as URL fragments which means they are intended to be used by browser client applications only (e.g. not shared with any backend servers).</p><p>Since in-browser applications cannot keep secrets, the returned access token is super short-lived (like 1-2 hours).\nFor the same reason, OAuth2 requires no refresh tokens in the implicit flow.</p><p>Finally, the Client Application can use the retrieved access token to access the Resource Server in the same way we have seen in the authorization code flow.\nThere is one specific though. The Resource Server should be ready to accept these in-browser application requests\nby having CORS policies configured.</p><p>Looking back, there are basically two pieces of information that help to identify validity of the client in the implicit flow:</p><p>There is no client secret or any other sensitive information to put into the public client application.</p><p>Let‚Äôs continue our what-if thought process. What if there is no resource owner and the Client Application wants to act on its own behalf?</p><p>This is a common situation when you have a dozen of internal services that have to communicate with each other and you want to secure that communication somehow\nto create a zero-trust environment.</p><p>In this case, there is no Resource Owner involved, so there is no need for the whole frontend channel to be involved.\nAll we need is to make the Authorization Server accept the client credentials as a valid reason to issue the access tokens.\nTherefore, this flow is called the client credentials flow.</p><div>OAuth2 Client Credentials Flow</div><p>The client credentials flow is a non-interactive flow that enables confidential trusted Client Applications\nto access the Resource Server (or other internal Client Application).\nSo the only request we need here is to the token endpoint:</p><div data-rehype-pretty-code-fragment=\"\"><pre data-language=\"http\" data-theme=\"dark\"><code data-language=\"http\" data-theme=\"dark\"></code></pre><pre data-language=\"http\" data-theme=\"light\"><code data-language=\"http\" data-theme=\"light\"></code></pre></div><ul><li>The  is set to  to indicate that validity of the client credentials is the reason to give us an access token.</li><li>The  are optional but recommended to achieve the least privileged access.</li></ul><p>That‚Äôs it. The response is the same as in other flows.\nThere is no big reason to issue refresh tokens here, because the client credentials act as one, so it‚Äôs generally omitted.</p><p>Another thing is the access scope. Since the Client Application acts on its own behalf,\nit may not be limited to the resources available to a specific Resource Owner.\nThere has to be a way for the Resource Server to differentiate this level of access versus regular resource owner delegation.\nI have seen two ways of doing this:</p><ul><li>use a separate set of scopes to mark such an internal, wide access</li><li>add a custom claim to the JWT access token and account for it during access token validation</li></ul><h3>Resource Owner Credentials</h3><p>The most paradoxical flow out of all OAuth2 standard flows is the resource owner credentials (ROC) flow.\nIt‚Äôs paradoxical because it was discouraged from use since day one of the OAuth2 protocol, everyone says it‚Äôs a very bad idea to use it, yet still it made it into the specification.\nWhy did that happen?</p><p>Theoretically, there might be situations where you absolutely have to use your username and password all around to access some resources.\nWithout the ROC flow, you would be even less secure than if you used it.\nThis is because the flow limits the credential exposure over the network which reduces the chance of credential leakage. Also, it allows you to limit the access scope (rather than giving the client absolutely all access you have).</p><p>In this flow, the Resource Owner passes their credentials (e.g. username and password) directly to the Client Application.\nThen the application uses the credentials as an authorization grant to issue a pair of access and refresh tokens.\nThe resource credentials are then discarded and the client uses the tokens solely to access the protected resources going forward.</p><div>OAuth2 Resource Owner Credentials Flow</div><p>This is a backend channel only flow, so the Client Application exclusively communicates with the token endpoint of the\nAuthorization Server:</p><div data-rehype-pretty-code-fragment=\"\"><pre data-language=\"http\" data-theme=\"dark\"><code data-language=\"http\" data-theme=\"dark\"></code></pre><pre data-language=\"http\" data-theme=\"light\"><code data-language=\"http\" data-theme=\"light\"></code></pre></div><ul><li>The  has to be  to indicate the ROC flow</li><li>The credentials e.g. username and password are passed as a part of the token request</li><li>it‚Äôs possible to pass the  param to reduce the delegated access level. Otherwise, it would be the full access that the Resource Owner has (whatever that means for the given Resource Server).</li></ul><p>In which cases this flow could make some sense?</p><ul><li>You should have a high degree of trust to share your main credentials with the Client Application. Ideally, it should be something you control (e.g. the first-party client).</li><li>Your Client Application is highly privileged. For example, it does some actions on behalf of your tenant or organization admins. This is <a href=\"https://learn.microsoft.com/en-us/entra/identity-platform/v2-oauth-ropc\" target=\"_blank\" rel=\"noopener noreferrer\">how Microsoft Entra supports it</a>. At the same time, personal accounts could not use this flow (e.g. partially because there are other protections in order to login like MFA).</li></ul><p>Apparently, the primary target of the original OAuth2 specification was the browser application use case,\nbut after OAuth2 gained popularity, it has found its way into other contexts. For example, not every environment has an ability to open a browser and do the redirect-based flows\nlike authorization code. A few examples:</p><ul><li>When you have got a new TV and you want to watch Netflix on it, you need to authorize that device to access your account and subscription.</li><li>When you want to analyze your Snowflake data in a cloud-hosted, containerized Jupyter notebook, there might be no easy way to open a browser (it‚Äôs a headless linux under the hood).</li><li>When you try to connect to your game portal from a console that may have a browser, but only limited input capabilities (e.g. no full-fledged keyboard)</li></ul><p>Thankfully, there is an extension to the original OAuth2 specification that codifies so-called the device authorization flow.</p><p>The device authorization (or device code) flow is a special kind of interactive flow that doesn‚Äôt assume any direct interactions between the Client Application residing on the device\nand the Resource Owner‚Äôs browser.</p><p>Instead, the Client Application instructs how the resource owner can authorize it via browser indirectly by showing the verification URL to visit, QR code to scan or just a call to open the provider‚Äôs mobile application.</p><h4>Device Authorization Request</h4><p>In order to implement the device authorization flow, they introduced a new endpoint for kicking off the flow called the device authorization endpoint (because it has a completely different semantic than the standard, browser-based  endpoint):</p><div data-rehype-pretty-code-fragment=\"\"><pre data-language=\"http\" data-theme=\"dark\"><code data-language=\"http\" data-theme=\"dark\"></code></pre><pre data-language=\"http\" data-theme=\"light\"><code data-language=\"http\" data-theme=\"light\"></code></pre></div><ul><li>The  is required to identify the Client Application.</li><li>There is no client secret because the device client is close to the public clients in terms of the ability to keep secrets e.g. any built-in secrets can be extracted.</li></ul><p>The device authorization endpoint returns something like this:</p><div data-rehype-pretty-code-fragment=\"\"><pre data-language=\"json\" data-theme=\"dark\"><code data-language=\"json\" data-theme=\"dark\"></code></pre><pre data-language=\"json\" data-theme=\"light\"><code data-language=\"json\" data-theme=\"light\"></code></pre></div><ul><li>The  is where the end user should go to type in the . The URL should be short enough to type in manually. Alternatively, the Authorization Server may give another URL to transform into a QR code, for example. That URL generally contains the user code as a query param.</li><li>The  is what the device client application keeps secretly in memory and then uses as a grant during polling the token endpoint.</li></ul><p>The device code serves as a proof of starting the authorization flow. If there was no device code and the device client had only client ID as the client identifier,\nattackers may figure out that ID and then try to send the token requests to get the access &amp; refresh tokens before the real device that has requested it.</p><p>The resource owner has to trigger (or retrigger if the previous request has timed out) the authorization flow, but at the same time,\nwe pass no information about that user during initializing the authorization request. The authorization server can only match the resource owner with the corresponding client ID after typing in the user code on the verification page.\nTo be fair, we pass no Resource Owner identifier directly in other interactive flows, too,\nbut the authorization redirect leverages browser cookies there, so the Authorization Server can identify the end user right off the bat.</p><p>Then, the user code is shown somehow to the Resource Owner.\nGenerally, it‚Äôs just printed on the device screen, so the user can type it from there.</p><p>The device authorization is a time-bound process (the lifetime is specified as  field in the response).\nThe authorization lifetime is typically around 15 minutes.</p><p>Because there is no way for the Authorization Server to tell the device client when the authorization is granted (that role is played by the callback URL in the other interactive flows)\nand it‚Äôs a big assumption that the device can accept inbound requests, the protocol only assumes that the device is connected to the internet and can do outbound requests.</p><p>With these assumptions, the device can poll the token endpoint every so often until the authorization is granted, the authorization request is expired or denied.\nThe default polling interval is 5 seconds.</p><p>The polling happens against the token endpoint:</p><div data-rehype-pretty-code-fragment=\"\"><pre data-language=\"http\" data-theme=\"dark\"><code data-language=\"http\" data-theme=\"dark\"></code></pre><pre data-language=\"http\" data-theme=\"light\"><code data-language=\"http\" data-theme=\"light\"></code></pre></div><ul><li>The  usually has to indicate what flow we are trying to complete. In this case, the flow code is unusual which means that the flow name is <a href=\"https://www.romaglushko.com/blog/whats-aouth2/#more-grants\">not standard (or custom)</a>.</li><li>The  is also sent to verify the device that is trying to obtain tokens.</li></ul><p>The specification doesn‚Äôt require client authentication when accessing the token endpoint, but it‚Äôs possible and some providers\nuse that (e.g. <a href=\"https://developers.google.com/identity/protocols/oauth2/limited-input-device\" target=\"_blank\" rel=\"noopener noreferrer\">Google‚Äôs Device Authorization flow implementation</a>).\nIn that case, it‚Äôs still true that you cannot persist the client secret on the end device\nand should probably have a backend service somewhere to poll the token endpoint for the device.</p><p>It‚Äôs very likely that the device client would need to poll the token endpoint a couple of times before the end user actually authorizes it.\nIn this case, the token endpoint should return a special error indicating that the authorization is not yet granted:</p><div data-rehype-pretty-code-fragment=\"\"><pre data-language=\"json\" data-theme=\"dark\"><code data-language=\"json\" data-theme=\"dark\"></code></pre><pre data-language=\"json\" data-theme=\"light\"><code data-language=\"json\" data-theme=\"light\"></code></pre></div><p>If the client polls it too eagerly, another special error is returned that says to expand the polling interval by 5 seconds:</p><div data-rehype-pretty-code-fragment=\"\"><pre data-language=\"json\" data-theme=\"dark\"><code data-language=\"json\" data-theme=\"dark\"></code></pre><pre data-language=\"json\" data-theme=\"light\"><code data-language=\"json\" data-theme=\"light\"></code></pre></div><p>When the authorization is finally granted, the token endpoint should return the regular token response we have seen in <a href=\"https://www.romaglushko.com/blog/whats-aouth2/#code-exchange\">the authorization code flow</a>.</p><p>What else can we trade for access &amp; refresh tokens? The OAuth2 specification defines a way to extend the standard grant types\nwith a custom one. This is called an extension or third-party assertion grant.</p><p>The assertion grant is a backend channel only flow where the Client Application sends the Authorization Server\na special third-party assertion that proves the client‚Äôs rights to access the protected Resource Server.</p><p>As with any other backend channel only flow, this one only uses the token endpoint:</p><div data-rehype-pretty-code-fragment=\"\"><pre data-language=\"http\" data-theme=\"dark\"><code data-language=\"http\" data-theme=\"dark\"></code></pre><pre data-language=\"http\" data-theme=\"light\"><code data-language=\"http\" data-theme=\"light\"></code></pre></div><p>The grant type in this case is a unique string in a form of URN that includes the organization name and other grant type information. For example:</p><div data-rehype-pretty-code-fragment=\"\"><pre data-language=\"plain\" data-theme=\"dark\"><code data-language=\"plain\" data-theme=\"dark\"></code></pre><pre data-language=\"plain\" data-theme=\"light\"><code data-language=\"plain\" data-theme=\"light\"></code></pre></div><p>It‚Äôs only important that the target Authorization Server recognizes it and knows how to validate it.</p><p>The assertion is usually a self-contained secure token that is cryptographically signed by the assertion provider.\nPractically, there are two types of assertions you can see in the wild:</p><p>The client authentication may be optional in this case (if so, the refresh token may not be issued as that grant requires client authentication).</p><p>After we have reviewed all main OAuth2 flows, which one should you choose for your specific application?</p><p>I have tried to come up with the following decision tree that asks the main questions to help you.</p><ul><li>Always try to use the authorization code flow with PKCE if possible, no matter if it‚Äôs a public or confidential client application. This may not be possible because your provider may not support it yet.</li><li>If PKCE is not supported, then the authorization code is only good for private clients unless the dynamic client registration is supported. For public clients, you should go with the implicit flow and dive into the number of recommendations and considerations to implement as securely as possible.</li><li>If your client application cannot open a browser with the resource owner session or is limited in terms of input capabilities, and your users don‚Äôt really trust it, then go with the device code flow.</li><li>Before falling back to the resource owner credentials flow, try to see if API keys can help you achieve the same goal.</li></ul><p>Thinking about why OAuth2 protocol has been designed the way it is, turned out to be a great exercise\nin threat modeling with immediate, straightforward and practical approaches to mitigate these threats.\nThey can be reused to solve similar security concerns in other contexts outside of OAuth protocol,\nso you can benefit from a deep understanding of the protocol even if you are not a security expert who has to know the ins and outs of OAuth2.</p><p>Apart from that, OAuth2 is such a vast area that we have been able to only answer the fundamental why questions and\nreview the most popular delegation grants in this article.</p><p>A lot of interesting OAuth2 extensions are just briefly referenced, but you would not see them that often in the wild yet,\nso that was acceptable to leave them out for now.</p><p>If you would like to see follow-up articles on OAuth2 protocol and its extensions, please let me know.</p>","contentLength":39696,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1iaazm7/whats_oauth2_anyway/"},{"title":"Kubernetes EKS course","url":"https://www.reddit.com/r/kubernetes/comments/1iaawqa/kubernetes_eks_course/","date":1737886342,"author":"/u/caiolagreca","guid":379,"unread":true,"content":"<p>Hi everyone, I‚Äôm looking to learn Kubernetes and Amazon EKS. I haven‚Äôt found many good tutorials on yotube, and the Udemy courses that I had checked have not so good reviews. Could you recommend any good courses based on your experience? Thank you!</p>","contentLength":252,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Prototyping in Rust","url":"https://corrode.dev/blog/prototyping/","date":1737885919,"author":"/u/EightLines_03","guid":508,"unread":true,"content":"<p>Programming is an iterative process - as much as we would like to come up with the perfect solution from the start, it rarely works that way.</p><p>Good programs often start as quick prototypes.\nThe bad ones stay prototypes, but the best ones evolve into production code.</p><p>Whether you‚Äôre writing games, CLI tools, or designing library APIs, prototyping helps tremendously in finding the best approach before committing to a design.\nIt helps reveal the patterns behind more idiomatic code.</p><p>For all its explicitness, Rust is surprisingly ergonomic when iterating on ideas. Contrary to popular belief, it is a joy for building prototypes.</p><p>You don‚Äôt need to be a Rust expert to be productive - in fact, many of the techniques we‚Äôll discuss specifically help you  Rust‚Äôs more advanced features.\nIf you focus on simple patterns and make use of Rust‚Äôs excellent tooling, even less experienced Rust developers can quickly bring their ideas to life.</p><div><ul><li>How to prototype rapidly in Rust while keeping its safety guarantees</li><li>Practical techniques to maintain a quick feedback loop</li><li>Patterns that help you evolve prototypes into production code</li></ul></div><p>The common narrative goes like this:</p><blockquote><p>When you start writing a program, you don‚Äôt know what you want and you change your mind pretty often.\nRust pushes back when you change your mind because the type system is very strict.\nOn top of that, getting your idea to compile takes longer than in other languages, so the feedback loop is slower.</p></blockquote><p>I‚Äôve found that developers not yet too familiar with Rust often share this preconception.\nThese developers stumble over the strict type system and the borrow checker while trying to sketch out a solution.\nThey believe that with Rust you‚Äôre either at 0% or 100% done (everything works and has no undefined behavior) and there‚Äôs nothing in between.</p><p>Here are some typical misbeliefs:</p><ol><li>‚ÄúMemory safety and prototyping just don‚Äôt go together.‚Äù</li><li>‚ÄúOwnership and borrowing take the fun out of prototyping.‚Äù</li><li>‚ÄúYou have to get all the details right from the beginning.‚Äù</li><li>‚ÄúRust always requires you to handle errors.‚Äù</li></ol><p><strong>It turns out you can avoid all of these pitfalls and still get a lot of value from prototyping in Rust.</strong></p><p>If you‚Äôre happy with a scripting language like Python, why bother with Rust?</p><p>That‚Äôs a fair question!\nAfter all, Python is known for its quick feedback loop and dynamic type system, and you can always rewrite the code in Rust later.</p><p>Yes, Python is a great choice for prototyping.\nBut I‚Äôve been a Python developer for long enough to know that I‚Äôll very quickly grow out of the ‚Äúprototype‚Äù phase\n-‚Äì which is when the language falls apart for me.</p><p>One thing I found particularly challenging in Python was hardening my prototype into a robust, production-ready codebase.\nI‚Äôve found that the really hard bugs in Python are often type-related: deep down in your call chain, the program crashes because you just passed the wrong type to a function.\nBecause of that, I find myself wanting to switch to something more robust as soon as my prototype starts to take shape.</p><p>The problem is that switching languages is a  undertaking ‚Äì especially mid-project.\nMaybe you‚Äôll have to maintain two codebases simultaneously for a while.\nOn top of that, Rust follows different idioms than Python, so you might have to rethink the software architecture.\nAnd to add insult to injury, you have to change build systems, testing frameworks, and deployment pipelines as well.</p><p>Wouldn‚Äôt it be nice if you could use a single language for prototyping and production?</p><p>Using a single language across your entire project lifecycle is great for productivity.\nRust scales from proof-of-concept to production deployment and that eliminates costly context switches and rewrites.\nRust‚Äôs strong type system catches design flaws early, but we will see how it also provides pragmatic escape hatches if needed.\nThis means prototypes can naturally evolve into production code;\neven the first version is often production-ready.</p><p>But don‚Äôt take my word for it. Here‚Äôs what Discord had to say about migrating from Go to Rust:</p><blockquote><p>Remarkably, we had only put very basic thought into optimization as the Rust version was written. Even with just basic optimization, Rust was able to outperform the hyper hand-tuned Go version. This is a huge testament to how easy it is to write efficient programs with Rust compared to the deep dive we had to do with Go.\n‚Äì From <a href=\"https://discord.com/blog/why-discord-is-switching-from-go-to-rust\">Why Discord is switching from Go to Rust</a></p></blockquote><p>If you start with Rust, you get a lot of benefits out of the box:\na robust codebase, a strong type system, and built-in <a href=\"https://doc.rust-lang.org/clippy/\">linting</a>.</p><p>All without having to change languages mid-project!\nIt saves you the context switch between languages once you‚Äôre done with the prototype.</p><img src=\"https://corrode.dev/blog/prototyping/flow.svg\" alt=\"flow\"><p>Python has a few good traits that we can learn from:</p><ul><li>changing your mind is easy</li><li>it‚Äôs simple to use (if you ignore the edge cases)</li><li>it‚Äôs easy to experiment and refactor</li><li>you can do something useful in just a few lines</li></ul><p>The goal is to get as close to that experience in Rust as possible while staying true to Rust‚Äôs core principles.\nLet‚Äôs make changes quick and painless and rapidly iterate on our design without painting ourselves into a corner.\n(And yes, there will still be a compilation step, but hopefully, a quick one.)</p><p>Even while prototyping, the type system is not going away.\nThere are ways to make this a blessing rather than a curse.</p><p>Use simple types like , ,  in the beginning.\nWe can always make things more complex later if we have to ‚Äì the reverse is much harder.</p><p>Here‚Äôs a quick reference for common prototype-to-production type transitions:</p><table><thead><tr></tr></thead><tbody><tr><td>When you need to avoid allocations or store string data with a clear lifetime</td></tr><tr><td>When the owned vector becomes too expensive to clone or you can‚Äôt afford the heap</td></tr><tr><td>When  becomes a bottleneck or you don‚Äôt want to deal with heap allocations</td></tr><tr><td>When the reference counting overhead becomes too expensive or you need mutability</td></tr><tr><td>When you can guarantee exclusive access and don‚Äôt need thread safety</td></tr></tbody></table><p>These owned types sidestep most ownership and lifetime issues, but they do it by allocating memory on the heap - just like Python or JavaScript would.</p><p>You can always refactor when you actually need the performance or tighter resource usage, but chances are you won‚Äôt.</p><p>Rust is a statically, strongly typed language.\nIt would be a deal-breaker to write out all the types all the time if it weren‚Äôt for Rust‚Äôs type inference.</p><p>You can often omit (‚Äúelide‚Äù) the types and let the compiler figure it out from the context.</p><pre data-lang=\"rust\"><code data-lang=\"rust\"></code></pre><p>This is a great way to get started quickly and defer the decision about types to later.\nThe system scales well with more complex types, so you can use this technique even in larger projects.</p><pre data-lang=\"rust\"><code data-lang=\"rust\"></code></pre><p>Here‚Äôs a more complex example which shows just how powerful Rust‚Äôs type inference can be:</p><pre data-lang=\"rust\"><code data-lang=\"rust\"></code></pre><p>It‚Äôs not easy to visualize the structure of  in your head, but Rust can figure it out.</p><p>You probably already know about the <a href=\"https://play.rust-lang.org\">Rust Playground</a>.\nThe playground doesn‚Äôt support auto-complete, but it‚Äôs still great when you‚Äôre on the go or you‚Äôd like to share your code with others.</p><p>I find it quite useful for quickly jotting down a bunch of functions or types to test out a design idea.</p><p>It‚Äôs okay to use  in the early stages of your project.\nAn explicit  is like a stop sign that tells you ‚Äúhere‚Äôs something you need to fix later.‚Äù\nYou can easily grep for  and replace it with proper error handling later when you polish your code.\nThis way, you get the best of both worlds: quick iteration cycles and a clear path to robust error handling.\nThere‚Äôs also a <a href=\"https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used\">clippy lint</a> that points out all the s in your code.</p><pre data-lang=\"rust\"><code data-lang=\"rust\"></code></pre><p>See all those unwraps?\nTo more experienced Rustaceans, they stand out like a sore thumb ‚Äì and that‚Äôs a good thing!</p><p>Compare that to languages like JavaScript which can throw exceptions your way at any time.\nIt‚Äôs much harder to ensure that you handle all the edge-cases correctly.\nAt the very least, it costs time. Time you could spend on more important things.</p><p>While prototyping with Rust, you can safely ignore error handling and focus on\nthe happy path without losing track of improvement areas.</p><p>I like to add <a href=\"https://github.com/dtolnay/anyhow\"></a> pretty early during the prototyping phase,\nto get more fine-grained control over my error handling.\nThis way, I can use  and  to quickly add more context to my errors without losing momentum.\nLater on, I can revisit each error case and see if I can handle it more gracefully.</p><pre data-lang=\"rust\"><code data-lang=\"rust\"></code></pre><p>The great thing about  is that it‚Äôs a solid choice for error handling in production code as well,\nso you don‚Äôt have to rewrite your error handling logic later on.</p><p>There is great IDE support for Rust.</p><p>IDEs can help you with code completion and refactoring, which keep you in the flow and help you write code faster.\nAutocompletion is so much better with Rust than with dynamic languages because the type system gives the IDE a lot more information to work with.</p><p>As a corollary to the previous section, be sure to use enable inlay hints (or inline type hints) in your editor.\nThis way, you can quickly see the inferred types right inside your IDE and make sure the types match your expectations.\nThere‚Äôs support for this in most Rust IDEs, including <a href=\"https://www.jetbrains.com/help/rust/viewing-reference-information.html#inlay-hints\">RustRover</a> and <a href=\"https://code.visualstudio.com/docs/typescript/typescript-editing#_inlay-hints\">Visual Studio Code</a>.</p><p>Rust is not a scripting language; there is a compile step!</p><p>However, for small projects, the compile times are negligible.\nUnfortunately, you have to manually run  every time you make a change\nor use <a href=\"https://rust-analyzer.github.io/\">rust-analyzer</a> in your editor to get instant feedback.</p><p>To fill the gap, you can use external tools like <a href=\"https://github.com/Canop/bacon\"></a> which automatically recompiles and runs your code whenever you make a change.\nThis way, you can get  the same experience as with a REPL in, say, Python or Ruby.</p><pre data-lang=\"sh\"><code data-lang=\"sh\"></code></pre><p>And just like that, you can get some pretty compilation output alongside your code editor.</p><p>Oh, and in case you were wondering,  was another popular tool for\nthis purpose, but it‚Äôs since been <a href=\"https://github.com/watchexec/cargo-watch#maintenance\">deprecated</a>.</p><p>Did you know that cargo can also run scripts?</p><p>For example, put this into a file called :</p><pre data-lang=\"rust\"><code data-lang=\"rust\"></code></pre><p>Now you can make the file executable with  and run it with  which it will compile and execute your code!\nThis allows you to quickly test out ideas without having to create a new project.\nThere is support for dependencies as well.</p><p>At the moment,  is a nightly feature, but it will be released soon on stable Rust.\nYou can read more about it in the <a href=\"https://rust-lang.github.io/rfcs/3424-cargo-script.html\">RFC</a>.</p><p>You have to try really really hard to write slow code in Rust.\nUse that to your advantage: during the prototype phase, try to keep the code as simple as possible.</p><p>Especially experienced developers coming from C or C++ are tempted to optimize too early.</p><p>Rust makes code perform well by default - you get memory safety at virtually zero runtime cost. When developers try to optimize too early, they often run up against the borrow checker by using complex lifetime annotations and intricate reference patterns in pursuit of better performance.\nThis leads to harder-to-maintain code that may not actually run faster.</p><p>Resist the urge to optimize too early!\nYou will thank yourself later. </p><p>I find that printing values is pretty handy while prototyping.\nIt‚Äôs one less context switch to make compared to starting a debugger.</p><p>Most people use  for that, but <a href=\"https://doc.rust-lang.org/std/macro.dbg.html\"></a> has a few advantages:</p><ul><li>It prints the file name and line number where the macro is called. This helps you quickly find the source of the output.</li><li>It outputs the expression as well as its value.</li><li>It‚Äôs less syntax-heavy than ; e.g.  vs. .</li></ul><p>Where  really shines is in recursive functions or when you want to see the intermediate values during an iteration:</p><pre data-lang=\"rust\"><code data-lang=\"rust\"></code></pre><p>The output is nice and tidy:</p><pre data-lang=\"rust\"><code data-lang=\"rust\"></code></pre><p>Quite frankly, the type system is one of the main reasons I love Rust.\nIt feels great to express my ideas in types and see them come to life.\nI would encourage you to heavily lean into the type system during the prototyping phase.</p><p>In the beginning, you won‚Äôt have a good idea of the types in your system.\nThat‚Äôs fine!\nStart with  and quickly sketch out solutions and gradually add constraints to model the business requirements.\nDon‚Äôt stop until you find a version that feels just right.\nYou know you‚Äôve found a good abstraction when your types ‚Äúclick‚Äù with the rest of the code. \nTry to build up a vocabulary of concepts and own types which describe your system.</p><p>Wrestling with Rust‚Äôs type system might feel slower at first compared to more dynamic languages, but it often leads to fewer iterations overall.\nThink of it this way: in a language like Python, each iteration might be quicker since you can skip type definitions, but you‚Äôll likely need more iterations as you discover edge cases and invariants that weren‚Äôt immediately obvious.\nIn Rust, the type system forces you to think through these relationships up front. Although each iteration takes longer, you typically need fewer of them to arrive at a robust solution.</p><p>This is exactly what we‚Äôll see in the following example.</p><p>Say you‚Äôre modeling course enrollments in a student system. You might start with something simple:</p><pre data-lang=\"rust\"><code data-lang=\"rust\"></code></pre><p>But then requirements come in: some courses are very popular.\nMore students want to enroll than there are spots available,\nso the school decides to add a waitlist.</p><p>Easy, let‚Äôs just add another boolean flag!</p><pre data-lang=\"rust\"><code data-lang=\"rust\"></code></pre><p>The problem is that both boolean flags could be set to !\nThis design allows invalid states where a student could be both enrolled and waitlisted.</p><p>Think for a second how we could leverage Rust‚Äôs type system to make this impossible‚Ä¶</p><pre data-lang=\"rust\"><code data-lang=\"rust\"></code></pre><p>Now we have a clear distinction between an active enrollment and a waitlisted enrollment.\nWhat‚Äôs better is that we encapsulate the details of each state in the enum variants.\nWe can never have someone on the waitlist without a position in said list.</p><p>Just think about how much more complicated this would be in a dynamic language\nor a language that doesn‚Äôt support tagged unions like Rust does.</p><p>In summary, iterating on your data model is the crucial part of any prototyping phase.\nThe result of this phase is not the code, but a <em>deeper understanding of the problem domain itself</em>.\nYou can harvest this knowledge to build a more robust and maintainable solution.</p><p>It turns out you can model a surprisingly large system in just a few lines of code.</p><p>So, never be afraid to play around with types and refactor your code as you go.</p><p>One of the cornerstones of prototyping is that you don‚Äôt have to have all the answers right away.\nIn Rust, I find myself reaching for the <a href=\"https://doc.rust-lang.org/std/macro.todo.html\"></a> macro to\nexpress that idea.</p><p>I routinely just scaffold out the functions or a module and then fill in the blanks later.</p><pre data-lang=\"rust\"><code data-lang=\"rust\"></code></pre><p>We did not do much here, but we have a clear idea of what the program should do.\nNow we can go and iterate on the design.\nFor example, should  take a reference to the data?\nShould we create a struct to hold the data and the processing logic?\nHow about using an iterator instead of a vector?\nShould we introduce a trait to support algorithms for processing the data?</p><p>These are all helpful questions that we can answer without having to worry about the details of the implementation.\nAnd yet our code is typesafe and compiles, and it is ready for refactoring.</p><p>On a related note, you can use the <a href=\"https://doc.rust-lang.org/std/macro.unreachable.html\"></a> macro to mark branches of your code that should never be reached.</p><pre data-lang=\"rust\"><code data-lang=\"rust\"></code></pre><p>This is a great way to document your assumptions about the code.\nThe result is the same as if you had used , but it‚Äôs more explicit about the fact that this branch should never be reached:</p><pre data-lang=\"rust\"><code data-lang=\"rust\"></code></pre><p>Note that we added a message to the  macro to make it clear what the assumption is.</p><p>Another way to document your assumptions is to use the <a href=\"https://doc.rust-lang.org/std/macro.assert.html\"></a> macro.\nThis is especially useful for invariants that should hold true at runtime.</p><p>For example, the above code could be rewritten like this:</p><pre data-lang=\"rust\"><code data-lang=\"rust\"></code></pre><p>During prototyping, this can be helpful to catch logic bugs early on without having to write a lot of tests\nand you can safely carry them over to your production code.</p><p>Consider using\n<a href=\"https://doc.rust-lang.org/std/macro.debug_assert.html\"></a> for\nexpensive invariant checks that should only run in test/debug builds.</p><p>Chances are, you won‚Äôt know which parts of your application should be generic in the beginning.\nTherefore it‚Äôs better to be conservative and use concrete types instead of generics until necessary.</p><p>So instead of writing this:</p><p>If you need the same function for a different type, feel free to just copy and paste the function and change the type.\nThis way, you avoid the trap of settling on the wrong kind of abstraction too early.\nMaybe the two functions only differ by type signature for now, but they might serve a completely different purpose.\nIf the function is not generic from the start, it‚Äôs easier to remove the duplication later.</p><p>Only introduce generics when you see a clear pattern emerge in multiple places.\nI personally avoid generics up until the very last moment. I want to feel the ‚Äúpain‚Äù of duplication logic before I abstract it away.\nIn 50% of the cases, I find that the problem is not missing generics, but that there‚Äôs a better algorithm or data structure that solves the problem more elegantly.</p><p>Also avoid ‚Äúfancy‚Äù generic type signatures:</p><pre data-lang=\"rust\"><code data-lang=\"rust\"></code></pre><p>Yes, this allows you to pass in a  or a , but at the cost of readability.</p><p>Just use an owned type for your first implementation:</p><pre data-lang=\"rust\"><code data-lang=\"rust\"></code></pre><p>Chances are, you won‚Äôt need the flexibility after all.</p><p>In summary, generics are powerful, but they can make the code harder to read and write.\nAvoid them until you have a clear idea of what you‚Äôre doing.</p><p>One major blocker for rapid prototyping is Rust‚Äôs ownership system.\nIf the compiler constantly reminds you of borrows and lifetimes it can ruin your flow.\nFor example, it‚Äôs cumbersome to deal with references when you‚Äôre just trying to get something to work.</p><pre data-lang=\"rust\"><code data-lang=\"rust\"></code></pre><p>This code doesn‚Äôt compile because the references are not valid outside of the function.</p><pre data-lang=\"rust\"><code data-lang=\"rust\"></code></pre><p>A simple way around that is to <a href=\"https://corrode.dev/blog/lifetimes\">avoid lifetimes altogether</a>.\nThey are not necessary in the beginning.\nUse owned types like  and .\nJust  wherever you need to pass data around.</p><pre data-lang=\"rust\"><code data-lang=\"rust\"></code></pre><p>If you have a type that you need to move between threads (i.e. it needs to be ), you can use an  to get around the borrow checker.\nIf you‚Äôre worried about performance, remember that other languages like Python or Java do this implicitly behind your back.</p><pre data-lang=\"rust\"><code data-lang=\"rust\"></code></pre><p>If you feel like you have to use  too often, there might be a design issue.\nFor example, you might be able to avoid sharing state between threads.</p><p> is your best friend while prototyping.</p><p>Stuff your code in there ‚Äì no need for modules or complex organization yet. This makes it easy to experiment and move things around.</p><h4><a href=\"https://corrode.dev/blog/prototyping/#first-draft-everything-in-main-rs\" aria-label=\"Anchor link for: first-draft-everything-in-main-rs\">First draft: everything in main.rs</a></h4><pre data-lang=\"rust\"><code data-lang=\"rust\"></code></pre><p>Once you have a better feel for your code‚Äôs structure, Rust‚Äôs  keyword becomes a handy tool for sketching out potential organization. You can nest modules right in your main file.</p><pre data-lang=\"rust\"><code data-lang=\"rust\"></code></pre><p>This inline module structure lets you quickly test different organizational patterns.\nYou can easily move code between scopes with cut and paste, and experiment with different APIs and naming conventions.\nOnce a particular structure feels right, you can move modules into their own files.</p><p>The key is to keep things simple until it calls for more complexity.\nStart flat, then add structure incrementally as your understanding of the problem grows.</p><p>Allow yourself to ignore some of the best practices for production code for a while.</p><p>It‚Äôs possible, but you need to switch off your inner critic who always wants to write perfect code from the beginning.\nRust enables you to comfortably defer perfection.\nYou can make the rough edges obvious so that you can sort them out later.\nDon‚Äôt let perfect be the enemy of good.</p><p>One of the biggest mistakes I observe is an engineer‚Äôs perfectionist instinct to jump on minor details which don‚Äôt have a broad enough impact to warrant the effort.\nIt‚Äôs better to have a working prototype with a few rough edges than a perfect implementation of a small part of the system.</p><p>Remember: you are exploring!\nUse a coarse brush to paint the landscape first.\nTry to get into a flow state where you can quickly iterate.\nDon‚Äôt get distracted by the details too early.\nDuring this phase, it‚Äôs also fine to throw away a lot failed attempts.</p><p>There‚Äôs some overlap between prototyping and ‚Äú<a href=\"https://www.youtube.com/watch?v=33FG6O3qejM\">easy Rust</a>.‚Äù</p><p>The beauty of prototyping in Rust is that your ‚Äúrough drafts‚Äù have the same memory safety and performance as polished code.\nEven when I liberally use , stick everything in , and reach for owned types everywhere, the resulting code\nis on-par with a Python prototype in reliability, but outperforms it easily.\nThis makes it perfect for experimenting with real-world workloads, even before investing time in proper error handling.</p><p>Let‚Äôs see how Rust stacks up against Python for prototyping:</p><table><tbody><tr><td>Initial Development Speed</td><td>‚úì Very quick to write initial code‚úì No compilation step<p>‚úì Dynamic typing speeds up prototyping</p>‚úì File watchers available</td><td>‚ö†Ô∏è Slightly slower initial development‚úì Type inference helps provide quick feedback</td></tr><tr><td>‚úì Batteries included‚úì Rich ecosystem</td><td>‚ùå Smaller standard library‚úì Growing ecosystem of high-quality crates</td></tr><tr><td>‚ùå Need extensive testing to catch type errors‚ùå Bad performance might require extra work or rewrite in another language</td><td>‚úì Minimal changes needed beyond error handling‚úì Already has good performance<p>‚úì Memory safety guaranteed</p></td></tr><tr><td>‚ùå Type errors surface during runtime‚ùå Refactoring is risky</td><td>‚úì Compiler catches most issues‚úì Safe refactoring with type system</td></tr><tr><td>‚ùå Hard to maintain large codebases‚ùå Type issues compound</td><td>‚úì Compiler guides improvements‚úì Types help manage complexity</td></tr></tbody></table><p>Quite frankly, Rust makes for an excellent prototyping language if you embrace its strengths.\nYes, the type system will make you think harder about your design up front - but that‚Äôs actually a good thing!\nEach iteration might take a bit longer than in Python or JavaScript, but you‚Äôll typically need fewer iterations from prototype to production.</p><p>I‚Äôve found that my prototypes in other languages often hit a wall where I need to switch to something more robust.\nWith Rust, I can start simple and gradually turn that proof-of-concept into production code, all while staying in the same language and ecosystem.</p><p>If you have any more tips or tricks for prototyping in Rust, <a href=\"https://corrode.dev/about\">get in touch</a> and I‚Äôll add them to the list!</p>","contentLength":21977,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/rust/comments/1iaase8/prototyping_in_rust/"},{"title":"Patching 3rd party chart to support secrets - ideas","url":"https://www.reddit.com/r/kubernetes/comments/1iaal1o/patching_3rd_party_chart_to_support_secrets_ideas/","date":1737885196,"author":"/u/0x4ddd","guid":383,"unread":true,"content":"<div><p>I need to install 3rd party Helm chart, unfortunately it expects some of the secret values (like API keys and database credentials) to be provided via plain Helm values. No secret support at all.</p><p>This doesn't natively align very nicely with storing desired state in Git.</p><p>What do you typically do in such scenario?</p><ul><li>utilize helm-secrets (we don't use it at the moment)</li><li>create some ugly Kustomize patches to make it work with External Secret Operator (we are already using ESO for other charts to sync secrets from cloud KMS)</li></ul></div>   submitted by   <a href=\"https://www.reddit.com/user/0x4ddd\"> /u/0x4ddd </a>","contentLength":547,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Show HN: Bagels ‚Äì TUI expense tracker","url":"https://github.com/EnhancedJax/Bagels","date":1737881871,"author":"EnhancedJax","guid":181,"unread":true,"content":"<p>Hi! I'm Jax and I've been building this cool little terminal app for myself to track my expenses and budgets!</p><p>Other than challenging myself to learn Python, I built this mainly around the habit of budget tracking at the end of the day. (I tried tracking on-the-go, but the balance was always out of sync.) All data is stored in a single sqlite file, so you can export and process them all you want!</p><p>The app is built using the textual API for Python! Awesome framework which feels like I'm doing webdev haha.</p>","contentLength":505,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42828833"},{"title":"New to Go: Built a Google Chat App with 150k Users ‚Äì Looking for Feedback on My Code","url":"https://www.reddit.com/r/golang/comments/1ia9k9g/new_to_go_built_a_google_chat_app_with_150k_users/","date":1737880750,"author":"/u/dyaskur","guid":377,"unread":true,"content":"<p>I‚Äôm still relatively new to Go. Previously, I worked with PHP, JavaScript/TypeScript, and Python. I started learning Go by building a Google Chat app. My main focus was to make the app functional rather than strictly following best practices like clean code, as I had very limited time to develop it.</p><p>The app is now released and has grown to 150k users! Initially, it only used the Google Translate API for translations. At the time, I assumed the free quota would be sufficient. However, the app‚Äôs users quickly exceeded my expectations. In the first month alone, my billing increased by a staggering  due to the heavy google translate API usage.</p><p>To address this, I switched to using  via  (where I have a subscription), as it‚Äôs more cost-effective. The app still uses Google Translate API as a fallback when Straico returns invalid or error responses.</p><p>Now, I want to add some new features to the app. But before that, I‚Äôm focusing on refactoring the existing code to improve its structure and maintainability. I‚Äôve created a PR for this:<a href=\"https://github.com/dyaskur/google-chat-translator/pull/1\">https://github.com/dyaskur/google-chat-translator/pull/1</a> I‚Äôd love to get feedback or a review on my PR from experienced Go developers. Any advice or suggestions would be greatly appreciated!</p><p>To be honest, I‚Äôm struggling with creating  and  in Go. I‚Äôm still in the process of learning how to do it effectively. If anyone has good references or resources on these topics, I‚Äôd be grateful for the guidance!</p><p>Thank you all in advance, and I‚Äôm looking forward to your feedback! üòä</p>","contentLength":1530,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Oracle and US Investors (Including Microsoft) Discuss Taking Control of TikTok in the US","url":"https://tech.slashdot.org/story/25/01/26/0037255/oracle-and-us-investors-including-microsoft-discuss-taking-control-of-tiktok-in-the-us?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1737858840,"author":"EditorDavid","guid":245,"unread":true,"content":"A plan to keep TikTok available in the U.S. \"involves tapping software company Oracle and a group of outside investors,\" reports NPR, \"to effectively take control of the app's global operations, according to two people with direct knowledge of the talks...\" \n\n\"[P]otential investors who are engaged in the talks include Microsoft.\"\n\nUnder the deal now being negotiated by the White House, TikTok's China-based owner ByteDance would retain a minority stake in the company, but the app's algorithm, data collection and software updates will be overseen by Oracle, which already provides the foundation of TikTok's web infrastructure... \"The goal is for Oracle to effectively monitor and provide oversight with what is going on with TikTok,\" said the person directly involved in the talks, who was not authorized to speak publicly about the deliberations. \"ByteDance wouldn't completely go away, but it would minimize Chinese ownership....\" Officials from Oracle and the White House held a meeting on Friday about a potential deal, and another meeting has been scheduled for next week, according to the source involved in the discussions, who said Oracle is interested in a TikTok stake \"in the tens of billions,\" but the rest of the deal is in flux... \n\n\nUnder a law passed by Congress and upheld by the Supreme Court, TikTok must execute what is known as \"qualified divestiture\" from ByteDance in order to stay in business in the U.S... A congressional staffer involved in talks about TikTok's future, who was not authorized to speak publicly, said binding legal agreements from the White House ensuring ByteDance cannot covertly manipulate the app will prove critical in winning lawmakers' approval. \"A key part is showing there is no operational relationship with ByteDance, that they do not have control,\" the Congressional staffer said. \"There needs to be no backdoors where China can potentially gain access....\" \n\n\nChinese regulators, who have for years opposed the selling of TikTok, recently signaled that they would not stand in the way of a TikTok ownership change, saying acquisitions \"should be independently decided by the enterprises and based on market principles.\" The statement, at first, does not seem to say much, but negotiators in the White House believe it indicates that Beijing is not planning to block a deal that gives American investors a majority-stake position in the company.\n \n\n\"Meanwhile, Apple and Google still have not returned TikTok to app stores...\"","contentLength":2485,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"What‚Äôs Going on in the Containerd Neighborhood? - P. Estes, S. Karp, A. Suda, M. Brown, K. Ashok","url":"https://www.youtube.com/watch?v=kCNhgNXVdxw","date":1737848649,"author":"CNCF [Cloud Native Computing Foundation]","guid":358,"unread":true,"content":"<article>Don't miss out! Join us at our next Flagship Conference: KubeCon + CloudNativeCon Europe in London from April 1 - 4, 2025. Connect with our current graduated, incubating, and sandbox projects as the community gathers to further the education and advancement of cloud native computing. Learn more at https://kubecon.io\n\nWhat‚Äôs Going on in the Containerd Neighborhood? - Phil Estes, AWS; Samuel Karp, Google; Akihiro Suda, NTT; Michael Brown, IBM; Kirtana Ashok, Microsoft\n\nOur recent maintainer sessions have covered the soon-to-launch containerd v2.0. During this session led by maintainers we will give a brief update on 2.0, but will spend more time looking at the ecosystem around us. Why does containerd exist? What value does it bring to the overall cloud native world? How are other projects using it to build and extend containerd in useful ways? We‚Äôll spend some time on containerd‚Äôs largest subproject, nerdctl, which also has an upcoming 2.0 release, and additionally catch the community up on activity in our Rust subproject ecosystem, the runwasi containerd shim, and lazy loading snapshotters. Since this is KubeCon, we‚Äôll also provide an update on CRI changes and KEP-driven additions around NRI, DRA, and checkpoint/restore. Attendees will leave with a broad view of the larger containerd ecosystem of projects as well as key information on how to get involved if you are interested to help and contribute in any way to the ‚Äúcontainerd neighborhood!‚Äù</article>","contentLength":1477,"flags":null,"enclosureUrl":"https://www.youtube.com/v/kCNhgNXVdxw?version=3","enclosureMime":"","commentsUrl":null},{"title":"Welcome & Introduction: A Hitchhiker's Guide to the CNCF Landscape- Katherine Druckman, Lori Lorusso","url":"https://www.youtube.com/watch?v=hTCAOa0-VdU","date":1737848276,"author":"CNCF [Cloud Native Computing Foundation]","guid":357,"unread":true,"content":"<article>Don't miss out! Join us at our next Flagship Conference: KubeCon + CloudNativeCon Europe in London from April 1 - 4, 2025. Connect with our current graduated, incubating, and sandbox projects as the community gathers to further the education and advancement of cloud native computing. Learn more at https://kubecon.io\n\nWelcome and Introduction: A Hitchhiker's Guide to the CNCF Landscape - Katherine Druckman and Lori Lorusso, CNCF Ambassador\n\n‚ÄúGet your hiking boots ready because we are about to traverse the wild, wonderful world of the CNCF Landscape. Why you ask? We currently have over 190 projects, and finding information about them can be a challenge. ‚ÄúJust go to the website‚Äù isn‚Äôt enough, sometimes you need a guide to show you the ropes. In these introductory sessions we will go over some of the diverse set of projects inside the CNCF so that you‚Äôre well equipped to find what you‚Äôre looking for at KubeCon.</article>","contentLength":932,"flags":null,"enclosureUrl":"https://www.youtube.com/v/hTCAOa0-VdU?version=3","enclosureMime":"","commentsUrl":null},{"title":"Could New Linux Code Cut Data Center Energy Use By 30%?","url":"https://hardware.slashdot.org/story/25/01/25/2111225/could-new-linux-code-cut-data-center-energy-use-by-30?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1737848040,"author":"EditorDavid","guid":267,"unread":true,"content":"Two computer scientists at the University of Waterloo in Canada believe changing 30 lines of code in Linux \"could cut energy use at some data centers by up to 30 percent,\" according to the site Data Centre Dynamics. \n\nIt's the code that processes packets of network traffic, and Linux \"is the most widely used OS for data center servers,\" according to the article:\n\nThe team tested their solution's effectiveness and submitted it to Linux for consideration, and the code was published this month as part of Linux's newest kernel, release version 6.13. \"All these big companies ‚Äî Amazon, Google, Meta ‚Äî use Linux in some capacity, but they're very picky about how they decide to use it,\" said Martin Karsten [professor of Computer Science in the Waterloo's Math Faculty]. \"If they choose to 'switch on' our method in their data centers, it could save gigawatt hours of energy worldwide. Almost every single service request that happens on the Internet could be positively affected by this.\" \n\nThe University of Waterloo is building a green computer server room as part of its new mathematics building, and Karsten believes sustainability research must be a priority for computer scientists. \"We all have a part to play in building a greener future,\" he said. The Linux Foundation, which oversees the development of the Linux OS, is a founder member of the Green Software Foundation, an organization set up to look at ways of developing \"green software\" ‚Äî code that reduces energy consumption. \n\nKarsten \"teamed up with Joe Damato, distinguished engineer at Fastly\" to develop the 30 lines of code, according to an announcement from the university. \"The Linux kernel code addition developed by Karsten and Damato was based on research published in ACM SIGMETRICS Performance Evaluation Review\" (by Karsten and grad student Peter Cai). \n\nTheir paper \"reviews the performance characteristics of network stack processing for communication-heavy server applications,\" devising an \"indirect methodology\" to \"identify and quantify the direct and indirect costs of asynchronous hardware interrupt requests (IRQ) as a major source of overhead... \n\n\"Based on these findings, a small modification of a vanilla Linux system is devised that improves the efficiency and performance of traditional kernel-based networking significantly, resulting in up to 45% increased throughput...\"","contentLength":2374,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Steam Brick: No screen, no controller, just a power button and a USB port","url":"https://crastinator-pro.github.io/steam-brick/","date":1737843313,"author":"sbarre","guid":243,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42825441"},{"title":"Navigating the Cgroup Transition: Bridging the Gap Between Kubernetes and User Expec... S. Kunkerkar","url":"https://www.youtube.com/watch?v=JWwwtW8Hbjs","date":1737838186,"author":"CNCF [Cloud Native Computing Foundation]","guid":356,"unread":true,"content":"<article>Don't miss out! Join us at our next Flagship Conference: KubeCon + CloudNativeCon Europe in London from April 1 - 4, 2025. Connect with our current graduated, incubating, and sandbox projects as the community gathers to further the education and advancement of cloud native computing. Learn more at https://kubecon.io\n\nNavigating the Cgroup Transition: Bridging the Gap Between Kubernetes and User Expectations - Sohan Kunkerkar, Red Hat Inc\n\nAs Kubernetes and container technologies evolve, shifting from cgroup v1 to cgroup v2 has become a pivotal development. With cgroup v2 available in Kubernetes since v1.25, we're at a crossroads where many users and organizations must decide when and how to transition fully to this new system. Despite the benefits of cgroup v2, including better resource management and enhanced capabilities, users frequently encounter unexpected challenges signaling a gap in readiness and understanding. This talk will address the practical implications of moving to cgroup v2, discuss the coordinated efforts to deprecate cgroup v1, and propose actionable strategies to bridge the gap between the Kubernetes community, system administrators, and developers. By focusing on real-world experiences and providing clear guidance, this session aims to equip you with the knowledge and tools to navigate this significant change confidently.</article>","contentLength":1364,"flags":null,"enclosureUrl":"https://www.youtube.com/v/JWwwtW8Hbjs?version=3","enclosureMime":"","commentsUrl":null},{"title":"Lightning Talk: Minimizing Data Loss Within the OpenTelemetry (OTel) Collector - Alex Kats","url":"https://www.youtube.com/watch?v=xxRkfVXdy9E","date":1737837526,"author":"CNCF [Cloud Native Computing Foundation]","guid":355,"unread":true,"content":"<article>Don't miss out! Join us at our next Flagship Conference: KubeCon + CloudNativeCon Europe in London from April 1 - 4, 2025. Connect with our current graduated, incubating, and sandbox projects as the community gathers to further the education and advancement of cloud native computing. Learn more at https://kubecon.io\n\nLightning Talk: Minimizing Data Loss Within the OpenTelemetry (OTel) Collector - Alex Kats, Capital One\n\nThe OTel collector is meant to serve as a reliable and highly performant data pipeline. However, as a single component in a wider observability architecture, it is only as reliable as the downstream platforms/services it exports data to. The OTel collector has several built in mechanisms that aim to minimize the impact of unhealthy downstream exporters, including an out of the box sending queue with an additional configuration parameter for persistent queueing. There is a new component in the OTel contrib distribution, the Failover Connector. The Failover Connector allows for dynamic routing or ‚Äúfailover‚Äù of telemetry data based on downstream exporter health. This provides significant improvement to the data resiliency of the collector, as telemetry data can be continuously exported to a set of stable secondary locations, while the issues with the primary are resolved.</article>","contentLength":1309,"flags":null,"enclosureUrl":"https://www.youtube.com/v/xxRkfVXdy9E?version=3","enclosureMime":"","commentsUrl":null},{"title":"KubeSlice: Migrate Kubernetes Services With Confidence! | Project Lightning Talk","url":"https://www.youtube.com/watch?v=Xkl7EnILe-o","date":1737836485,"author":"CNCF [Cloud Native Computing Foundation]","guid":354,"unread":true,"content":"<article>Don't miss out! Join us at our next Flagship Conference: KubeCon + CloudNativeCon Europe in London from April 1 - 4, 2025. Connect with our current graduated, incubating, and sandbox projects as the community gathers to further the education and advancement of cloud native computing. Learn more at https://kubecon.io\n\nKubeSlice: Migrate Kubernetes Services With Confidence! | Project Lightning Talk\n\nSREs have been constantly asked to look for solutions to help them migrate K8S services from one Cloud cluster to another Cloud cluster while continuing to provide secure access to managed Cloud services left behind in the original Cloud.\n\nThe K8S services securely access these managed services using private endpoint FQDN. When SREs are asked to move the K8S services to a different Cloud cluster they hit a roadblock - there is no easy solution to provide private endpoint FQDN access to a managed service from a remote Cloud cluster.\n\nCNCF sandbox project KubeSlice solves this use case in an elegant way.\n\nKubeSlice enables SREs to create a Slice across clusters and slice overlay network connects services in the clusters. An external services gateway on the Slice in the original Cloud cluster will provide access to managed services via alias service FQDN import. Services in other clusters can reach the cloud service via the same private endpoint FQDN resolved by the Slice DNS.</article>","contentLength":1389,"flags":null,"enclosureUrl":"https://www.youtube.com/v/Xkl7EnILe-o?version=3","enclosureMime":"","commentsUrl":null},{"title":"Now You See Me: Tame MTTR with Real-Time Anomaly Dete... Kruthika Prasanna Simha & Prschita Prschita","url":"https://www.youtube.com/watch?v=Ipc0SOhB9OM","date":1737834180,"author":"CNCF [Cloud Native Computing Foundation]","guid":353,"unread":true,"content":"<article>Don't miss out! Join us at our next Flagship Conference: KubeCon + CloudNativeCon Europe in London from April 1 - 4, 2025. Connect with our current graduated, incubating, and sandbox projects as the community gathers to further the education and advancement of cloud native computing. Learn more at https://kubecon.io\n\nNow You See Me: Tame MTTR with Real-Time Anomaly Detection - Kruthika Prasanna Simha &amp; Prschita Prschita, Apple Inc.\n\nPicture this! You are running an application on a Kubernetes cluster &amp; you notice that your nodes have been restarting and your users are noticing that your application is unreachable. As an engineer, you want to identify these failures in real-time &amp; differentiate these from known states, at scale. But we know, static thresholds fail for dynamic metrics! This session explores real-time anomaly detection for cloud-native systems. We'll show you how to reduce MTTR and mean time to analyse by proactively identifying abnormal application behavior using statistical &amp; machine learning algorithms on time series data from Prometheus. Learn to pinpoint issues, identify missing instrumentation, and visualize anomalies using Grafana. This session equips you to achieve faster issue resolution and maintain optimal application health. We'll demo practical techniques for metrics selection, anomaly detection and proactive issue identification to manage your cloud-native applications.</article>","contentLength":1420,"flags":null,"enclosureUrl":"https://www.youtube.com/v/Ipc0SOhB9OM?version=3","enclosureMime":"","commentsUrl":null},{"title":"Every HTML Element","url":"https://iamwillwang.com/dollar/every-html-element/","date":1737831746,"author":"wxw","guid":242,"unread":true,"content":"<p>\nThere are over a hundred HTML elements. This page uses all of them.\n        You're looking at &lt;p&gt;&lt;/p&gt; right now.\n</p><hgroup><h2>Or smaller with &lt;h2&gt;&lt;/h2&gt;</h2><h6>\nAnd... nope that's it for headings. These are all in an &lt;hgroup&gt;&lt;/hgroup&gt; by the way.\n</h6></hgroup><pre>      Some text is &lt;pre&gt;&lt;/pre&gt;-formatted. Just a different look.\n    </pre><ul>\nWe can make a list with &lt;ul&gt;&lt;/ul&gt; </ul><ol>\nOr a numbered list with &lt;ol&gt;&lt;/ol&gt; </ol><dl>\nOr even a description list with &lt;dl&gt;&lt;/dl&gt;.\n<dd> and description definitions, &lt;dd&gt;&lt;/dd&gt;. </dd></dl><blockquote> &lt;blockquote&gt;&lt;/blockquote&gt; indents text. How credible!\n</blockquote><q>&lt;q&gt;&lt;/q&gt; is block's little brother.</q><figure>\nHere's a &lt;figure&gt;&lt;/figure&gt;... It usually contains some other media\n        (like an image).\n<img src=\"https://iamwillwang.com/_astro/figure.o8SCE8C_.png\" alt=\"figure\" width=\"363.3333333333333\" height=\"32.666666666666664\"><figcaption>\nand this &lt;figcaption&gt;&lt;/figcaption&gt; can then describe said media.\n</figcaption></figure>\nAnd we can take a break with &lt;hr /&gt;. \nWe \nget a lot  with text  with elements like\n&lt;strong&gt;&lt;/strong&gt;, &lt;em&gt;&lt;/em&gt;, and &lt;mark&gt;&lt;/mark&gt;.\n<p><s>&lt;s&gt;&lt;/s&gt; is for marking text as accurate</s>... err never mind\n</p><p> &lt;bdo&gt;&lt;/bdo&gt; </p><p>\nAh, now there's some breathing room, thanks to &lt;br /&gt;.\n</p><p><cite>You can &lt;cite&gt;&lt;/cite&gt; this website as Every HTML Element.</cite><code>And this whole thing is &lt;code&gt;&lt;/code&gt;,</code>\nliving on the .\n</p><time datetime=\"2025-01-23\">&lt;time&gt;&lt;/time&gt; too. It's 10:35 PM right now.</time> might all be in your head. Well, actually it's\n      in &lt;kbd&gt;.\n<p> is defined. And  is a &lt;var&gt;&lt;/var&gt;iable.\n</p><p>\nHow bout some hidden gems?\n</p><samp>Here's a taste of a &lt;samp&gt;&lt;/samp&gt;</samp><p>\nHere's an opportunity for a break &lt;wbr/&gt;.\n\nThe browser will decide when to take it.\n</p>\nAll this text... where does it live? Well we're inside the &lt;main&gt;&lt;/main&gt; &lt;body&gt;&lt;/body&gt;\nof an &lt;html&gt;&lt;/html&gt; document. There's a &lt;head&gt;&lt;/head&gt; here with us\n      too. The\n&lt;head&gt;&lt;/head&gt; thinks about things like &lt;link&gt;s to other things, &lt;meta&gt;data, our &lt;style&gt;&lt;/style&gt;, and our &lt;title&gt;&lt;/title&gt;.\n<section><article><p>\nBy this point, I think it's clear that HTML elements run the gamut\n            from content to container to logic to edge case. Some elements we\n            can see, others not so much. Some elements are meant to combine with\n            others. Some elements are only meant for your browser to read. Some\n            elements had good intentions but never picked up mainstream use.\n</p></article>\nThat concludes this section.\n</section><img src=\"https://iamwillwang.com/_astro/map.ZvQu5ZE9.png\" alt=\"figure\" usemap=\"#map\" width=\"600\"><div><p>\nSometimes it's more fun to listen than read. This is the sound of the\n          website being made.\n</p><p>In other words, media! Media everywhere.</p></div><table><tbody><tr><td>The root element of the page</td><td>Without this, you're not doing HTML.</td></tr><tr><td>Now that would've been fun.</td></tr><tr></tr></tbody><tfoot><tr><td colspan=\"4\">Disclaimer: No web standards were harmed in the making of this\n              table.</td></tr></tfoot></table>\nYou can interact with HTML beyond a form too!\n<p>\nThat concludes our journey! I lied a bit at the beginning. There are\n        more elements than this: experimental ones, deprecated ones, web\n        components, hydrogen, oxygen, and so on. Regardless, I hope this text\n        got you a little hyper because, mark my words, you're speaking a new\n        language now.\n</p>","contentLength":2752,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42823722"},{"title":"OpenRA ‚Äì Classic strategy games rebuilt for the modern era","url":"https://www.openra.net/","date":1737831307,"author":"tosh","guid":241,"unread":true,"content":"<div><div><ul><li>Saboteurs can now cloak while moving</li><li>added delete area button to the map editor</li><li>improved Battlefield News dropdown</li><li>improved formatting of unit descriptions and encyclopedias</li><li>fixed Dune 2000 not detecting installed music and videos</li><li>fixed harvesters not always acting correctly with queued orders</li><li>fixed a bug where the game window could glitch out on Windows 10</li><li>and fixed a few other minor bugs</li></ul><p>Stay tuned for more updates and be sure to take part in the playtest. Don‚Äôt forget to share your feedback with us on <a href=\"https://forum.openra.net/\">our forum</a>, <a href=\"https://discord.openra.net\">community Discord server</a>, or <a href=\"https://github.com/OpenRA/OpenRA/issues\">GitHub</a>. Good luck on the battlefield, Commanders, and happy holidays!</p></div></div><p>Welcome back, Commanders!</p><p>After a whole year of development, the OpenRA team proudly presents <a href=\"https://www.openra.net/download\">Playtest 20241116</a>. This latest installment elevates your OpenRA experience with enhanced visuals, new tools and improved performance across the board.</p><p>Introducing the newly revamped Map Editor, designed with a modern interface and a cohesive design. We took notice of how players use the editor and reimagined it to better align with your creative needs.</p><p>New Map Editor features include:</p><ul></ul><p>We added an encyclopedia to the Tiberian Dawn mod! This feature was inspired by the community‚Äôs desire for an in-game resource to consolidate knowledge about units, structures, and technologies. While fan-made wikis have been invaluable, many have become outdated or inconsistent as the game evolves.</p><p>This latest release has significantly improved support for HD art assets. You should notice faster load times and overall performance improvements for the ‚ÄúTiberian Dawn HD‚Äù project. It is packaged as a separate release and can be <a href=\"https://github.com/OpenRA/TiberianDawnHD/releases/tag/playtest-20241116\">downloaded here</a>. This preview is multiplayer-compatible with the main 20241116 playtest. The C&amp;C Remastered Collection must be installed through Steam or the EA App, and if using macOS or Linux, the project README provides <a href=\"https://github.com/OpenRA/TiberianDawnHD#asset-installation\">detailed installation instructions</a>.</p><p>Other notable changes include:</p><ul><li>game assets can now be installed from the Steam release of The Ultimate Collection</li><li>switched to high-quality Dune 2000 assets and included lots of extra visual polish</li><li>added two Red Alert missions and improved the quality of many others</li><li>Red Alert and Dune 2000 balance changes</li><li>skirmish options no longer reset between matches</li><li>behind the scenes we made significant progress towards supporting additional languages in future releases.</li></ul><p>As always, the <a href=\"https://github.com/OpenRA/OpenRA/wiki/Changelog/151b0777e7bdda9e672212acedfc0773f8312dc7\">full changelog</a> is available on GitHub if you would like to find out more.</p>","contentLength":2429,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42823667"},{"title":"DeepSeek-R1: Incentivizing Reasoning Capability in LLMs via RL","url":"https://arxiv.org/abs/2501.12948","date":1737830389,"author":"gradus_ad","guid":240,"unread":true,"content":"<!DOCTYPE html>","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42823568"},{"title":"CIA now favors lab leak theory to explain Covid's origins","url":"https://www.nytimes.com/2025/01/25/us/politics/cia-covid-lab-leak.html","date":1737828975,"author":"doctaj","guid":239,"unread":true,"content":"<div aria-live=\"polite\"><div>You have a preview view of this article while we are checking your access. When we have confirmed access, the full article content will load.</div></div><section name=\"articleBody\"><div data-testid=\"companionColumn-0\"><div><p>The C.I.A. has said for years that it did not have enough information to conclude whether the Covid pandemic emerged naturally from a wet market in Wuhan, China, or from an accidental leak at a research lab there.</p><p>But the agency issued a new assessment this week, with analysts saying they now favor the lab theory.</p><p>There is no new intelligence behind the agency‚Äôs shift, officials said. Rather it is based on the same evidence it has been chewing over for months.</p><p>The analysis, however, is based in part on a closer look at the conditions in the high security labs in Wuhan province before the pandemic outbreak, according to people familiar with the agency‚Äôs work.</p></div></div><div data-testid=\"companionColumn-1\"><div><p>A spokeswoman for the agency said the other theory remains plausible and that the agency will continue to evaluate any available credible new intelligence reporting.</p><p>Some American officials say the debate matters little: The Chinese government failed to either regulate its markets or oversee its labs. But others argue it is an important intelligence and scientific question.</p><div><div><div><div tabindex=\"-1\"><p>Thank you for your patience while we verify access. If you are in Reader mode please exit and&nbsp;<a href=\"https://myaccount.nytimes.com/auth/login?response_type=cookie&amp;client_id=vi&amp;redirect_uri=https%3A%2F%2Fwww.nytimes.com%2F2025%2F01%2F25%2Fus%2Fpolitics%2Fcia-covid-lab-leak.html&amp;asset=opttrunc\">log into</a>&nbsp;your Times account, or&nbsp;<a href=\"https://www.nytimes.com/subscription?campaignId=89WYR&amp;redirect_uri=https%3A%2F%2Fwww.nytimes.com%2F2025%2F01%2F25%2Fus%2Fpolitics%2Fcia-covid-lab-leak.html\">subscribe</a>&nbsp;for all of The Times.</p></div><div><div data-testid=\"optimistic-truncator-message\"><p>Thank you for your patience while we verify access.</p></div></div></div></div></div></div></div></section>","contentLength":1395,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42823385"},{"title":"The impact of competition and DeepSeek on Nvidia","url":"https://youtubetranscriptoptimizer.com/blog/05_the_short_case_for_nvda","date":1737819025,"author":"eigenvalue","guid":207,"unread":true,"content":"<p>As someone who spent ~10 years working as a generalist investment analyst at various long/short hedge funds (including stints at Millennium and Balyasny), while also being something of a math and computer nerd who has been studying deep learning since 2010 (back when Geoff Hinton was still talking about <a href=\"https://en.wikipedia.org/wiki/Restricted_Boltzmann_machine\">Restricted Boltzmann Machines</a> and everything was still programmed using <a href=\"https://en.wikipedia.org/wiki/MATLAB\">MATLAB</a>, and researchers were still trying to show that they could get better results at classifying handwritten digits than by using <a href=\"https://en.wikipedia.org/wiki/Support_vector_machine\">Support Vector Machines</a>), I'd like to think that I have a fairly unusual perspective on how AI technology is developing and how this relates to equity valuations in the stock market.</p><p>For the past few years, I have been working more as a developer, and have several popular open-source projects for working with various forms of AI models/services (e.g., see <a href=\"https://github.com/Dicklesworthstone/llm_aided_ocr\">LLM Aided OCR</a>, <a href=\"https://github.com/Dicklesworthstone/swiss_army_llama\">Swiss Army Llama</a>, <a href=\"https://github.com/Dicklesworthstone/fast_vector_similarity\">Fast Vector Similarity</a>, <a href=\"https://github.com/Dicklesworthstone/your-source-to-prompt.html\">Source to Prompt</a>, and <a href=\"https://github.com/pastelnetwork/python_inference_layer_server\">Pastel Inference Layer</a> for a few recent examples). Basically, I am using these frontier models all day, every day, in about as intense a way as possible. I have 3 Claude accounts so I don't run out of requests, and signed up for ChatGPT Pro within minutes of it being available.</p><p>I also try to keep on top of the latest research advances, and carefully read all the major technical report papers that come out from the major AI labs. So I think I have a pretty good read on the space and how things are developing. At the same time, I've shorted a ton of stocks in my life and have won the best idea prize on the Value Investors Club twice (for <a href=\"https://valueinvestorsclub.com/idea/TMS_INTERNATIONAL_CORP/5881178219\">TMS long</a> and <a href=\"https://valueinvestorsclub.com/idea/PETROLOGISTICS_LP/5967783148\">PDH short</a> if you're keeping track at home).</p><p>I say this not to brag, but rather to help establish my bona fides as someone who could opine on the subject without coming across as hopelessly naive to either technologists or professional investors. And while there are surely many people who know the math/science better, and people who are better at long/short investing in the stock market than me, I doubt there are very many who are in the middle of the Venn diagram to the extent I can claim to be.</p><p>With all that said, whenever I meet with and chat with my friends and ex colleagues from the hedge fund world, the conversation quickly turns to Nvidia. It's not every day that a company goes from relative obscurity to being worth more than the combined stock markets of England, France, or Germany! And naturally, these friends want to know my thoughts on the subject. Because I am such a dyed-in-the-wool believer in the long term transformative impact of this technology‚Äî I truly believe it's going to radically change nearly every aspect of our economy and society in the next 5-10 years, with basically no historical precedent‚Äî it has been hard for me to make the argument that Nvidia's momentum is going to slow down or stop anytime soon.</p><p>But even though I've thought the valuation was just too rich for my blood for the past year or so, a confluence of recent developments has caused me to flip a bit to my usual instinct, which is to be a bit more contrarian in outlook and to question the consensus when it seems to be more than priced in. The saying \"what the wise man believes in the beginning, the fool believes in the end\" became famous for a good reason.</p><p>Before we get into the developments that give me pause, let's pause to briefly review the bull case for NVDA shares, which is basically now known by everyone and his brother. Deep learning and AI are the most transformative technologies since the internet, and poised to change basically everything in our society. Nvidia has somehow ended up with something close to a monopoly in terms of the share of aggregate industry capex that is spent on training and inference infrastructure.</p><p>Some of the largest and most profitable companies in the world, like Microsoft, Apple, Amazon, Meta, Google, Oracle, etc., have all decided that they must do and spend whatever it takes to stay competitive in this space because they simply cannot afford to be left behind. The amount of capex dollars, gigawatts of electricity used, square footage of new-build data centers, and, of course, the number of GPUs, has absolutely exploded and seems to show no sign of slowing down. And Nvidia is able to earn insanely high 90%+ gross margins on the most high-end, datacenter oriented products.</p><p>We've just scratched the surface here of the bull case. There are many additional aspects to it now, which have made even people who were already very bullish to become incrementally more bullish. Besides things like the rise of humanoid robots, which I suspect is going to take most people by surprise when they are rapidly able to perform a huge number of tasks that currently require an unskilled (or even skilled) human worker (e.g., doing laundry, cleaning, organizing, and cooking; doing construction work like renovating a bathroom or building a house in a team of workers; running a warehouse and driving forklifts, etc.), there are other factors which most people haven't even considered.</p><p>One major thing that you hear the smart crowd talking about is the rise of \"a new scaling law,\" which has created a new paradigm thinking about how compute needs will increase over time. The original scaling law, which is what has been driving progress in AI since <a href=\"https://en.wikipedia.org/wiki/AlexNet\">AlexNet</a> appeared in 2012 and the Transformer architecture was invented in 2017, is the pre-training scaling law: that the more billions (and now trillions) worth of tokens we can use as training data, and the larger the parameter count of the models we are training, and the more FLOPS of compute that we expend on training those models on those tokens, the better the performance of the resulting models on a large variety of highly useful downstream tasks.</p><p>Not only that, but this improvement is somewhat knowable, to the point where the leading AI labs like OpenAI and Anthropic have a pretty good idea of just how good their latest models would be even before they started the actual training runs‚Äî in some cases, predicting the benchmarks of the final models to within a couple percentage points. This \"original scaling law\" has been vitally important, but always caused some doubts in the minds of people projecting the future with it.</p><p>For one thing, we seem to have already exhausted the world's accumulated set of high quality training data. Of course, that's not literally true‚Äî there are still so many old books and periodicals that haven't yet been properly digitized, and even if they have, are not properly licensed for use as training data. The problem is that, even if you give credit for all that stuff‚Äî say the sum total of \"professionally\" produced English language written content from the year 1500 to, say, the year 2000, it's not such a tremendous amount in percentage terms when you're talking about a training corpus of nearly 15 trillion tokens, which is the scale of current frontier models.</p><p>For a quick reality check of those numbers: Google Books has digitized around 40mm books so far; if a typical book has 50k to 100k words, or 65k to 130k tokens, then that's between 2.6T and 5.2T tokens just from books, though surely a large chunk of that is already included in the training corpora used by the big labs, whether it's strictly legal or not. And there are lots of academic papers, with the arXiv website alone having over 2mm papers. And the Library of Congress has over 3 billion digitized newspaper pages. Taken together, that could be as much as 7T tokens in total, but since much of this is in fact included in training corpora, the remaining \"incremental\" training data probably isn't all that significant in the grand scheme of things.</p><p>Of course, there are other ways to gather more training data. You could automatically transcribe every single YouTube video for example, and use that text. And while that might be helpful on the margin, it's certainly of much lower quality than, say, a highly respected textbook on Organic Chemistry as a source of useful knowledge about the world. So we've always had a looming \"data wall\" when it comes to the original scaling law; although we know we can keep shoveling more and more capex into GPUs and building more and more data centers, it's a lot harder to mass produce useful new human knowledge which is correct and incremental to what is already out there. Now, one intriguing response to this has been the rise of \"synthetic data,\" which is text that is itself the output of an LLM. And while this seems almost nonsensical that it would work to \"get high on your own supply\" as a way of improving model quality, it actually seems to work very well in practice, at least in the domain of math, logic, and computer programming.</p><p>The reason, of course, is that these are areas where we can mechanically check and prove the correctness of things. So we can sample from the vast universe of possible math theorems or possible Python scripts, and then actually check if they are correct, and only include them in our corpus if they are. And in this way, we can very dramatically expand our collection of high quality training data, at least in these kinds of areas.</p><p>And then there are all the other kinds of data we could be training AI on besides text. For example, what if we take the entire whole genome sequencing (around 200 GB to 300 GB uncompressed for a single human being) for 100 million people? That's a  of data obviously, although the vast majority of it would be nearly identical between any two people. Of course, this could be misleading to compare to textual data from books and the internet for various reasons:</p><ul><li>Raw genome size isn't directly comparable to token counts</li><li>The information content of genomic data is very different from text</li><li>The training value of highly redundant data isn't clear</li><li>The computational requirements for processing genomic data are different</li></ul><p>But it's still another large source of diverse information that we could train huge models on in the future, which is why I included it.</p><p>So while there is some hope in terms of being able to capture more and more additional training data, if you look at the rate at which training corpora have grown in recent years, it quickly becomes obvious that we are close to hitting a wall in terms of data availability for \"generally useful\" knowledge that can get us closer to the ultimate goal of getting artificial super-intelligence which is 10x smarter than John von Neumann and is an absolute world-class expert on every specialty known to man.</p><p>Besides the limited amount of available data, there have always been a couple other things that have lurked in the back of the mind of proponents of the pre-training scaling law. A big one of these is, after you've finished training the model, what are you supposed to do with all that compute infrastructure? Train the next model? Sure, you can do that, but given the rapid improvement in GPU speed and capacity, and the importance of electricity and other opex in the economic calculations, does it even really make sense to use your 2 year old cluster to train your new model? Surely you'd rather use the brand new data center you just built that costs 10x the old data center and is 20x more powerful because of better technology. The problem is, at some point you do need to amortize the up-front cost of these investments and recoup it with a stream of (hopefully positive) operating profit, right?</p><p>The market is so excited about AI that it has thankfully ignored this, allowing companies like OpenAI to post breathtaking from-inception, cumulative operating losses while garnering increasingly eye-popping valuations in follow-up investment rounds (although, to their credit, they have also been able to demonstrate very fast growing revenues). But eventually, for this situation to be sustainable over a full market cycle, these data center costs do need to eventually be recouped, hopefully with a profit, which over time is competitive with other investment opportunities on a risk-adjusted basis.</p><p>OK, so that was the pre-training scaling law. What's this \"new\" scaling law? Well, that's something that people really just started focusing on in the past year: inference time compute scaling. Before, the vast majority of all the compute you'd expend in the process was the up-front training compute to create the model in the first place. Once you had the trained model, performing inference on that model‚Äî i.e., asking a question or having the LLM perform some kind of task for you‚Äî used a certain, limited amount of compute.</p><p>Critically, the total amount of inference compute (measured in various ways, such as FLOPS, in GPU memory footprint, etc.) was much, much less than what was required for the pre-training phase. Of course, the amount of inference compute does flex up when you increase the context window size of the models and the amount of output that you generate from them in one go (although researchers have made breathtaking algorithmic improvements on this front relative to the initial quadratic scaling people originally expected in scaling this up). But essentially, until recently, inference compute was generally a lot less intensive than training compute, and scaled basically linearly with the number of requests you are handling‚Äî the more demand for text completions from ChatGPT, for instance, the more inference compute you used up.</p><p>With the advent of the revolutionary Chain-of-Thought (\"COT\") models introduced in the past year, most noticeably in OpenAI's flagship O1 model (but very recently in DeepSeek's new R1 model, which we will talk about later in much more detail), all that changed. Instead of the amount of inference compute being directly proportional to the length of the output text generated by the model (scaling up for larger context windows, model size, etc.), these new COT models also generate intermediate \"logic tokens\"; think of this as a sort of scratchpad or \"internal monologue\" of the model while it's trying to solve your problem or complete its assigned task.</p><p>This represents a true sea change in how inference compute works: now, the more tokens you use for this internal chain of thought process, the better the quality of the final output you can provide the user. In effect, it's like giving a human worker more time and resources to accomplish a task, so they can double and triple check their work, do the same basic task in multiple different ways and verify that they come out the same way; take the result they came up with and \"plug it in\" to the formula to check that it actually does solve the equation, etc.</p><p>It turns out that this approach works almost amazingly well; it is essentially leveraging the long anticipated power of what is called \"reinforcement learning\" with the power of the Transformer architecture. It directly addresses the single biggest weakness of the otherwise phenomenally successful Transformer model, which is its propensity to \"hallucinate\".</p><p>Basically, the way Transformers work in terms of predicting the next token at each step is that, if they start out on a bad \"path\" in their initial response, they become almost like a prevaricating child who tries to spin a yarn about why they are actually correct, even if they should have realized mid-stream using common sense that what they are saying couldn't possibly be correct.</p><p>Because the models are always seeking to be internally consistent and to have each successive generated token flow naturally from the preceding tokens and context, it's very hard for them to course-correct and backtrack. By breaking the inference process into what is effectively many intermediate stages, they can try lots of different things and see what's working and keep trying to course-correct and try other approaches until they can reach a fairly high threshold of confidence that they aren't talking nonsense.</p><p>Perhaps the most extraordinary thing about this approach, beyond the fact that it works at all, is that the more logic/COT tokens you use, the better it works. Suddenly, you now have an additional dial you can turn so that, as you increase the amount of COT reasoning tokens (which uses a lot more inference compute, both in terms of FLOPS and memory), the higher the probability is that you will give a correct response‚Äî code that runs the first time without errors, or a solution to a logic problem without an obviously wrong deductive step.</p><p>I can tell you from a lot of firsthand experience that, as good as Anthropic's Claude3.5 Sonnet model is at Python programming‚Äî and it is indeed VERY good‚Äî whenever you need to generate anything long and complicated, it invariably ends up making one or more stupid mistakes. Now, these mistakes are usually pretty easy to fix, and in fact you can normally fix them by simply feeding the errors generated by the Python interpreter, without any further explanation, as a follow-up inference prompt (or, more usefully, paste in the complete set of detected \"problems\" found in the code by your code editor, using what something called a Linter), it was still an annoying additional step. And when the code becomes very long or very complicated, it can sometimes take a lot longer to fix, and might even require some manual debugging by hand.</p><p>The first time I tried the O1 model from OpenAI was like a revelation: I was amazed how often the code would be perfect the very first time. And that's because the COT process automatically finds and fixes problems before they ever make it to a final response token in the answer the model gives you.</p><p>In fact, the O1 model used in OpenAI's ChatGPT Plus subscription for $20/month is basically the same model as the one used in the O1-Pro model featured in their new ChatGPT Pro subscription for 10x the price ($200/month, which raised plenty of eyebrows in the developer community); the main difference is that O1-Pro thinks for a lot longer before responding, generating vastly more COT logic tokens, and consuming a far larger amount of inference compute for every response.</p><p>This is quite striking in that, even a very long and complex prompt for Claude3.5 Sonnet or GPT4o, with ~400kb+ of context given, generally takes less than 10 seconds to begin responding, and often less than 5 seconds. Whereas that same prompt to O1-Pro could easily take 5+ MINUTES before you get a response (although OpenAI does show you some of the \"reasoning steps\" that are generated during the process while you wait; critically, OpenAI has decided, presumably for trade secret related reasons,to hide from you the exact reasoning tokens it generates, showing you instead a highly abbreviated summary of these).</p><p>As you can probably imagine, there are tons of contexts where accuracy is paramount‚Äî where you'd rather give up and tell the user you can't do it at all rather than give an answer that could be trivially proven wrong or which involves hallucinated facts or otherwise specious reasoning. Anything involving money/transactions, medical stuff, legal stuff, just to name a few.</p><p>Basically, wherever the cost of inference is trivial relative to the hourly all-in compensation of the human knowledge worker who is interacting with the AI system, that's a case where it become a complete no-brainer to dial up the COT compute (the major drawback is that it increases the latency of responses by a lot, so there are still some contexts where you might prefer to iterate faster by getting lower latency responses that are less accurate or correct).</p><p>Some of the most exciting news in the AI world came out just a few weeks ago and concerned OpenAI's new unreleased O3 model, which was able to solve a large variety of tasks that were previously deemed to be out of reach of current AI approaches in the near term. And the way it was able to do these hardest problems (which include exceptionally tough \"foundational\" math problems that would be very hard for even highly skilled professional mathematicians to solve), is that OpenAI threw insane amount of compute resources at the problems‚Äî in some cases, spending $3k+ worth of compute power to solve a single task (compare this to traditional inference costs for a single task, which would be unlikely to exceed a couple dollars using regular Transformer models without chain-of-thought).</p><p>It doesn't take an AI genius to realize that this development creates a new scaling law that is totally independent of the original pre-training scaling law. Now, you still want to train the best model you can by cleverly leveraging as much compute as you can and as many trillion tokens of high quality training data as possible, but that's just the beginning of the story in this new world; now, you could easily use incredibly huge amounts of compute just to do inference from these models at a very high level of confidence or when trying to solve extremely tough problems that require \"genius level\" reasoning to avoid all the potential pitfalls that would lead a regular LLM astray.</p><h2>But Why Should Nvidia Get to Capture All The Upside?</h2><p>Even if you believe, as I do, that the future prospects for AI are almost unimaginably bright, the question still remains, \"Why should one company extract the majority of the profit pool from this technology?\" There are certainly many historical cases where a very important new technology changed the world, but the main winners were not the companies that seemed the most promising during the initial stages of the process. The Wright Brothers' airplane company in all its current incarnations across many different firms today isn't worth more than $10b despite them inventing and perfecting the technology well ahead of everyone else. And while Ford has a respectable market cap of $40b today, it's just 1.1% of Nvidia's current market cap.</p><p>To understand this, it's important to really understand why Nvidia is currently capturing so much of the pie today. After all, they aren't the only company that even makes GPUs. AMD makes respectable GPUs that, on paper, have comparable numbers of transistors, which are made using similar process nodes, etc. Sure, they aren't as fast or as advanced as Nvidia's GPUs, but it's not like the Nvidia GPUs are 10x faster or anything like that. In fact, in terms of naive/raw dollars per FLOP, AMD GPUs are something like half the price of Nvidia GPUs.</p><p>Looking at other semiconductor markets such as the DRAM market, despite the fact that it is also very highly consolidated with only 3 meaningful global players (Samsung, Micron, SK-Hynix), gross margins in the DRAM market range from negative at the bottom of the cycle to ~60% at the very top of the cycle, with an average in the 20% range. Compare that to Nvidia's overall gross margin in recent quarters of ~75%, which is dragged down by the lower-margin and more commoditized consumer 3D graphics category.</p><p>So how is this possible? Well, the main reasons have to do with software‚Äî better drivers that \"just work\" on Linux and which are highly battle-tested and reliable (unlike AMD, which is notorious for the low quality and instability of their Linux drivers), and highly optimized open-source code in popular libraries such as <a href=\"https://en.wikipedia.org/wiki/PyTorch\">PyTorch</a> that has been tuned to work really well on Nvidia GPUs.</p><p>It goes beyond that though‚Äî the very programming framework that coders use to write low-level code that is optimized for GPUs, CUDA, is totally proprietary to Nvidia, and it has become a de facto standard. If you want to hire a bunch of extremely talented programmers who know how to make things go really fast on GPUs, and pay them $650k/year or whatever the going rate is for people with that particular expertise, chances are that they are going to \"think\" and work in CUDA.</p><p>Besides software superiority, the other major thing that Nvidia has going for it is what is known as interconnect‚Äî essentially, the bandwidth that connects together thousands of GPUs together efficiently so they can be jointly harnessed to train today's leading-edge foundational models. In short, the key to efficient training is to keep all the GPUs as fully utilized as possible all the time‚Äî not waiting around idling until they receive the next chunk of data they need to compute the next step of the training process.</p><p>The bandwidth requirements are extremely high‚Äî much, much higher than the typical bandwidth that is needed in traditional data center use cases. You can't really use traditional networking gear or fiber optics for this kind of interconnect, since it would introduce too much latency and wouldn't give you the pure terabytes per second of bandwidth that is needed to keep all the GPUs constantly busy.</p><p>Nvidia made an incredibly smart decision to purchase the Israeli company Mellanox back in 2019 for a mere $6.9b, and this acquisition is what provided them with their industry leading interconnect technology. Note that interconnect speed is a lot more relevant to the training process, where you have to harness together the output of thousands of GPUs at the same time, than the inference process (including COT inference), which can use just a handful of GPUs‚Äî all you need is enough VRAM to store the quantized (compressed) model weights of the already-trained model.</p><p>So those are arguably the major components of Nvidia's \"moat\" and how it has been able to maintain such high margins for so long (there is also a \"flywheel\" aspect to things, where they aggressively invest their super-normal profits into tons of R&amp;D, which in turn helps them improve their tech at a faster rate than the competition, so they are always in the lead in terms of raw performance).</p><p>But as was pointed out earlier, what customers really tend to care about, all other things being equal, is performance per dollar (both in up-front capex cost of equipment and in energy usage, so performance per watt), and even though Nvidia's GPUs are certainly the fastest, they are not the best price/performance when measured naively in terms of FLOPS.</p><p>But the thing is, all other things are NOT equal, and the fact that AMD's drivers suck, that popular AI software libraries don't run as well on AMD GPUs, that you can't find really good GPU experts who specialize in AMD GPUs outside of the gaming world (why would they bother when there is more demand in the market for CUDA experts?), that you can't wire thousands of them together as effectively because of lousy interconnect technology for AMD‚Äî all this means that AMD is basically not competitive in the high-end data center world, and doesn't seem to have very good prospects for getting there in the near term.</p><p>Well, that all sounds very bullish for Nvidia, right? Now you can see why the stock is trading at such a huge valuation! But what are the other clouds on the horizon? Well, there are few that I think merit significant attention. Some have been lurking in the background for the last few years, but too small to make a dent considering how quickly the pie has been growing, but where they are getting ready to potentially inflect upwards. Others are very recent developments (as in, the last 2 weeks) that might dramatically change the near-term trajectory of incremental GPU demand.</p><p>At a very high level, you can think of things like this: Nvidia operated in a pretty niche area for a very long time; they had very limited competition, and the competition wasn't particular profitable or growing fast enough to ever pose a real threat, since they didn't have the capital needed to really apply pressure to a market leader like Nvidia. The gaming market was large and growing, but didn't feature earth shattering margins or particularly fabulous year over year growth rates.</p><p>A few big tech companies started ramping up hiring and spending on machine learning and AI efforts around 2016-2017, but it was never a truly significant line item for any of them on an aggregate basis‚Äî more of a \"moonshot\" R&amp;D expenditure. But once the big AI race started in earnest with the release of ChatGPT in 2022‚Äî only a bit over 2 years ago, although it seems like a lifetime ago in terms of developments‚Äî that situation changed very dramatically.</p><p>Suddenly, big companies were ready to spend many, many billions of dollars incredibly quickly. The number of researchers showing up at the big research conferences like <a href=\"https://papers.nips.cc/\">Neurips</a> and <a href=\"https://icml.cc/\">ICML</a> went up very, very dramatically. All the smart students who might have previously studied financial derivatives were instead studying Transformers, and $1mm+ compensation packages for non-executive engineering roles (i.e., for independent contributors not managing a team) became the norm at the leading AI labs.</p><p>It takes a while to change the direction of a massive cruise ship; and even if you move really quickly and spend billions, it takes a year or more to build greenfield data centers and order all the equipment (with ballooning lead times) and get it all set up and working. It takes a long time to hire and onboard even smart coders before they can really hit their stride and familiarize themselves with the existing codebases and infrastructure.</p><p>But now, you can imagine that absolutely biblical amounts of capital, brainpower, and effort are being expended in this area. And Nvidia has the biggest target of any player on their back, because they are the ones who are making the lion's share of the profits TODAY, not in some hypothetical future where the AI runs our whole lives.</p><p>So the very high level takeaway is basically that \"markets find a way\"; they find alternative, radically innovative new approaches to building hardware that leverage completely new ideas to sidestep barriers that help prop up Nvidia's moat.</p><h2>The Hardware Level Threat</h2><p>For example, so-called \"wafer scale\" AI training chips from Cerebras, which dedicate an entire 300mm silicon wafer to an absolutely gargantuan chip that contains orders of magnitude more transistors and cores on a single chip (see this recent <a href=\"https://cerebras.ai/blog/100x-defect-tolerance-how-cerebras-solved-the-yield-problem\">blog post</a> from them explaining how they were able to solve the \"yield problem\" that had been preventing this approach from being economically practical in the past).</p><p>To put this into perspective, if you compare Cerebras' newest WSE-3 chip to Nvidia's flagship data-center GPU, the H100, the Cerebras chip has a total die area of 46,225 square millimeters compared to just 814 for the H100 (and the H100 is itself considered an enormous chip by industry standards); that's a multiple of ~57x! And instead of having 132 \"streaming multiprocessor\" cores enabled on the chip like the H100 has, the Cerebras chip has ~900,000 cores (granted, each of these cores is smaller and does a lot less, but it's still an almost unfathomably large number in comparison). In more concrete apples-to-apples terms, the Cerebras chip can do around ~32x the FLOPS in AI contexts as a single H100 chip. Since an H100 sells for close to $40k a pop, you can imagine that the WSE-3 chip isn't cheap.</p><p>So why does this all matter? Well, instead of trying to battle Nvidia head-on by using a similar approach and trying to match the Mellanox interconnect technology, Cerebras has used a radically innovative approach to do an end-run around the interconnect problem: inter-processor bandwidth becomes much less of an issue when everything is running on the same super-sized chip. You don't even need to have the same level of interconnect because one mega chip replaces tons of H100s.</p><p>And the Cerebras chips also work extremely well for AI inference tasks. In fact, you can try it today for free <a href=\"https://cloud.cerebras.ai/\">here</a> and use Meta's very respectable Llama-3.3-70B model. It responds basically instantaneously, at ~1,500 tokens per second. To put that into perspective, anything above 30 tokens per second feels relatively snappy to users based on comparisons to ChatGPT and Claude, and even 10 tokens per second is fast enough that you can basically read the response while it's being generated.</p><p>Cerebras is also not alone; there are other companies, like Groq (not to be confused with the <a href=\"https://x.ai/\">Grok</a> model family trained by Elon Musk's X AI). Groq has taken yet another innovative approach to solving the same fundamental problem. Instead of trying to compete with Nvidia's CUDA software stack directly, they've developed what they call a \"tensor processing unit\" (TPU) that is specifically designed for the exact mathematical operations that deep learning models need to perform. Their chips are designed around a concept called \"deterministic compute,\" which means that, unlike traditional GPUs where the exact timing of operations can vary, their chips execute operations in a completely predictable way every single time.</p><p>This might sound like a minor technical detail, but it actually makes a massive difference for both chip design and software development. Because the timing is completely deterministic, Groq can optimize their chips in ways that would be impossible with traditional GPU architectures. As a result, they've been demonstrating for the past 6+ months inference speeds of over 500 tokens per second with the Llama series of models and other open source models, far exceeding what's possible with traditional GPU setups. Like Cerebras, this is available today and you can try it for free <a href=\"https://console.groq.com/playground\">here</a>.</p><p>Using a comparable Llama3 model with \"speculative decoding,\" Groq is able to generate 1,320 tokens per second, on par with Cerebras and far in excess of what is possible using regular GPUs. Now, you might ask what the point is of achieving 1,000+ tokens per second when users seem pretty satisfied with ChatGPT, which is operating at less than 10% of that speed. And the thing is, it does matter. It makes it a lot faster to iterate and not lose focus as a human knowledge worker when you get instant feedback. And if you're using the model programmatically via the API, which is increasingly where much of the demand is coming from, then it can enable whole new classes of applications that require multi-stage inference (where the output of previous stages is used as input in successive stages of prompting/inference) or which require low-latency responses, such as content moderation, fraud detection, dynamic pricing, etc.</p><p>But even more fundamentally, the faster you can serve requests, the faster you can cycle things, and the busier you can keep the hardware. Although Groq's hardware is extremely expensive, clocking in at $2mm to $3mm for a single server, it ends up costing far less per request fulfilled if you have enough demand to keep the hardware busy all the time.</p><p>And like Nvidia with CUDA, a huge part of Groq's advantage comes from their own proprietary software stack. They are able to take the same open source models that other companies like Meta, DeepSeek, and Mistral develop and release for free, and decompose them in special ways that allow them to run dramatically faster on their specific hardware.</p><p>Like Cerebras, they have taken different technical decisions to optimize certain particular aspects of the process, which allows them to do things in a fundamentally different way. In Groq's case, it's because they are entirely focused on inference level compute, not on training: all their special sauce hardware and software only give these huge speed and efficiency advantages when doing inference on an already trained model.</p><p>But if the next big scaling law that people are excited about is for inference level compute‚Äî and if the biggest drawback of COT models is the high latency introduced by having to generate all those intermediate logic tokens before they can respond‚Äî then even a company that only does inference compute, but which does it dramatically faster and more efficiently than Nvidia can‚Äî can introduce a serious competitive threat in the coming years. At the very least, Cerebras and Groq can chip away at the lofty expectations for Nvidia's revenue growth over the next 2-3 years that are embedded in the current equity valuation.</p><p>Besides these particularly innovative, if relatively unknown, startup competitors, there is some serious competition coming from some of Nvidia's biggest customers themselves who have been making custom silicon that specifically targets AI training and inference workloads. Perhaps the best known of these is Google, which has been developing its own proprietary TPUs since 2016. Interestingly, although it briefly sold TPUs to external customers, Google has been using all its TPUs internally for the past several years, and it is already on its <a href=\"https://cloud.google.com/blog/products/compute/introducing-trillium-6th-gen-tpus\">6th generation</a> of TPU hardware.</p><p>Amazon has also been developing its own custom chips called <a href=\"https://press.aboutamazon.com/2023/11/aws-unveils-next-generation-aws-designed-chips\">Trainium2</a> and <a href=\"https://aws.amazon.com/ai/machine-learning/inferentia/\">Inferentia2</a>. And while Amazon is building out data centers featuring billions of dollars of Nvidia GPUs, they are also at the same time investing many billions in other data centers that use these internal chips. They have one cluster that they are bringing online for Anthropic that features over 400k chips.</p><p>Amazon gets a lot of flak for totally bungling their internal AI model development, squandering massive amounts of internal compute resources on models that ultimately are not competitive, but the custom silicon is another matter. Again, they don't necessarily need their chips to be better and faster than Nvidia's. What they need is for their chips to be good enough, but build them at a breakeven gross margin instead of the ~90%+ gross margin that Nvidia earns on its H100 business.</p><p>OpenAI has also announced their <a href=\"https://www.theregister.com/2024/09/04/openai_ai_chips_tsmc/\">plans</a> to build custom chips, and they (together with Microsoft) are obviously the single largest user of Nvidia's data center hardware. As if that weren't enough, Microsoft have themselves announced their <a href=\"https://azure.microsoft.com/en-us/blog/azure-maia-for-the-era-of-ai-from-silicon-to-software-to-systems/\">own</a> custom chips!</p><p>And Apple, the most valuable technology company in the world, has been blowing away expectations for years now with their highly innovative and disruptive custom silicon operation, which now completely trounces the CPUs from both Intel and AMD in terms of performance per watt, which is the most important factor in mobile (phone/tablet/laptop) applications. And they have been making their own internally designed GPUs and \"Neural Processors\" for years, even though they have yet to really demonstrate the utility of such chips outside of their own custom applications, like the advanced software based image processing used in the iPhone's camera.</p><p>While Apple's focus seems somewhat orthogonal to these other players in terms of its mobile-first, consumer oriented, \"edge compute\" focus, if it ends up spending enough money on its new contract with OpenAI to provide AI services to iPhone users, you have to imagine that they have teams looking into making their own custom silicon for inference/training (although given their secrecy, you might never even know about it directly!).</p><p>Now, it's no secret that there is a strong power law distribution of Nvidia's hyper-scaler customer base, with the top handful of customers representing the lion's share of high-margin revenue. How should one think about the future of this business when literally every single one of these VIP customers is building their own custom chips specifically for AI training and inference?</p><p>When thinking about all this, you should keep one incredibly important thing in mind: Nvidia is largely an IP based company. They don't make their own chips. The true special sauce for making these incredible devices arguably comes more from TSMC, the actual fab, and ASML, which makes the special EUV lithography machines used by TSMC to make these leading-edge process node chips. And that's critically important, because TSMC will sell their most advanced chips to anyone who comes to them with enough up-front investment and is willing to guarantee a certain amount of volume. They don't care if it's for Bitcoin mining ASICs, GPUs, TPUs, mobile phone SoCs, etc.</p><p>As much as senior chip designers at Nvidia earn per year, surely some of the best of them could be lured away by these other tech behemoths for enough cash and stock. And once they have a team and resources, they can design innovative chips (again, perhaps not even 50% as advanced as an H100, but with that Nvidia gross margin, there is plenty of room to work with) in 2 to 3 years, and thanks for TSMC, they can turn those into actual silicon using the exact same process node technology as Nvidia.</p><p>As if these looming hardware threats weren't bad enough, there are a few developments in the software world in the last couple years that, while they started out slowly, are now picking up real steam and could pose a serious threat to the software dominance of Nvidia's CUDA. The first of these is the horrible Linux drivers for AMD GPUs. Remember we talked about how AMD has inexplicably allowed these drivers to suck for years despite leaving massive amounts of money on the table?</p><p>Well, amusingly enough, the infamous hacker George Hotz (famous for jailbreaking the original iphone as a teenager, and currently the CEO of self-driving startup Comma.ai and AI computer company Tiny Corp, which also makes the open-source tinygrad AI software framework), recently announced that he was sick and tired of dealing with AMD's bad drivers, and desperately wanted to be able to to leverage the lower cost AMD GPUs in their TinyBox AI computers (which come in multiple flavors, some of which use Nvidia GPUs, and some of which use AMD GPUS).</p><p>Well, he is making his own custom drivers and software stack for AMD GPUs without any help from AMD themselves; on Jan. 15th of 2025, he <a href=\"https://x.com/__tinygrad__/status/1879615316378198516\">tweeted</a> via his company's X account that <em>\"We are one piece away from a completely sovereign stack on AMD, the RDNA3 assembler. We have our own driver, runtime, libraries, and emulator. (all in ~12,000 lines!)\"</em> Given his track record and skills, it is likely that they will have this all working in the next couple months, and this would allow for a lot of exciting possibilities of using AMD GPUs for all sorts of applications where companies currently feel compelled to pay up for Nvidia GPUs.</p><p>OK, well that's just a driver for AMD, and it's not even done yet. What else is there? Well, there are a few other areas on the software side that are a lot more impactful. For one, there is now a massive concerted effort across many large tech companies and the open source software community at large to make more generic AI software frameworks that have CUDA as just one of many \"compilation targets\".</p><p>That is, you write your software using higher-level abstractions, and the system itself can automatically turn those high-level constructs into super well-tuned low-level code that works extremely well on CUDA. But because it's done at this higher level of abstraction, it can just as easily get compiled into low-level code that works extremely well on lots of other GPUs and TPUs from a variety of providers, such as the massive number of custom chips in the pipeline from every big tech company.</p><p>The most famous examples of these frameworks are MLX (sponsored primarily by Apple), Triton (sponsored primarily by OpenAI), and JAX (developed by Google). MLX is particularly interesting because it provides a PyTorch-like API that can run efficiently on Apple Silicon, showing how these abstraction layers can enable AI workloads to run on completely different architectures. Triton, meanwhile, has become increasingly popular as it allows developers to write high-performance code that can be compiled to run on various hardware targets without having to understand the low-level details of each platform.</p><p>These frameworks allow developers to write their code once using high powered abstractions and then target tons of platforms automatically‚Äî doesn't that sound like a better way to do things, which would give you a lot more flexibility in terms of how you actually run the code?</p><p>In the 1980s, all the most popular, best selling software was written in hand-tuned assembly language. The PKZIP compression utility for example was hand crafted to maximize speed, to the point where a competently coded version written in the standard C programming language and compiled using the best available optimizing compilers at the time, would run at probably half the speed of the hand-tuned assembly code. The same is true for other popular software packages like WordStar, VisiCalc, and so on.</p><p>Over time, compilers kept getting better and better, and every time the CPU architectures changed (say, from Intel releasing the 486, then the Pentium, and so on), that hand-rolled assembler would often have to be thrown out and rewritten, something that only the smartest coders were capable of (sort of like how CUDA experts are on a different level in the job market versus a \"regular\" software developer). Eventually, things converged so that the speed benefits of hand-rolled assembly were outweighed dramatically by the flexibility of being able to write code in a high-level language like C or C++, where you rely on the compiler to make things run really optimally on the given CPU.</p><p>Nowadays, very little new code is written in assembly. I believe a similar transformation will end up happening for AI training and inference code, for similar reasons: computers are good at optimization, and flexibility and speed of development is increasingly the more important factor‚Äî especially if it also allows you to save dramatically on your hardware bill because you don't need to keep paying the \"CUDA tax\" that gives Nvidia 90%+ margins.</p><p>Yet another area where you might see things change dramatically is that CUDA might very well end up being more of a high level abstraction itself‚Äî a \"specification language\" similar to <a href=\"https://en.wikipedia.org/wiki/Verilog\">Verilog</a> (used as the industry standard to describe chip layouts) that skilled developers can use to describe high-level algorithms that involve massive parallelism (since they are already familiar with it, it's very well constructed, it's the lingua franca, etc.), but then instead of having that code compiled for use on Nvidia GPUs like you would normally do, it can instead be fed as source code into an LLM which can port it into whatever low-level code is understood by the new Cerebras chip, or the new Amazon Trainium2, or the new Google TPUv6, etc. This isn't as far off as you might think; it's probably already well within reach using OpenAI's latest O3 model, and surely will be possible generally within a year or two.</p><p>Perhaps the most shocking development which was alluded to earlier happened in the last couple of weeks. And that is the news that has totally rocked the AI world, and which has been dominating the discourse among knowledgeable people on Twitter despite its complete absence from any of the mainstream media outlets: that a small Chinese startup called DeepSeek released two new models that have basically world-competitive performance levels on par with the best models from OpenAI and Anthropic (blowing past the Meta Llama3 models and other smaller open source model players such as Mistral). These models are called <a href=\"https://api-docs.deepseek.com/news/news1226\">DeepSeek-V3</a> (basically their answer to GPT-4o and Claude3.5 Sonnet) and <a href=\"https://api-docs.deepseek.com/news/news250120\">DeepSeek-R1</a> (basically their answer to OpenAI's O1 model).</p><p>Why is this all so shocking? Well, first of all, DeepSeek is a tiny Chinese company that reportedly has under 200 employees. The story goes that they started out as a quant trading hedge fund similar to TwoSigma or RenTec, but after Xi Jinping cracked down on that space, they used their math and engineering chops to pivot into AI research. Who knows if any of that is really true or if they are merely some kind of front for the CCP or the Chinese military. But the fact remains that they have released two incredibly detailed technical reports, for <a href=\"https://github.com/deepseek-ai/DeepSeek-V3/blob/main/DeepSeek_V3.pdf\">DeepSeek-V3</a> and <a href=\"https://github.com/deepseek-ai/DeepSeek-R1/blob/main/DeepSeek_R1.pdf\">DeepSeekR1</a>.</p><p>These are heavy technical reports, and if you don't know a lot of linear algebra, you probably won't understand much. But what you should really try is to download the free DeepSeek app on the AppStore <a href=\"https://apps.apple.com/us/app/deepseek-ai-assistant/id6737597349\">here</a> and install it using a Google account to log in and give it a try (you can also install it on Android <a href=\"https://play.google.com/store/apps/details?id=com.deepseek.chat&amp;hl=en_US&amp;pli=1\">here</a>), or simply try it out on your desktop computer in the browser <a href=\"https://chat.deepseek.com/\">here</a>. Make sure to select the \"DeepThink\" option to enable chain-of-thought (the R1 model) and ask it to explain parts of the technical reports in simple terms.</p><p>This will simultaneously show you a few important things:</p><ul><li><p>One, this model is absolutely legit. There is a lot of BS that goes on with AI benchmarks, which are routinely gamed so that models appear to perform great on the benchmarks but then suck in real world tests. Google is certainly the worst offender in this regard, constantly crowing about how amazing their LLMs are, when they are so awful in any real world test that they can't even reliably accomplish the simplest possible tasks, let alone challenging coding tasks. These DeepSeek models are not like that‚Äî the responses are coherent, compelling, and absolutely on the same level as those from OpenAI and Anthropic.</p></li><li><p>Two, that DeepSeek has made profound advancements not just in model quality, but more importantly in model training and inference efficiency. By being extremely close to the hardware and by layering together a handful of distinct, very clever optimizations, DeepSeek was able to train these incredible models using GPUs in a dramatically more efficient way. By some measurements, over ~45x more efficiently than other leading-edge models. DeepSeek claims that the complete cost to train DeepSeek-V3 was just over $5mm. That is absolutely nothing by the standards of OpenAI, Anthropic, etc., which were well into the $100mm+ level for training costs for a single model as early as 2024.</p></li></ul><p>How in the world could this be possible? How could this little Chinese company completely upstage all the smartest minds at our leading AI labs, which have 100 times more resources, headcount, payroll, capital, GPUs, etc? Wasn't China supposed to be crippled by Biden's restriction on GPU exports? Well, the details are fairly technical, but we can at least describe them at a high level. It might have just turned out that the relative GPU processing poverty of DeepSeek was the critical ingredient to make them more creative and clever, necessity being the mother of invention and all.</p><p>A major innovation is their sophisticated mixed-precision training framework that lets them use 8-bit floating point numbers (FP8) throughout the entire training process. Most Western AI labs train using \"full precision\" 32-bit numbers (this basically specifies the number of gradations possible in describing the output of an artificial neuron; 8 bits in FP8 lets you store a much wider range of numbers than you might expect‚Äî it's not just limited to 256 different equal-sized magnitudes like you'd get with regular integers, but instead uses clever math tricks to store both very small and very large numbers‚Äî though naturally with less precision than you'd get with 32 bits.) The main tradeoff is that while FP32 can store numbers with incredible precision across an enormous range, FP8 sacrifices some of that precision to save memory and boost performance, while still maintaining enough accuracy for many AI workloads.</p><p>DeepSeek cracked this problem by developing a clever system that breaks numbers into small tiles for activations and blocks for weights, and strategically uses high-precision calculations at key points in the network. Unlike other labs that train in high precision and then compress later (losing some quality in the process), DeepSeek's native FP8 approach means they get the massive memory savings without compromising performance. When you're training across thousands of GPUs, this dramatic reduction in memory requirements per GPU translates into needing far fewer GPUs overall.</p><p>Another major breakthrough is their multi-token prediction system. Most Transformer based LLM models do inference by predicting the next token‚Äî one token at a time. DeepSeek figured out how to predict multiple tokens while maintaining the quality you'd get from single-token prediction. Their approach achieves about 85-90% accuracy on these additional token predictions, which effectively doubles inference speed without sacrificing much quality. The clever part is they maintain the complete causal chain of predictions, so the model isn't just guessing‚Äî it's making structured, contextual predictions.</p><p>One of their most innovative developments is what they call Multi-head Latent Attention (MLA). This is a breakthrough in how they handle what are called the Key-Value indices, which are basically how individual tokens are represented in the attention mechanism within the Transformer architecture. Although this is getting a bit too advanced in technical terms, suffice it to say that these KV indices are some of the major uses of VRAM during the training and inference process, and part of the reason why you need to use thousands of GPUs at the same time to train these models‚Äî each GPU has a maximum of 96 gb of VRAM, and these indices eat that memory up for breakfast.</p><p>Their MLA system finds a way to store a compressed version of these indices that captures the essential information while using far less memory. The brilliant part is this compression is built directly into how the model learns‚Äî it's not some separate step they need to do, it's built directly into the end-to-end training pipeline. This means that the entire mechanism is \"differentiable\" and able to be trained directly using the standard optimizers. All this stuff works because these models are ultimately finding much lower-dimensional representations of the underlying data than the so-called \"ambient dimensions\". So it's wasteful to store the full KV indices, even though that is basically what everyone else does.</p><p>Not only do you end up wasting tons of space by storing way more numbers than you need, which gives a massive boost to the training memory footprint and efficiency (again, slashing the number of GPUs you need to train a world class model), but it can actually end up improving model quality because it can act like a \"regularizer,\" forcing the model to pay attention to the truly important stuff instead of using the wasted capacity to fit to noise in the training data. So not only do you save a ton of memory, but the model might even perform better. At the very least, you don't get a massive hit to performance in exchange for the huge memory savings, which is generally the kind of tradeoff you are faced with in AI training.</p><p>They also made major advances in GPU communication efficiency through their DualPipe algorithm and custom communication kernels. This system intelligently overlaps computation and communication, carefully balancing GPU resources between these tasks. They only need about 20 of their GPUs' streaming multiprocessors (SMs) for communication, leaving the rest free for computation. The result is much higher GPU utilization than typical training setups achieve.</p><p>Another very smart thing they did is to use what is known as a Mixture-of-Experts (MOE) Transformer architecture, but with key innovations around load balancing. As you might know, the size or capacity of an AI model is often measured in terms of the number of parameters the model contains. A parameter is just a number that stores some attribute of the model; either the \"weight\" or importance a particular artificial neuron has relative to another one, or the importance of a particular token depending on its context (in the \"attention mechanism\"), etc.</p><p>Meta's latest Llama3 models come in a few sizes, for example: a 1 billion parameter version (the smallest), a 70B parameter model (the most commonly deployed one), and even a massive 405B parameter model. This largest model is of limited utility for most users because you would need to have tens of thousands of dollars worth of GPUs in your computer just to run at tolerable speeds for inference, at least if you deployed it in the naive full-precision version. Therefore most of the real-world usage and excitement surrounding these open source models is at the 8B parameter or highly quantized 70B parameter level, since that's what can fit in a consumer-grade Nvidia 4090 GPU, which you can buy now for under $1,000.</p><p>So why does any of this matter? Well, in a sense, the parameter count and precision tells you something about how much raw information or data the model has stored internally. Note that I'm not talking about reasoning ability, or the model's \"IQ\" if you will: it turns out that models with even surprisingly modest parameter counts can show remarkable cognitive performance when it comes to solving complex logic problems, proving theorems in plane geometry, SAT math problems, etc.</p><p>But those small models aren't going to be able to necessarily tell you every aspect of every plot twist in every single novel by Stendhal, whereas the really big models can potentially do that. The \"cost\" of that extreme level of knowledge is that the models become very unwieldy both to train and to do inference on, because you always need to store every single one of those 405B parameters (or whatever the parameter count is) in the GPU's VRAM at the same time in order to do any inference with the model.</p><p>The beauty of the MOE model approach is that you can decompose the big model into a collection of smaller models that each know different, non-overlapping (at least fully) pieces of knowledge. DeepSeek's innovation here was developing what they call an \"auxiliary-loss-free\" load balancing strategy that maintains efficient expert utilization without the usual performance degradation that comes from load balancing. Then, depending on the nature of the inference request, you can intelligently route the inference to the \"expert\" models within that collection of smaller models that are most able to answer that question or solve that task.</p><p>You can loosely think of it as being a committee of experts who have their own specialized knowledge domains: one might be a legal expert, the other a computer science expert, the other a business strategy expert. So if a question comes in about linear algebra, you don't give it to the legal expert. This is of course a very loose analogy and it doesn't actually work like this in practice.</p><p>The real advantage of this approach is that it allows the model to contain a huge amount of knowledge without being very unwieldy, because even though the aggregate number of parameters is high across all the experts, only a small subset of these parameters is \"active\" at any given time, which means that you only need to store this small subset of weights in VRAM in order to do inference. In the case of DeepSeek-V3, they have an absolutely massive MOE model with <a href=\"https://x.com/eliebakouch/status/1872304368462004608\">671B parameters</a>, so it's much bigger than even the largest Llama3 model, but only 37B of these parameters are active at any given time‚Äî enough to fit in the VRAM of two consumer-grade Nvidia 4090 GPUs (under $2,000 total cost), rather than requiring one or more H100 GPUs which cost something like $40k each.</p><p>It's rumored that both ChatGPT and Claude use an MoE architecture, with some leaks suggesting that GPT-4 had a total of 1.8 trillion parameters split across 8 models containing 220 billion parameters each. Despite that being a lot more doable than trying to fit all 1.8 trillion parameters in VRAM, it still requires multiple H100-grade GPUs just to run the model because of the massive amount of memory used.</p><p>Beyond what has already been described, the technical papers mention several other key optimizations. These include their extremely memory-efficient training framework that avoids tensor parallelism, recomputes certain operations during backpropagation instead of storing them, and shares parameters between the main model and auxiliary prediction modules. The sum total of all these innovations, when layered together, has led to the ~45x efficiency improvement numbers that have been tossed around online, and I am perfectly willing to believe these are in the right ballpark.</p><p>One very strong indicator that it's true is the cost of DeepSeek's API: despite this nearly best-in-class model performance, DeepSeek charges something like <a href=\"https://x.com/ai_for_success/status/1881371370120216618\">95% less money</a> for inference requests via its API than comparable models from OpenAI and Anthropic. In a sense, it's sort of like comparing Nvidia's GPUs to the new custom chips from competitors: even if they aren't quite as good, the value for money is so much better that it can still be a no-brainer depending on the application, as long as you can qualify the performance level and prove that it's good enough for your requirements and the API availability and latency is good enough (thus far, people have been <a href=\"https://x.com/VictorTaelin/status/1873876097794007545\">amazed</a> at how <a href=\"https://x.com/artificialguybr/status/1882979975692984373\">well</a> DeepSeek's infrastructure has held up despite the truly incredible surge of demand owing to the performance of these new models).</p><p>But unlike the case of Nvidia, where the cost differential is the result of them earning monopoly gross margins of 90%+ on their data-center products, the cost differential of the DeepSeek API relative to the OpenAI and Anthropic API could be simply that they are nearly 50x more compute efficient (it might even be significantly more than that on the inference side‚Äî the ~45x efficiency was on the training side). Indeed, it's not even clear that OpenAI and Anthropic are making great margins on their API services‚Äî they might be more interested in revenue growth and gathering more data from analyzing all the API requests they receive.</p><p>Before moving on, I'd be remiss if I didn't mention that many people are speculating that DeepSeek is simply lying about the number of GPUs and GPU hours spent training these models because they actually possess far more H100s than they are supposed to have given the export restrictions on these cards, and they don't want to cause trouble for themselves or hurt their chances of acquiring more of these cards. While it's certainly possible, I think it's more likely that they are telling the truth, and that they have simply been able to achieve these incredible results by being extremely clever and creative in their approach to training and inference. They explain how they are doing things, and I suspect that it's only a matter of time before their results are widely replicated and confirmed by other researchers at various other labs.</p><h2>A Model That Can Really Think</h2><p>The newer R1 model and technical report might even be even more mind blowing, since they were able to beat Anthropic to Chain-of-thought and now are basically the only ones besides OpenAI who have made this technology work at scale. But note that the O1 preview model was only released by OpenAI in mid-September of 2024. That's only ~4 months ago! Something you absolutely must keep in mind is that, unlike OpenAI, which is incredibly secretive about how these models really work at a low level, and won't release the actual model weights to anyone besides partners like Microsoft and other who sign heavy-duty NDAs, these DeepSeek models are both completely open-source and permissively licensed. They have released extremely detailed technical reports explaining how they work, as well as the code that anyone can look at and try to copy.</p><p>With R1, DeepSeek essentially cracked one of the holy grails of AI: getting models to reason step-by-step without relying on massive supervised datasets. Their DeepSeek-R1-Zero experiment showed something remarkable: using pure reinforcement learning with carefully crafted reward functions, they managed to get models to develop sophisticated reasoning capabilities completely autonomously. This wasn't just about solving problems‚Äî the model organically learned to generate long chains of thought, self-verify its work, and allocate more computation time to harder problems.</p><p>The technical breakthrough here was their novel approach to reward modeling. Rather than using complex neural reward models that can lead to \"reward hacking\" (where the model finds bogus ways to boost their rewards that don't actually lead to better real-world model performance), they developed a clever rule-based system that combines accuracy rewards (verifying final answers) with format rewards (encouraging structured thinking). This simpler approach turned out to be more robust and scalable than the process-based reward models that others have tried.</p><p>What's particularly fascinating is that during training, they observed what they called an \"aha moment,\" a phase where the model spontaneously learned to revise its thinking process mid-stream when encountering uncertainty. This emergent behavior wasn't explicitly programmed; it arose naturally from the interaction between the model and the reinforcement learning environment. The model would literally stop itself, flag potential issues in its reasoning, and restart with a different approach, all without being explicitly trained to do this.</p><p>The full R1 model built on these insights by introducing what they call \"cold-start\" data‚Äî a small set of high-quality examples‚Äî before applying their RL techniques. They also solved one of the major challenges in reasoning models: language consistency. Previous attempts at chain-of-thought reasoning often resulted in models mixing languages or producing incoherent outputs. DeepSeek solved this through a clever language consistency reward during RL training, trading off a small performance hit for much more readable and consistent outputs.</p><p>The results are mind-boggling: on AIME 2024, one of the most challenging high school math competitions, R1 achieved 79.8% accuracy, matching OpenAI's O1 model. On MATH-500, it hit 97.3%, and it achieved the 96.3 percentile on Codeforces programming competitions. But perhaps most impressively, they managed to distill these capabilities down to much smaller models: their 14B parameter version outperforms many models several times its size, suggesting that reasoning ability isn't just about raw parameter count but about how you train the model to process information.</p><p>The recent <a href=\"https://x.com/orikron/status/1882503121320214777\">scuttlebutt</a> on Twitter and Blind (a corporate rumor website) is that these models caught Meta completely off guard and that they perform better than the new Llama4 models which are still being trained. Apparently, the Llama project within Meta has attracted a lot of attention internally from high-ranking technical executives, and as a result they have something like 13 individuals working on the Llama stuff who each individually earn more per year in total compensation than the combined training cost for the DeepSeek-V3 models which outperform it. How do you explain that to Zuck with a straight face? How does Zuck keep smiling while shoveling multiple billions of dollars to Nvidia to buy 100k H100s when a better model was trained using just 2k H100s for a bit over $5mm?</p><p>But you better believe that Meta and every other big AI lab is taking these DeepSeek models apart, studying every word in those technical reports and every line of the open source code they released, trying desperately to integrate these same tricks and optimizations into their own training and inference pipelines. So what's the impact of all that? Well, naively it sort of seems like the aggregate demand for training and inference compute should be divided by some big number. Maybe not by 45, but maybe by 25 or even 30? Because whatever you thought you needed before these model releases, it's now a lot less.</p><p>Now, an optimist might say \"You are talking about a mere constant of proportionality, a single multiple. When you're dealing with an exponential growth curve, that stuff gets washed out so quickly that it doesn't end up matter all that much.\" And there is some truth to that: if AI really is as transformational as I expect, if the real-world utility of this tech is measured in the trillions, if inference-time compute is the new scaling law of the land, if we are going to have armies of humanoid robots running around doing massive amounts of inference constantly, then maybe the growth curve is still so steep and extreme, and Nvidia has a big enough lead, that it will still work out.</p><p>But Nvidia is pricing in a LOT of good news in the coming years for that valuation to make sense, and when you start layering all these things together into a total mosaic, it starts to make me at least feel extremely uneasy about spending ~20x the 2025 estimated sales for their shares. What happens if you even see a slight moderation in sales growth? What if it turns out to be 85% instead of over 100%? What if gross margins come in a bit from 75% to 70%‚Äî still ridiculously high for a semiconductor company?</p><p>At a high level, NVIDIA faces an unprecedented convergence of competitive threats that make its premium valuation increasingly difficult to justify at 20x forward sales and 75% gross margins. The company's supposed moats in hardware, software, and efficiency are all showing concerning cracks. The whole world‚Äî thousands of the smartest people on the planet, backed by untold billions of dollars of capital resources‚Äî are trying to assail them from every angle.</p><p>On the hardware front, innovative architectures from Cerebras and Groq demonstrate that NVIDIA's interconnect advantage‚Äî a cornerstone of its data center dominance‚Äî can be circumvented through radical redesigns. Cerebras' wafer-scale chips and Groq's deterministic compute approach deliver compelling performance without needing NVIDIA's complex interconnect solutions. More traditionally, every major NVIDIA customer (Google, Amazon, Microsoft, Meta, Apple) is developing custom silicon that could chip away at high-margin data center revenue. These aren't experimental projects anymore‚Äî Amazon alone is building out massive infrastructure with over 400,000 custom chips for Anthropic.</p><p>The software moat appears equally vulnerable. New high-level frameworks like MLX, Triton, and JAX are abstracting away CUDA's importance, while efforts to improve AMD drivers could unlock much cheaper hardware alternatives. The trend toward higher-level abstractions mirrors how assembly language gave way to C/C++, suggesting CUDA's dominance may be more temporary than assumed. Most importantly, we're seeing the emergence of LLM-powered code translation that could automatically port CUDA code to run on any hardware target, potentially eliminating one of NVIDIA's strongest lock-in effects.</p><p>Perhaps most devastating is DeepSeek's recent efficiency breakthrough, achieving comparable model performance at approximately 1/45th the compute cost. This suggests the entire industry has been massively over-provisioning compute resources. Combined with the emergence of more efficient inference architectures through chain-of-thought models, the aggregate demand for compute could be significantly lower than current projections assume. The economics here are compelling: when DeepSeek can match GPT-4 level performance while charging 95% less for API calls, it suggests either NVIDIA's customers are burning cash unnecessarily or margins must come down dramatically.</p><p>The fact that TSMC will manufacture competitive chips for any well-funded customer puts a natural ceiling on NVIDIA's architectural advantages. But more fundamentally, history shows that markets eventually find a way around artificial bottlenecks that generate super-normal profits. When layered together, these threats suggest NVIDIA faces a much rockier path to maintaining its current growth trajectory and margins than its valuation implies. With five distinct vectors of attack‚Äî architectural innovation, customer vertical integration, software abstraction, efficiency breakthroughs, and manufacturing democratization‚Äî the probability that at least one succeeds in meaningfully impacting NVIDIA's margins or growth rate seems high. At current valuations, the market isn't pricing in any of these risks.</p><p>I hope you enjoyed reading this article. If you work at a hedge fund and are interested in consulting with me on NVDA or other AI-related stocks or investing themes, I'm already signed up as an expert on <a href=\"https://glginsights.com/\">GLG</a> and <a href=\"https://www.colemanrg.com/\">Coleman Research</a>.</p>","contentLength":71791,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42822162"},{"title":"Show HN: I built a DIY plane spotting system at home","url":"https://pilane.obviy.us/","date":1737810877,"author":"obviyus","guid":180,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42821457"}],"tags":["dev"]}