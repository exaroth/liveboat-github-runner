{"id":"4W3i2hyrJTVfcLq85rWgduVQ3y3BMzrSD4pVUCMqPpFhmXWpqxQ","title":"Hacker News: Front Page","displayTitle":"HN Front","url":"https://hnrss.org/frontpage?points=75","feedLink":"https://news.ycombinator.com/","isQuery":false,"isEmpty":false,"isHidden":false,"itemCount":15,"items":[{"title":"I'm too dumb for Zig's new IO interface","url":"https://www.openmymind.net/Im-Too-Dumb-For-Zigs-New-IO-Interface/","date":1755931178,"author":"begoon","guid":219,"unread":true,"content":"<p>You might have heard that Zig 0.15 introduces a new IO interface, with the focus for this release being the new std.Io.Reader and std.Io.Writer types. The old \"interfaces\" had problems. Like <a href=\"https://github.com/ziglang/zig/issues/17985\">this performance issue</a> that I opened. And it relied on a <a href=\"https://www.openmymind.net/In-Zig-Whats-a-Writer/\">mix of types</a>, which always confused me, and a lot of  - which is generally great, but a poor foundation to build an interface on.</p><p>I've been slowly upgrading my libraries, and I ran into changes to the  client used by my smtp library. For the life of me, I just don't understand how it works.</p><p>Zig has never been known for its documentation, but if we look at the documentation for , we'll find:</p><pre><code>input output options InitErrorClient\nInitiates a TLS handshake  establishes a TLSv1 TLSv1 session</code></pre><p>So it takes one of these new Readers and a new Writer, along with some options (sneak peak, which aren't all optional). It doesn't look like you can just give it a , but  does expose a  and  method, so that's probably a good place to start:</p><pre><code> stream  stdnetallocator stream writer  stream reader  stream tls_client  stdcryptotlsClient\n  readerwriterinterface</code></pre><p>Note that  returns a  and  returns a  - those aren't the types our  expects. To convert the  to an , we need to call its  method. To get a  from an , we need the address of its  field. This doesn't seem particularly consistent. Don't forget that the  and  need a stable address. Because I'm trying to get the simplest example working, this isn't an issue - everything will live on the stack of . In a real word example, I think it means that I'll always have to wrap the  into my own heap-allocated type; giving the writer and reader have a cozy stable home.</p><p>Speaking of allocations, you might have noticed that  and  take a parameter. It's the buffer they should use. Buffering is a first class citizen of the new Io interface - who needs composition? The documentation  tell me these need to be at least <code>std.crypto.tls.max_ciphertext_record_len</code> large, so we need to fix things a bit:</p><pre><code> write_buf writer  streamwrite_buf read_buf reader  streamread_buf</code></pre><p>Here's where the code stands: </p><pre><code> std  gpa stdheapinit allocator  gpa stream  stdnetallocator stream write_buf writer  streamwrite_buf read_buf reader  streamread_buf tls_client  stdcryptotlsClient\n      readerwriterinterface tls_client</code></pre><p>But if you try to run it, you'll get a compilation error. Turns out we have to provide 4 options: the ca_bundle, a host, a  and a . Normally I'd expect the options parameter to be for optional parameters, I don't understand why some parameters (input and output) are passed one way while  and  are passed another.</p><p>Let's give it what it wants AND send some data:</p><pre><code> bundle  bundleallocator bundleallocator tls_client  stdcryptotlsClient\n  readerwriterinterfaceca bundle  bundlehost explicit read_buffer write_buffer  tls_client tls_clientwriter</code></pre><p>Now, if I try to run it, the program just hangs. I don't know what  is, but I know Zig now loves buffers, so let's try to give it something:</p><pre><code> write_buf2 tls_client  stdcryptotlsClient\n  readerwriterinterfaceca bundle  bundlehost explicit read_buffer write_buffer write_buf2 tls_client tls_clientwriter</code></pre><p>Great, now the code doesn't hang, all we need to do is read the response.  exposes a  field which is \"Decrypted stream from the server to the client.\" That sounds like what we want, but believe it or not  doesn't have a  method. It has a  a , a  (which seems close, but it blocks until the provided buffer is full), a  and a lot more, but nothing like the  I'd expect. The closest I can find, which I think does what I want, is to stream it to a writer:</p><pre><code> buf wbuf n  tls_clientreaderwbuflen\nstddebugn bufn</code></pre><p>If we try to run the code now, it crashes. We've apparently failed an assertion regarding the length of a buffer. So it seems like we also  to provide a .</p><p>Here's my current version (it doesn't work, but it doesn't crash!):</p><pre><code> std  gpa stdheapinit allocator  gpa stream  stdnetallocator stream write_buf writer  streamwrite_buf read_buf reader  streamread_buf bundle  bundleallocator bundleallocator write_buf2 read_buf2 tls_client  stdcryptotlsClient\n      readerwriterinterfaceca bundle  bundlehost explicit read_buffer read_buf2write_buffer write_buf2 tls_client tls_clientwriter buf wbuf n  tls_clientreaderwbuflen\n  stddebugn bufn</code></pre><p>When I looked through Zig's source code, there's <a href=\"https://github.com/ziglang/zig/blob/306176046e6ae5e30bc58e5f3bcf786159e367f2/lib/std/http/Client.zig#L329\">only one place</a> using . It helped to get me where where I am. I couldn't find any tests.</p><p>I'll admit that during this migration, I've missed some basic things. For example, someone had to help me find  - the renamed version of . Maybe there's a helper like: <code>tls.Client.init(allocator, stream)</code> somewhere. And maybe it makes sense that we do  but  - I'm reminded of Go's  and . And maybe Zig has some consistent rule for what parameters belong in options. And I know nothing about TLS, so maybe it makes complete sense to need 4 buffers. I feel a bit more confident about the weirdness of not having a  function on , but at this point I wouldn't bet on me.</p>","contentLength":4948,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=44993797"},{"title":"Measuring the environmental impact of AI inference","url":"https://arstechnica.com/ai/2025/08/google-says-it-dropped-the-energy-cost-of-ai-queries-by-33x-in-one-year/","date":1755919353,"author":"ksec","guid":218,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=44992832"},{"title":"My tips for using LLM agents to create software","url":"https://efitz-thoughts.blogspot.com/2025/08/my-experience-creating-software-with_22.html","date":1755910742,"author":"efitz","guid":217,"unread":true,"content":"<ul></ul><h2 dir=\"ltr\"></h2><h2 dir=\"ltr\"></h2><h2 dir=\"ltr\"></h2><h2 dir=\"ltr\"></h2><h2 dir=\"ltr\"></h2><ol></ol><h2 dir=\"ltr\"></h2><ol></ol><h2 dir=\"ltr\"></h2><ul></ul><h2 dir=\"ltr\"></h2><h2 dir=\"ltr\"></h2>","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=44991884"},{"title":"Computer fraud laws used to prosecute leaking air crash footage to CNN","url":"https://www.techdirt.com/2025/08/22/investigators-used-terrible-computer-fraud-laws-to-ensure-people-were-punished-for-leaking-air-crash-footage-to-cnn/","date":1755907496,"author":"BallsInIt","guid":216,"unread":true,"content":"<h3>from the <i>if-it-can-be-abused,-it-WILL-be-abused</i> dept</h3><p>Earlier this year, an Army helicopter <a href=\"https://en.wikipedia.org/wiki/2025_Potomac_River_mid-air_collision\" data-type=\"link\" data-id=\"https://en.wikipedia.org/wiki/2025_Potomac_River_mid-air_collision\">collided with a passenger plane</a> over the Potomac River in Washington, DC. All sixty-seven people aboard both vehicles were killed. While the FAA focused its investigation on the failures that led to this mid-air collision, local investigators in Virginia were somehow far more concerned about identifying who had <a href=\"https://www.youtube.com/watch?v=JTgUrfQsOnA\" data-type=\"link\" data-id=\"https://www.youtube.com/watch?v=JTgUrfQsOnA\">leaked footage of the collision to CNN</a>. </p><p>The subject matter of the leaked recordings was obviously of public interest. And while the government may have its own interest in controlling dissemination of recording of incidents that involve federal agencies and their oversight, it’s not the sort of government interest most courts consider to be worthy of violating the First Amendment.</p><p>Fortunately, the government has options. For a very long time, the option federal law enforcement deployed most frequently in cases involving pretty much any sort of technology was the <a href=\"https://www.techdirt.com/tag/cfaa/\" data-type=\"link\" data-id=\"https://www.techdirt.com/tag/cfaa/\">Computer Fraud and Abuse Act</a> (CFAA). This <a href=\"https://www.techdirt.com/tag/shoot-the-messenger/\" data-type=\"link\" data-id=\"https://www.techdirt.com/tag/shoot-the-messenger/\">broadly written law</a> not only allowed prosecutors to charge people with federal crimes for doing nothing more than interacting with services/servers/etc. in unexpected ways, but allowed companies to, essentially, shoot the messengers for reporting data breaches, unsecured servers, or sloppy user interfaces that could be exploited to display far more information than those running them intended.</p><p>Here’s what Metropolitan Washington Airports Authority investigator Patrick Silsbee wrote in his report:</p><blockquote><p><em>“The video shows camera angles and views that can only be found on the Metropolitan Washington Airport’s Authority CCTV video,” Silsbee wrote in a January 31 report, noting the location of landmarks in the videos, including a boathouse near the airfield.</em></p><p><em>The locations of the MWAA security cameras are redacted in the reports provided to The Intercept, ostensibly “to prevent the disclosure of law enforcement and security techniques and procedures not generally known outside the law enforcement community,” according to an accompanying letter from MWAA.</em></p></blockquote><p>That doesn’t mean much by itself, but Silsbee apparently figured out (thanks in part to CNN’s initial failure to redact some CCTV text that described the location of the camera) this footage must have been obtained by an MWAA employee working at the police dispatch center. </p><p>CCTV footage from  the dispatch center was obtained, which allegedly showed these actions being taken by the suspected leaker:</p><blockquote><p><em>“Between the hours of 2256 and 0545, Mr. Mbengue can be seen on multiple occasions utilize [sic] his personal cell phone to record video and photograph these critical scenes,” Silsbee wrote.</em></p></blockquote><p>That would be MWAA dispatch employee Mohamed Mbengue, who has since pleaded “no contest” to charges stemming from Virginia’s ultra-vague <a href=\"https://law.lis.virginia.gov/vacode/18.2-152.4/\" data-type=\"link\" data-id=\"https://law.lis.virginia.gov/vacode/18.2-152.4/\">“computer trespass” law</a>. But it really takes a person with an overriding desire to shoot messengers to call cell phone recordings of screen images a “trespass.” </p><p>The word is generally understood to describe unauthorized access to an area a person is not allowed to be in. Mbengue was at work and had full access to these recordings as a part of his job. That he recorded them and sent them to CNN doesn’t align with any rational definition of the word “trespass.” The dissemination of footage may be a violation of policy, but policy violations aren’t criminal charges — the sort of thing that can do permanent damage to a person’s life in ways that write-ups and even justified terminations simply can’t.</p><p>That’s why discretion is key. But when discretion matters most, law enforcement tends to deliberately “err” on the side of whatever does the most damage to anyone it happens to be investigating. And it appears MWAA investigators are more than happy to throw criminal charges at people for, at most, violating agency policies. A second dispatcher (Jonathan Savoy) was caught doing the same thing (albeit without sharing the recordings with CNN) and faced similar charges until someone actually exercised a bit of discretion and declined to move forward with the case.</p><blockquote><p><em>On February 3, the MWAA&nbsp;<a href=\"https://x.com/allisonpapson/status/1886553371257266540?s=46&amp;t=p5q6YKIPojSzB8gCMgZMiA\" target=\"_blank\" rel=\"noreferrer noopener\">announced</a>&nbsp;both men’s arrests, writing in a press statement that Savoy had been arrested “following further police investigation.”</em></p><p><em>In May, however, local prosecutors&nbsp;<a href=\"https://theintercept.com/2025/05/29/charges-dropped-leaked-dc-plane-crash-video/\">quietly dropped</a>&nbsp;the charges against Savoy, through a filing called a “nolle prosequi,” according to the court docket.</em></p></blockquote><p>There’s absolutely nothing in the statute that actually covers the actions described here, which formed the basis for the bullshit criminal charges. It takes a ton of punitive imagination to turn “recording a CCTV monitor with a phone” into a criminal act. The only clause that could be even possibly be considered applicable requires investigators and prosecutors to engage in lot of extremely creative re-interpretations of <a href=\"https://law.lis.virginia.gov/vacode/18.2-152.4/\" data-type=\"link\" data-id=\"https://law.lis.virginia.gov/vacode/18.2-152.4/\">the plain text of the law</a>: </p><blockquote><p><em>Use a computer or computer network to make or cause to be made an unauthorized copy, in any form, including, but not limited to, any printed or electronic form of computer data, computer programs or computer software residing in, communicated by, or produced by a computer or computer network</em></p></blockquote><p>A smartphone is a computer. A recording could be considered an “unauthorized copy.” To call the CCTV cameras and screens “computers/computer network” means ignoring the generally understood utility of this tech. Even if a network connects the cameras and a computer provides access to recordings, recording playback via phone while accessing footage the suspects <em>had every right to access</em>, calling this a violation of the law demonstrates investigators were out for revenge, rather than serving the commonly understood definition of the word “justice.”</p>","contentLength":5754,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=44991542"},{"title":"Bluesky Goes Dark in Mississippi over Age Verification Law","url":"https://www.wired.com/story/bluesky-goes-dark-in-mississippi-age-verification/","date":1755903087,"author":"BallsInIt","guid":215,"unread":true,"content":"<p> can no longer use the social media platform <a href=\"https://www.wired.com/tag/bluesky/\">Bluesky</a>. The company announced Friday that it will be blocking all IP addresses within Mississippi for the foreseeable future in response to a recent <a href=\"https://www.wired.com/tag/us-supreme-court/\">US Supreme Court</a> decision that allows the state to enforce strict age verification for social media platforms.</p><p>According to Bluesky, Mississippi’s approach to verification “would fundamentally change” how users access the site. “We think this law creates challenges that go beyond its child safety goals, and creates significant barriers that limit free speech and disproportionately harm smaller platforms and emerging technologies,” the Bluesky team said in <a data-offer-url=\"https://bsky.social/about/blog/08-22-2025-mississippi-hb1126\" data-event-click=\"{&quot;element&quot;:&quot;ExternalLink&quot;,&quot;outgoingURL&quot;:&quot;https://bsky.social/about/blog/08-22-2025-mississippi-hb1126&quot;}\" href=\"https://bsky.social/about/blog/08-22-2025-mississippi-hb1126\" rel=\"nofollow noopener\" target=\"_blank\">its statement</a>.</p><p>Bluesky did not respond to a request for comment.</p><p>The company says that compliance with Mississippi’s law—which would require identifying and tracking all users under 18, in addition to asking every user for sensitive personal information to verify their age—is not possible with the team’s current resources and infrastructure. By not complying with the law, Bluesky could face fines of up to $10,000 per violation. It is the first major social media platform to take such drastic steps in response to the law.</p><p>Age verification laws, which on the surface are intended to protect children from harmful content online, have already begun to broadly impact internet use in places around the world where they've been enacted. <a href=\"https://www.wired.com/story/the-age-checked-internet-has-arrived/\">In the UK</a>, users trying to access everything from pornography to social platforms must now submit to ID scans, credit card checks, age-estimation scans, and more to verify they’re over the age of 18. The state of Texas has a <a href=\"https://www.wired.com/story/us-supreme-court-porn-age-verification-decision-2025/\">similar law</a> the US Supreme Court upheld in June, despite concerns from critics over the erosion of free speech and access to information on the open internet.</p><p>Whether these laws are effective at protecting children is unclear; the use of virtual private networks (VPNs) in the UK <a href=\"https://www.wired.com/story/vpn-use-spike-age-verification-laws-uk/\">spiked</a> just after its age verification law went into effect as users deployed the tech to spoof their location. On platforms like Discord, people discovered they could use <a href=\"https://www.wired.com/story/age-verification-is-sweeping-gaming-is-it-ready-for-the-age-of-ai-fakes/\">video game characters</a> to trick face scans. Furthermore, <a href=\"https://www.wired.com/story/the-age-checked-internet-has-arrived/\">critics say</a> that age verification laws intended to reduce harm to children can sometimes have the opposite effect by putting kids in greater danger of identity theft and privacy violations.</p><p>WIRED has reached out to the sponsors of the original bill, Mississippi state representatives Jill Ford, Fabian Nelson, and Larry Byrd, and will update this story if they comment.</p><p>“We believe effective child safety policies should be carefully tailored to address real harms, without creating huge obstacles for smaller providers and resulting in negative consequences for free expression,” Bluesky wrote.</p>","contentLength":2738,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=44990886"},{"title":"Nitro: A tiny but flexible init system and process supervisor","url":"https://git.vuxu.org/nitro/about/","date":1755889589,"author":"todsacerdoti","guid":214,"unread":true,"content":"<p>Nitro is a tiny process supervisor that also can be used as pid 1 on Linux.</p><p>There are four main applications it is designed for:</p><ul><li>As init for a Linux machine for embedded, desktop or server purposes</li><li>As init for a Linux initramfs</li><li>As init for a Linux container (Docker/Podman/LXC/Kubernetes)</li><li>As unprivileged supervision daemon on POSIX systems</li></ul><p>Nitro is configured by a directory of scripts, defaulting to\n (or the first command line argument).</p><ul><li>Kernel support for Unix sockets</li><li> or writable  on another fs</li></ul><h2>Benefits over other systems</h2><ul><li>All state is kept in RAM, works without tricks on read-only root file systems.</li><li>Efficient event-driven, polling free operation.</li><li>Zero memory allocations during runtime.</li><li>No unbounded file descriptor usage during runtime.</li><li>One single self-contained binary, plus one optional binary to\ncontrol the system.</li><li>No configuration compilation steps needed, services are simple\ndirectories containing scripts.</li><li>Supports reliable restarting of services.</li><li>Reliable logging mechanisms per service or as default.</li><li>Support for logging chains spread over several services.</li><li>Works independently of properly set system clock.</li><li>Can be run on FreeBSD from /etc/ttys (sets up file descriptors 0, 1, 2).</li><li>Tiny static binary when using musl libc.</li></ul><p>Every directory inside  (or your custom service directory)\ncan contain several files:</p><ul><li>, an optional executable file that is run before the service starts.\nIt must exit with status 0 to continue.</li><li>, an optional executable file that runs the service;\nit must not exit as long as the service is considered running.\nIf there is no  script, the service is considered a “one shot”,\nand stays “up” until it’s explicitly taken “down”.</li><li>, an optional executable file that is run after the \nprocess finished.  It is passed two arguments, the exit status\nof the  process (or -1 if it was killed by a signal)\nand the signal that killed it (or 0, if it exited regularly).</li><li>, a symlink to another service directory.\nThe standard output of  is connected to the standard input of the\nservice under  by a pipe.  You can chain these for reliable and\nsupervised log processing.</li><li>, an optional file that causes nitro to not bring up this\nservice by default.</li><li>Service directories ending with ‘@’ are ignored; they can be used\nfor parameterized services.</li><li>Service names must be shorter than 64 chars, and not contain ,\n or newlines.</li></ul><p>You may find runit’s  useful when writing  scripts.</p><ul><li>: this service is used as a logging service for all services\nthat don’t have a  symlink.</li><li>:  is run before other services are brought up.\nYou can already use  in  to bring up services\nin a certain order.\n is run before all remaining services are killed and the\nsystem is brought down.\nAfter all processes are terminated,  is run.\nThe program , if it exists, is run instead of exiting\nwhen an unrecoverable, fatal error happens.\nThe program , if it exists, is executed into\ninstead of a shutdown.  This can be used to implement an initramfs,\nfor example.</li></ul><p>Service directories ending in  are ignored, however you can refer\nto parametrized services by symlinks (either in the service directory\nor as a  symlink), or start them manually using .</p><p>The part after the , the parameter, is passed to the scripts as\nfirst argument.</p><p>For example, given you have a script  and a symlink\n -&gt; , nitro will spawn .  Upon\nrunning , nitro will spawn , even if it does not exist in the service directory.</p><p>The lifecycle of a machine/container/session using nitro consists of\nthree phases.</p><p>First, the system is brought up.  If there is a special service\ng, its  script is run first.  After it finishes, all\nservices not marked  are brought up.</p><p>When a service exits, it’s being restarted, potentially waiting for\ntwo seconds if the last restart happened too quickly.</p><p>By using  or , the system can be\nbrought down.  If it exists,  will be run.  After this,\nnitro will send a SIGTERM signal to all running services and waits for\nup to 7 seconds for the service to exit.  Otherwise, a SIGKILL is\nsent.  After all processes are terminated,  is run.</p><p>Finally, nitro reboots or shuts down the system; or just exits when it\nwas used as a container init or unprivileged supervisor.  (When a\nreboot was requested, it re-execs itself.  This requires being called\nwith absolute path for the binary and the service directory.)</p><h2>Controlling nitro with nitroctl</h2><p>You can remote control a running nitro instance using the tool\n.</p><p>Usage: <code>nitroctl [COMMAND] [SERVICE]</code></p><ul><li>list: show a list of services and their state, pid, uptime and last\nexit status.</li><li>down: stop SERVICE (sending SIGTERM or the first letter of )</li><li>start: start SERVICE, waiting for success</li><li>restart: restart SERVICE, waiting for success</li><li>stop: stop SERVICE, waiting for success</li><li>p: send signal SIGSTOP to SERVICE</li><li>c: send signal SIGCONT to SERVICE</li><li>h: send signal SIGHUP to SERVICE</li><li>a: send signal SIGALRM to SERVICE</li><li>i: send signal SIGINT to SERVICE</li><li>q: send signal SIGQUIT to SERVICE</li><li>1: send signal SIGUSR1 to SERVICE</li><li>2: send signal SIGUSR2 to SERVICE</li><li>t: send signal SIGTERM to SERVICE</li><li>k: send signal SIGKILL to SERVICE</li><li>pidof: print the PID of the SERVICE, or return 1 if it’s not up</li><li>rescan: re-read , start added daemons, stop removed daemons</li><li>Shutdown: shutdown (poweroff) the system</li><li>Reboot: reboot the system</li></ul><h2>Controlling nitro by signals</h2><p>rescan can also be triggered by sending  to nitro.</p><p>reboot can also be triggered by sending  to nitro.</p><p>shutdown can also be triggered by sending  to nitro, unless\nnitro is used as Linux pid 1.</p><p>Nitro is self-contained and can be booted directly as pid 1.\nIt will mount  and  when required, everything else\nshould be done with .</p><p>When receiving Ctrl-Alt-Delete, nitro triggers an orderly reboot.</p><h2>Nitro as init for a Docker container</h2><p>Nitro is compiled statically, so you can copy it into your container easily:</p><pre><code>COPY ./nitro /bin/\nCOPY ./nitroctl /bin/\nCMD [\"/bin/nitro\"]\n</code></pre><p>Note that  must exist in the container if you want to use the\ndefault control socket name.</p><p>You can put the control socket onto a bind mount and remote control\n using  from the outside by pointing  to\nthe appropriate target.</p><p>You can add this line to  to run  supervised by\nFreeBSD :</p><pre><code>/etc/nitro \"/usr/local/sbin/nitro\" \"\" on\n</code></pre><p>I’m standing on the shoulder of giants; this software would not have\nbeen possible without detailed study of prior systems such as\ndaemontools, freedt, runit, perp, and s6.</p><p>nitro is licensed under the 0BSD license, see LICENSE for details.</p>","contentLength":6330,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=44988530"},{"title":"Show HN: JavaScript-free (X)HTML Includes","url":"https://github.com/Evidlo/xsl-website","date":1755888450,"author":"Evidlo","guid":184,"unread":true,"content":"<p>I've been working on a little demo for how to avoid copy-pasting header/footer boilerplate on a simple static webpage. My goal is to approximate the experience of Jekyll/Hugo but eliminate the need for a build step before publishing. This demo shows how to get basic templating features with XSL so you could write a blog post which looks like</p><pre><code></code></pre>\nSome properties which set this approach apart from other methods:<pre><code>  - no build step (no need to setup Jekyll on the client or configure Github/Gitlab actions)\n  - works on any webserver (e.g. as opposed to server-side includes, actions)\n  - normal looking URLs (e.g. `example.com/foobar` as opposed to `example.com/#page=foobar`)\n</code></pre>\nThere's been some talk about removing XSLT support from the HTML spec [0], so I figured I would show this proof of concept while it still works.","contentLength":818,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=44988271"},{"title":"The first Media over QUIC CDN: Cloudflare","url":"https://moq.dev/blog/first-cdn/","date":1755887056,"author":"kixelated","guid":213,"unread":true,"content":"<p>🚨 It’s finally happening! 🚨</p><p>Cloudflare has <a href=\"https://blog.cloudflare.com/moq/\">just announced</a> their Media over QUIC CDN!\nIt’s an , and you can test MoQ on their , anycast network.\nTry it out, and convince your boss’ boss that the writing is on the wall.</p><p>If you’ve been living under a rock, MoQ is an <a href=\"https://datatracker.ietf.org/group/moq/about/\">up-and-coming standard</a> for live media, aiming to supplant <a href=\"https://moq.dev/blog/replacing-webrtc\">WebRTC</a>, <a href=\"https://moq.dev/blog/replacing-hls-dash\">HLS/DASH</a>, and even  as the one to rule them all.\nAnd now Cloudflare wins the award for the first CDN offering!</p><figure><figcaption>Your prize is a blog post. You’re welcome mega-corp.</figcaption></figure><p>Also, , some shameless self-promotion: I just soft-launched <a href=\"https://moq.dev/blog/first-app\">hang.live</a>.\nCheck it out if you want to see the  cool stuff you can do with MoQ.</p><p>I’m biased so naturally I’m going to use <a href=\"https://github.com/kixelated/moq/tree/main/js/hang\">@kixelated/hang</a> (smash that star button).\nYou can publish a live broadcast in the browser using the <a href=\"https://moq.dev/publish\">web demo</a> or the <a href=\"https://github.com/kixelated/moq/blob/main/js/hang-demo/src/publish.html#L25\">library</a>:</p><pre tabindex=\"0\" data-language=\"html\"><code></code></pre><p>There’s a link to watch your live broadcast using the <a href=\"https://moq.dev/watch\">web demo</a>, or again you can use the <a href=\"https://github.com/kixelated/moq/blob/9f5f6153458c03f255877a036e36f68f742d5c85/js/hang-demo/src/index.html#L30\">library</a>:</p><pre tabindex=\"0\" data-language=\"html\"><code></code></pre><p>You might even notice  because I’ve been experimenting with AI features (gotta get funding eventually 💰).\nThey’re generated  using <a href=\"https://github.com/snakers4/silero-vad\">silero-vad</a> + <a href=\"https://github.com/openai/whisper\">whisper</a> + <a href=\"https://huggingface.co/docs/transformers.js/en/index\">transformers.js</a> + <a href=\"https://github.com/microsoft/onnxruntime\">onnxruntime-web</a> + <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGPU_API\">WebGPU</a> and transmitted using MoQ of course.\nBut that’s a whole separate blog post; it’s pretty cool.</p><p> You don’t have to use this <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_components\">Web Component</a> API.\n<a href=\"https://moq.dev/blog/first-app\">hang.live</a> uses the far more powerful Javascript API to do more complicated stuff like get access to individual video frames.\nThere’s a  section at the end of this blog if you LOVE sample code, but I’m not going to bore the rest of you.</p><p>There’s also a 🦀 Rust 🦀 library <a href=\"https://github.com/kixelated/moq/tree/main/rs/hang\">to import MP4</a>, <a href=\"https://github.com/kixelated/moq/blob/9f5f6153458c03f255877a036e36f68f742d5c85/rs/justfile#L103\">pipe media from ffmpeg</a>, and <a href=\"https://github.com/kixelated/moq/blob/9f5f6153458c03f255877a036e36f68f742d5c85/rs/justfile#L119\">publish/watch using gstreamer</a> so you can do more complicated media stuff without 🤮 Javascript 🤮.\nI wish I could spend more time on the Rust side but  is a big deal.\nWe are no longer forced to use WebRTC, but that also means we need to build our own WebRTC in 🤮 Javascript 🤮.\nI can suffer and you can reap the rewards.</p><h2>What’s not available yet?</h2><p>This is a  release.\nCloudflare is only supporting a  subset of an <a href=\"https://www.ietf.org/archive/id/draft-ietf-moq-transport-07.html\">old draft</a>, which is even smaller than <a href=\"https://www.ietf.org/archive/id/draft-lcurley-moq-lite-01.html\">my tiny subset</a>.\nThey’re using a <a href=\"https://github.com/englishm/moq-rs\">fork</a> of my terrible code so bugs are guaranteed.</p><ul><li><strong>There’s no authentication yet</strong>: choose an unguessable name for each broadcast.</li><li><strong>There’s no ANNOUNCE support</strong>: my <a href=\"https://github.com/kixelated/moq/blob/main/js/hang-demo/src/meet.html\">conferencing example</a> uses  to discover when broadcasts start/stop, so that won’t work.</li><li><strong>Nothing has been optimized</strong>: the user experience will improve over time.</li></ul><p>If any of these are deal breakers, then you could always run your own <a href=\"https://github.com/kixelated/moq/tree/main/rs/moq-relay\">moq-relay</a> in the meantime.\nI’ve been adding new features and fixing a bunch of stuff  Cloudflare smashed that fork button.\nFor example, authentication (via JWT) and a WebSocket fallback for Safari/TCP support.</p><p>There’s even a <a href=\"https://github.com/kixelated/moq.dev/blob/main/infra/relay.tf\">terraform module</a> that powers .\nYou too can run your own “global” CDN with 3 nodes and pay GCP a boatload of money for the privilege.\nIt’s not  as good as Cloudflare’s network, currently available for free…</p><p>Or host  yourself!\nIt should even work on private networks provided you <a href=\"https://moq.dev/blog/tls-and-quic\">wrestle with TLS certificates</a>.\nI’d also love to get MoQ running over <a href=\"https://www.iroh.computer/\">Iroh</a> for peer-to-peer action if anybody wants to help.</p><p>As a great philosopher once said:</p><blockquote><p>Apathy is a tragedy and boredom is a crime.\n- <a href=\"https://www.youtube.com/watch?v=k1BneeJTDcU\">Bo Burnham</a></p></blockquote><p>This is a big deal.\nThe biggest of deals.\nThe HUGEST of deals.</p><p>I’ve been an <a href=\"https://moq.dev/blog/transfork\">outspoken critic</a> of the MoQ standardization process.\nIt’s just really difficult to design a protocol, via a cross-company committee, before there’s been any real world usage.\nIt’s been over 3 years since I fought Amazon lawyers and published my <a href=\"https://www.ietf.org/archive/id/draft-lcurley-warp-00.html\">first MoQ draft</a>.\nIt’s going to be at least another 3 years before even the <a href=\"https://datatracker.ietf.org/doc/draft-ietf-moq-transport/\">base networking layer</a> becomes an RFC.</p><p>\nThe best standards take a while.\nLook no further than QUIC, deployed by Google in 2012, started standardization in 2015, with the RFC released in 2021.\nAnd they had a boatload of production data to shape the specification.\nMeanwhile, we have only had a <a href=\"https://moq.dev/watch\">Big Buck Bunny demo</a>, and I believe the standard has veered off course as a result.</p><p>Cloudflare has done something fantastic and said:</p><blockquote><p>fuck waiting for a RFC, let’s release something</p></blockquote><p>Okay they didn’t say that, but this is  the mentality that MoQ needs right now.\n.\n.\n.</p><figure><figcaption>Holy shit I’m Shia LaBeouf.</figcaption></figure><p>Arguing in the <a href=\"https://github.com/moq-wg/moq-transport/issues\">650+ issues</a> and <a href=\"https://github.com/moq-wg/moq-transport/pulls\">500+ PRs</a> can wait for another day.\nTweaking the messaging encoding for the hundredth time can wait for another day.\nWe’re still going to make sure that MoQ gets standardized , but it’s more important to get  out there.</p><p>I’m looking at you: Google, Akamai, Fastly, etc.\nTake some code, run it on some spare servers, and start to learn what customers need  you design the protocol.</p><p>We’re effectively trying to reimplement WebRTC / HLS / RTMP using relatively new Web APIs.\nDon’t judge MoQ based on these initial offerings.\nWe’ve got a  of work to do.\n.</p><p><a href=\"https://discord.gg/FCYF3p99mr\">Join the Discord</a>.\nSomehow there’s 900+ people in there.\nPing me and I will do whatever I can to help.\n if it means putting one more nail in the WebRTC coffin.</p><h2>Javascript is an Abomination</h2><p>You win some bonus documentation.\nCongrats!\nI knew you would win.</p><p>Here’s an example of my reactive library in action.\nIt powers <a href=\"https://moq.dev/blog/first-app\">hang.live</a> so the API is subject to change and is probably already out of date.\nWhen in doubt, <a href=\"https://github.com/kixelated/moq/tree/main/js/hang\">consult the source code</a> like the hacker you are.</p><pre tabindex=\"0\" data-language=\"typescript\"><code></code></pre><p>There’s even some  features behind undocumented APIs.\nLike running an object detection model in browser and publishing the results as a MoQ track.\nStay tuned for a blog post about that if I can figure out a better use-case than a cat cam. 🐈</p><pre tabindex=\"0\" data-language=\"typescript\"><code></code></pre><p>Also, for the record, Typescript is really nice.\n🤮 Javascript 🤮 is still an abomination.</p>","contentLength":5578,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=44987924"},{"title":"Leaving Gmail for Mailbox.org","url":"https://giuliomagnifico.blog/post/2025-08-18-leaving-gmail/","date":1755884508,"author":"giuliomagnifico","guid":212,"unread":true,"content":"<p>This was a tough decision, having used Gmail since 2007/2008. However, I had to draw the line and stop giving Google my data for free.</p><p>The problem with email is that everything is transmitted in plain text. Technically, Google can store every message you receive and know everything, and U.S. agencies can request access to that data (this include also EU citizens under the <a href=\"https://policies.google.com/privacy/frameworks?hl=en-US\">EU-U.S. and Swiss-U.S. Data Privacy Frameworks</a>).</p><p>For someone like me, who cares about privacy and runs as much as possible on my own home servers, that felt like way too much.</p><p>So I decided to switch to another provider, one that respects privacy a bit more. Of course, this meant no longer “paying” with my personal data, but instead paying the actual price of the email service.</p><p>Let me start by saying: I use email in a very basic way. I send and receive a lot of messages (at least 50 a day), but they’re plain text/html emails with no attachments or fancy features. I couldn’t care less about the rest of the “suite\", like notes, contacts, calendars and all that extra stuff.</p><p>So, after a bit of research, I narrowed it down to three different services:</p><ul></ul><p>The last two providers offered true end-to-end encryption, at a cost of about €3/4 per month. Sounds good… but the catch is that to use their end-to-end encryption you’re forced to use their apps (or, on macOS, run a background “bridge”).</p><p>That’s a no go for me, because I love Apple’s Mail app on macOS and iOS, it just works perfectly for my needs, and I don’t want to give that up.</p><p>So, I went with mailbox.org that still offers integrated PGP encryption, and if you want, you can always use external PGP too (which I was already doing with Gmail).</p><p>Mailbox.org has a solid plan: 10GB of email storage plus 5GB of cloud storage starting at €2.50/month (paid annually). You can even expand the mail storage up to 100GB, at €0.20 per gigabyte.</p><p>I was using around 2.5GB on Gmail, so I had no issues with paying the equivalent of two coffees a month for a huge boost in privacy. And if I ever need more space, I can just add it on-demand for €0.20/GB.</p><p>There’s also a free one-month trial, but it’s pretty limited since you can’t send emails outside of mailbox.org domains.</p><p>So win the end, I registered my new address <code>giuliomagnifico@mailbox.org</code> and paid €3 for a month of testing. That means I’m covered for two months, and then I can just “top up” the account with €30 for a full year.</p><div><div>Mailbox.org doesn’t use auto-renewal, so you have to manually top up your account. Nice feature</div></div><p>The web interface is extremely simple but very effective. I actually find it better than Gmail, less bloated of useless stuff.</p><p>And on mobile it’s very usable too.</p><img src=\"https://giuliomagnifico.blog/_images/2025/away-from-gmail/ios.jpeg\" alt=\"ios\"><p>One thing I prefer is using folders instead of Gmail’s “labels.” Mainly because this way I can put the folders directly under the account in Apple Mail (I think is the only email that can actually support this).</p><img src=\"https://giuliomagnifico.blog/_images/2025/away-from-gmail/folders.jpeg\" alt=\"folders\"><p>Mailbox.org also has all the features I need,\nand probably way more than I’ll ever use. It even includes storage, video chat, an XMPP chat, task lists, calendar, contacts, an Etherpad (basically shared notes, I think), and so on… none of which I really care about.</p><p>I decided to move all my emails from Gmail to mailbox.org, so I could (in future) completely wipe my Gmail account.</p><p>After creating an “app password” on Gmail, I installed the Docker image and ran the tool with this script:</p><pre tabindex=\"0\"><code>#!/bin/sh\nset -eu\n\nHOST1=\"imap.gmail.com\"\nUSER1=\"giuliomagnifico@gmail.com\"\nPASS1=\"xxx\"\n\nHOST2=\"imap.mailbox.org\"\nUSER2=\"giuliomagnifico@mailbox.org\"\nPASS2=\"xxx\"\n\nLOGDIR=\"/home/imapsync/logs\"\nmkdir -p \"$LOGDIR\"\nLOGFILE=\"$LOGDIR/sync_$(date +%F_%H-%M-%S).log\"\n\necho \"Starting: $(date)\"\ndocker compose run --rm imapsync imapsync \\\n  --host1 \"$HOST1\" --user1 \"$USER1\" --password1 \"$PASS1\" --ssl1 \\\n  --host2 \"$HOST2\" --user2 \"$USER2\" --password2 \"$PASS2\" --ssl2 \\\n  --automap --syncinternaldates --skipsize \\\n  --useuid --addheader --usecache --buffersize 4096 \\\n  --nofoldersizes --nofoldersizesatend \\\n  --exclude \"\\[Gmail\\]/All Mail\" \\\n  --regextrans2 \"s/\\[Imap\\]\\/Archive/Archive/\" \\\n  --log &gt; \"$LOGFILE\" 2&gt;&amp;1\n\necho \"Complete: $(date)\"\necho \"Log file: $LOGFILE\"\n</code></pre><p>The script excludes the All Mail folder\" using: <code>--exclude \"\\[Gmail\\]/All Mail\" \\</code></p><p>This to avoid duplicate emails already present in the folders, I also merged the  folder into the general Archive folder using: <code>--regextrans2 \"s/\\[Imap\\]\\/Archive/Archive/\"</code></p><p>This because Apple’s Mail app creates the  folder/label on Gmail whenever you use the “Archive” function instead of “Trash.”</p><p>The whole process took a couple of hours (11201secs, ~3h to be precise) during which I was monitoring the logs using: <code>tail -f /home/imapsync/logs/sync_2025-08-19_15-02-48.log</code></p><pre tabindex=\"0\"><code>[cut]\nmsg [Gmail]/Trash/183393 {19549}      copied to Trash/13361      2.36 msgs/s  200.418 KiB/s 2.140 GiB copied \nmsg [Gmail]/Trash/183394 {92245}      copied to Trash/13362      2.36 msgs/s  200.420 KiB/s 2.140 GiB copied \nmsg [Gmail]/Trash/183395 {19675}      copied to Trash/13363      2.36 msgs/s  200.415 KiB/s 2.140 GiB copied \nmsg [Gmail]/Trash/183396 {5953}       copied to Trash/13364      2.36 msgs/s  200.410 KiB/s 2.140 GiB copied \n++++ End looping on each folder\n++++ Statistics\nTransfer started on                     : Tuesday 19 August 2025-08-19 03:02:49 +0000 UTC\nTransfer ended on                       : Tuesday 19 August 2025-08-19 06:09:30 +0000 UTC\nTransfer time                           : 11201.5 sec\nFolders synced                          : 14/14 synced\nFolders deleted on host2                : 0 \nMessages transferred                    : 26407 \nMessages skipped                        : 0\nMessages found duplicate on host1       : 0\nMessages found duplicate on host2       : 0\nMessages found crossduplicate on host2  : 0\nMessages void (noheader) on host1       : 0  \nMessages void (noheader) on host2       : 0\nMessages found in host1 not in host2    : 0 messages\nMessages found in host2 not in host1    : 0 messages\nMessages deleted on host1               : 0\nMessages deleted on host2               : 0\nTotal bytes transferred                 : 2297647358 (2.140 GiB)\nTotal bytes skipped                     : 0 (0.000 KiB)\nMessage rate                            : 2.4 messages/s\nAverage bandwidth rate                  : 200.3 KiB/s\nReconnections to host1                  : 0\nReconnections to host2                  : 0\nMemory consumption at the end           : 268.7 MiB (*time 836.2 MiB*h) (started with 161.5 MiB)\nLoad end is                             : 0.06 0.08 0.08 1/1135 on 16 cores\nCPU time and %CPU                       : 446.72 sec 4.0 %CPU 0.2 %allcpus\nBiggest message transferred             : 30413995 bytes (29.005 MiB)\nMemory/biggest message ratio            : 9.3\nDetected 0 errors\nThis imapsync is up to date. ( local 2.306 &gt;= official 2.290 )( Use --noreleasecheck to avoid this release check. )\nHomepage: https://imapsync.lamiral.info/\nExiting with return value 0 (EX_OK: successful termination) 0/50 nb_errors/max_errors PID 1\nRemoving pidfile /var/tmp//tmp/imapsync.pid\nLog file is LOG_imapsync/2025_08_19_03_02_49_171_giuliomagnifico_gmail_com_giuliomagnifico_mailbox_org.txt ( to change it, use --logfile filepath ; or use --nolog to turn off logging )\n</code></pre><p>Of course, the full switch will be a gradual process, even though I’ve already updated almost all my main services with the new address.</p><p>To make things easier, on my old Gmail account (which I removed from Apple Mail on all devices) I set up a forward to my new mailbox.org address.</p><p><img src=\"https://giuliomagnifico.blog/_images/2025/away-from-gmail/forward.jpeg\" alt=\"forward\">\nOn the new mailbox.org account, I also set up a filter to flag any emails that get forwarded from Gmail.</p><p>That way, I immediately notice them and I can update the address from Gmail to Mailbox.org whenever they show up. (The  tag is perfect for this, since it add a “real red flag” in Apple Mail on iOS, iPadOS and macOS)</p><p>Mailbox.org allows you to easily import your keys for PGP cryptography directly from the web. This is convenient as it lets you read and send PGP encrypted emails right from the browser on iOS, where there aren’t any “decent” apps for encrypted mail. The same goes for macOS, although there you can just use Thunderbird, which works really well.</p><p>Here’s how PGP emails look on iOS:</p><img src=\"https://giuliomagnifico.blog/_images/2025/away-from-gmail/gpgios.jpeg\" alt=\"PGPios\"><p>To send encrypted emails, you just select “Use PGP encrypted” when composing a new message, after importing your private key, of course.</p><p>And from the web interface, there’s also a handy feature to quickly import the sender’s public keys:</p><p>I’m satisfied. Leaving Gmail completely was something I wanted to do for a long time, but I was always hesitant. Finally, I made the switch, and, as often happens with these transitions, I discovered many unexpected positive aspects.</p><p>Oh, and if you have something to tell me or just want to test Mailbox.org after your switch, feel free to send me an email. Here’s my public key:</p><pre tabindex=\"0\"><code>-----BEGIN PGP PUBLIC KEY BLOCK-----\n\nmQINBGilAyEBEADAVi8ANnj22Au87TAgeodY9Cp24wRlVi/N1LBZFU8JVquuy9Dm\niqWs7FDBnPKUCRGU+tGWnro38oXCvQ4jKd2l6mORWMaHlYpA3bsbVtjJcneQI4TR\nZbIw8h25Hmloqy1hT6Cp4kf5C+fBo7DCtlYOUJmHN9H4nhWisALqpmWQmAmruaMy\nFlAhj/vWVe1bF6RkHgxaifgfRJpwHLevcBvsoASPxDLt8BMhITFK32iriR2JKjQ/\nfmRUwVm2x3QgGX/LbR4xzAfe53Hn5YWxGqUYJ5dtBrduHtyhdf9ChENY8sWcClE7\nJtR6FQ9Vmed3AG1GpBmX0Jemp1gZP6MBTTnZ9cWH9n9A9qH7NS7mpic7UD5BLaBk\nK4XeZCRAr58x2PyVQBUiZwcKa8XqPbQOP6HFHniAkmyBkthbhMVDTNvq17m2/6n6\nMdRQwpL/Wwc1+Fb2rgFI1naqXoxVpWqLs8Xb/AIfnQD13Y1liFV3N8aHbcZWhmzA\nALm0+lh1oFCL58VJ9jGi6DHHq/EKb5VMzR0SDb/PSDhxQU1HlE1UctBdd5659m+J\nOHhM+NeZMcjaZy7cimmuBmneHGJOemv3uPbn83srZDErzawBqh7lLQKf9MhvPxoD\nocueQ6/88hxBMONcPSCZ+0d4ABfngO0fik/uDDqcUPmqm1WpWwrRc0X4hwARAQAB\ntC5HaXVsaW8gTWFnbmlmaWNvIDxnaXVsaW9tYWduaWZpY29AbWFpbGJveC5vcmc+\niQJRBBMBCAA7FiEEXupXCErFrqjXs35nbC5LFXfhTvcFAmilAyECGwMFCwkIBwIC\nIgIGFQoJCAsCBBYCAwECHgcCF4AACgkQbC5LFXfhTvc0Ig//Vd9yk7sYP0dL8R54\nZfCpic5lCjmBeuMF8VZ3Ip0UqakHPzP4HGHHPM9/a9Lw3V8KtWa6cJWiMiOKR6eK\nKoObfHwzeXT7itNJrqjPLZ4NHwH6uL3DIweQCgAoVYDiKd0K83/PJDCihsKEqXSk\nNefqGB+lWQu6J6q79W1SAvXczTUbzplVqklYXRTUGE5lJS6yw0jGUTmrGuXReIDy\nCYK4vuKM0PZo1PmET0YqAkdWmXUUWJOZHdFaGezEtea/ss1OGhe9Nx+ZwHwYwOW/\nKU1Cgr1ZToYRlPxTA1X2sjpJzZGzGxPaqAEOkH7P/ZfwhBWbXU3bNCgI0bb7AzBm\nF+jPKU5j51kQk/a8xLQpQZ7sanoMmasaJwoZG6B20qk34ktSeW+yTncTNNKGWqiQ\nQxU6ptis0uTunL7LduOejRXXqDo/I69Vc2dyZWgsDhju5LD6WuniHs23jcl37ivp\nYsH6xdfteQmseJKEiGLDzCT+wd04EOtpKefoUvAQSXa5heuAwfEXfjoDQZnwsv7s\nBV1rN5xFYHnI6qkO/u6OpnfAJc9sWoBdclPzcswCvW0wzP1FxIle4u9p6Dej8sFU\nlU6t153v+kb7ohS7JEXiZvx43wZh7ADWvLCBDgHozOgvz7BXuFodaCILd+mMRLUO\nXdnWtOBa9/Enzrj4EegAU+m9/Mu5Ag0EaKUDIQEQAMkR6aiADscqU57zYo6YXugk\nxIAfidVRh5igGushqOlGb6ZyaI1KpMdXAATvCXj7Bczum/4EAyR0GpaR6V50UYz1\n2kmGD3tEEHtkK9jaUYkFWiKZJmYsCQ1MGzaTAM3yzMrbMfNnHDhvCfMhONPiZhm1\nLyN+6kBY8XFGIa8aemXTIdBG8mWufn9W7eImUs1wbBYgEXCUWbPWTkQUhL3yHFvo\nYRG0v7OGdQxw5Fon6YyBBgvXxIOHxR9WOBix2GZ92rZ2HI2dfVxE3uRWzo9gN5GB\ng3PhvZJDDcM4a9EYz1mASL++j9UnydQQDT1bnYWKtcQ0vJByPBLs1OlgN/lYgu/W\n5L1jW4NhhAiTaeGINZWqBrMeu5FBxqMCEZoo1oQmqd1KN1xOq9jiE09n9lwz/p2R\nsbmqFtVsZlBp+ThFXJuZ2F5oa87KvOY0eLqv8iAPIj+mxfDhnUhiNsne9C3Fm7Wu\nMG2euBVq2sG7F4+RC4Oszxin0XYSjNZ9B93WtN4h0nZN0Wh1V2bcBWmqKs62iZTC\n932iQidp77x/qldjQmQahrV+8Xueg5X3t5ODvnJDc4i/DtV0L+1cjUdXkEjKYeq7\n+beqbR941VLB86iqxJOrmyXzCCpqav+xa1CSfYg47EHEobSory5YM0QBZTlSfhcR\nrv+D85Lmv2eqihZhSdW7ABEBAAGJAjYEGAEIACAWIQRe6lcISsWuqNezfmdsLksV\nd+FO9wUCaKUDIQIbDAAKCRBsLksVd+FO92bID/9kSWBxWEvEv9oraFiR+T0GnHnY\nEvD1GWn3+Tnw2vg2bnkaDNI2BxAvuI9TkBLUlISwH8T1qG9VaBsz+VduFP+k6jc/\nCrl6Bmy6NiugzpAp4j7FMrNCvCQst+pc86s+GyvRlFe2O8vzFKyMQ5mzzYsLY3zG\n7IhxeQPNHmuq4XGlfYl9qU04pPsIFdEQRrB4lM52UAfBrb7SHdnmoGy4wRYYevf6\nOE2rQ8DXNnc345R1QK9Obog3U+QARuNIWnKiER1uy4VoMe9OqqM0eJr/aTQCv28t\nUIHGMQ2isfa72BDA/hfLDKzuorPAoSduxxONDE84N0JCu+f6a0N6cNXKXk+NV0Bn\nLIsgJMIxORVg9zqpzGhzFC3TFYn8fYuQWqjH0D9pGr86a6c6NL25qLDoNdPPzNyT\nmJoCo1vJB+zxhQotIbKzHBxNqfl+jRbWDhWP53TJyb3EAgnLzYDupTNlQucW2ihE\nCwRKB45qYMp+JfKV/DQHL82z5OpNpJ+KbRuMiE3qPpLGkTYsBY3wzORaNF+b7gAo\n77lLv4X54PbZ1bRK4b/r3pmewledaHhie7FF2Iyi4NSLUjecw9IRqrV0km8AaDGm\nSOLs0H+cLRQUxd9KWE0f1Cd7y5pV+9ABLNnCHIsY2JqjCLm19Ccb2x1zLCVH2Zv0\nQjuwt/KpUqS4qTLl/Q==\n=GpPW\n-----END PGP PUBLIC KEY BLOCK-----\n</code></pre>","contentLength":12034,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=44987380"},{"title":"LabPlot: Free, open source and cross-platform Data Visualization and Analysis","url":"https://labplot.org/","date":1755853886,"author":"turrini","guid":210,"unread":true,"content":"<p>In many cases, importing data into LabPlot for further analysis and visualization is the first step in the application: LabPlot supports many different formats (CSV, Origin, SAS, Stata, SPSS, MATLAB, SQL, JSON, binary, OpenDocument Spreadsheets (ods), Excel (xlsx), HDF5, MQTT, Binary Logging Format (BLF), FITS,…</p>","contentLength":315,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=44982409"},{"title":"Top Secret: Automatically filter sensitive information","url":"https://thoughtbot.com/blog/top-secret","date":1755838109,"author":"thunderbong","guid":209,"unread":true,"content":"<div><p>What happens when you’re dealing with free text? Filtering the entire string may\nnot be an option if an external API needs to process the value. Think chatbots or LLMs.</p><p>You could use a regex to filter sensitive information (such as credit card\nnumbers or emails), but that won’t capture everything, since not all sensitive\ninformation can be captured with a regex.</p><p>Fortunately, <a href=\"https://en.wikipedia.org/wiki/Named-entity_recognition\">named-entity recognition</a> (NER) can be used to identify and\nclassify real-world objects, such as a person, or location. Tools like <a href=\"https://github.com/ankane/mitie-ruby\">MITIE\nRuby</a> make interfacing with NER models trivial.</p><p>By using a combination of regex patterns and NER entities, <a href=\"https://github.com/thoughtbot/top_secret\">Top Secret</a>\neffectively filters sensitive information from free text—here are some\nreal-world examples.</p><p>If you want to see <a href=\"https://github.com/thoughtbot/top_secret\">Top Secret</a> in action, you might enjoy this <a href=\"https://www.youtube.com/live/m2UIpTaIZ8o?si=EzEkWHlNQJORVgSG&amp;t=120\">live\nstream</a>. Otherwise, see the examples below.</p><p>It’s not uncommon to send user data to chatbots. Since the data might be\nfree-form, we should be diligent about filtering it using the approach mentioned\nabove.</p><p>However, it’s likely we’ll want to “restore” the filtered values when returning\na response from the chatbot. <a href=\"https://github.com/thoughtbot/top_secret\">Top Secret</a> returns a <a href=\"https://github.com/thoughtbot/top_secret?tab=readme-ov-file#usage\">mapping</a> that would\nallow for this.</p><div><pre><code></code></pre></div><p>The exchange might look something like this.</p><ol><li><p>Caller sends filtered text</p><div><pre><code></code></pre></div></li><li><div><pre><code>\"Hi [PERSON_1]! How is the weather in [LOCATION_1] today?\"\n</code></pre></div></li><li><p>Caller can “restore” from the mapping</p><div><pre><code></code></pre></div></li></ol><h3><a href=\"https://thoughtbot.com/blog/top-secret#filtering-conversation-history\">\n    Filtering conversation history\n  </a></h3><p>When working with <a href=\"https://platform.openai.com/docs/guides/conversation-state\">conversation state</a> you should filter  message\nbefore including it in the request. This ensures no sensitive data slips through\nfrom previous messages. Here’s what that might look like.</p><div><pre><code></code></pre></div><p>Top Secret can also be used as a validation tool to prevent storing sensitive\ninformation in your database.</p><div><pre><code></code></pre></div><p>If the validation is too strict, you can <a href=\"https://github.com/thoughtbot/top_secret#overriding-the-default-filters\">override</a> or <a href=\"https://github.com/thoughtbot/top_secret#disabling-a-default-filter\">disable</a> any of\nthe filters as needed.</p><div><pre><code> class Message &lt; ApplicationRecord\n   private\n   def content_cannot_contain_sensitive_information\n     return if result.mapping.empty?\n     errors.add(:content, \"contains the following sensitive information #{result.mapping.values.to_sentence}\")\n</code></pre></div><p>It’s our responsibility to protect user data. This is more important than ever\ngiven the rise in popularity of chatbots and LLMs. Tools like <a href=\"https://github.com/thoughtbot/top_secret\">Top Secret</a> aim to\nreduce this burden.</p></div><div><p>We've been helping engineering teams deliver exceptional products for over 20 years. Our designers, developers, and product managers work closely with teams to solve your toughest software challenges through collaborative design and development. <a href=\"https://thoughtbot.com/services\" target=\"_self\" rel=\"noopener\">Learn more about us</a>.</p></div>","contentLength":2469,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=44981088"},{"title":"The issue of anti-cheat on Linux (2024)","url":"https://tulach.cc/the-issue-of-anti-cheat-on-linux/","date":1755824973,"author":"todsacerdoti","guid":208,"unread":true,"content":"<p>If you switch to Linux today, you’ll probably be surprised by how many games run out of the box just fine (mostly due to the <a href=\"https://github.com/ValveSoftware/Proton\">Windows compatibility layer Proton</a> built right into Steam),  for basically all competitive multiplayer games that utilize any sort of anti-cheat technology.</p><p>Now I can finally get to the point of the article…  As someone who uses Linux daily, I would love to see these games support it, but I just don’t see that happening any time soon. Many people in the Linux community are frustrated by the fact that these anti-cheat solutions are stopping them from playing their favorite games. It also doesn’t help that some are <a href=\"https://youtu.be/_dOCtaBObg4?si=bxrl7H5Xl6FBafH5\">fear-mongering about kernel-level anti-cheat solutions</a> and <a href=\"https://www.reddit.com/r/riotgames/comments/1cjq63h/vanguard_real_is/\">spreading misinformation</a>.</p><p>In this article, I want to give you a high-level overview of how modern anti-cheat solutions work (which will hopefully be understandable even for non-technical people) and then explain why anti-cheat solutions in their current state just cannot work on Linux, as well as what the alternatives are.</p><p><em>What is a videogame cheat?</em> We could talk for hours about whether all sorts of macros and exploits should be considered cheats, but the main thing that comes to people’s minds when talking about multiplayer games is an external program that somehow manipulates the game or reads information from the game to provide you with an advantage over others. A prime example of this would be a <a href=\"https://en.wikipedia.org/wiki/Cheating_in_online_games#Wallhacking\">wallhack or aimbot</a>.</p><p>There are generally two ways you can go about this:</p><ol><li>() Have a completely separate process that copies memory between itself and the game.</li><li>() Force the game to load a <a href=\"https://learn.microsoft.com/en-us/troubleshoot/windows-client/setup-upgrade-and-drivers/dynamic-link-library\">DLL file</a> (a <a href=\"https://en.wikipedia.org/wiki/Dynamic-link_library\">shared library file</a> containing code) directly into the game, executing custom code from within the game.</li></ol><p>Unless you find some very niche way to load a DLL into the game, in both cases you will need the ability to read (and write) the game’s process memory.</p><p>If you are not a programmer (or <a href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\">you are a JavaScript developer</a>), you most likely don’t really know how memory management works on modern systems. Let’s imagine this situation: two programs are loaded in memory. What is stopping one program from directly accessing the memory of the other program?</p><p><em>Virtual address space in Windows (<a href=\"https://learn.microsoft.com/en-us/windows-hardware/drivers/gettingstarted/virtual-address-spaces\">source</a>).</em></p><p>While in the past it would have been perfectly possible to read (almost) any of the physical memory installed in the computer, nowadays OSes use <a href=\"https://learn.microsoft.com/en-us/windows-hardware/drivers/gettingstarted/virtual-address-spaces\">virtual address spaces</a>. I don’t want to go into the details of how this is handled, but all you need to know is that each program is isolated in its own address space and cannot access other programs’ memory unless it uses functions provided by the operating system itself, like <a href=\"https://learn.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-readprocessmemory\"></a> and <a href=\"https://learn.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-writeprocessmemory\"></a>.</p><p>In order to use those two functions, you will need to open a <a href=\"https://learn.microsoft.com/en-us/windows/win32/sysinfo/handles-and-objects\">handle</a> to the process you want to read or write memory from. This handle will be specific to your process and represent the access rights that you have relative to the object it represents (in this case, the game process). Remember this for later, as it will be important.</p><p>Modern anti-cheat solutions have three main goals:</p><ol><li>Block other processes from accessing the game’s memory whenever possible.</li><li>Detect and ban anyone who tries to get around the blocking mentioned above.</li><li>Once someone is banned, ensure that they cannot simply create a new game account and continue playing (HWID bans).</li></ol><p>This is usually achieved by multiple components working together. Let’s take a look at <a href=\"https://www.easy.ac/en-US\">Easy Anti-Cheat</a> as an example:</p><ul><li>Loader (usually  or )</li><li>Game library ( and “invisible” module)</li><li>Service ()</li><li>Kernel-mode driver ()</li></ul><p>Without a kernel-mode driver, there is no way to  block memory access into the game. With the kernel-mode driver, though, it’s incredibly simple. All that the driver needs to do is <a href=\"https://github.com/Microsoft/Windows-driver-samples/blob/main/general/obcallback/driver/callback.c\">register a callback for handle creation</a>, filter out requests to open such handles to the game process, check the requested permissions, and if they allow memory access, either deny the request or lower the permissions. That way, no usermode process can now read or write the games memory. Same can be applied to module loading and file system access.</p><p><em>Using open-source <a href=\"https://github.com/cheat-engine/cheat-engine\">Cheat Engine</a> to try to read protected game’s memory (all reads fail).</em></p><p>So how can anyone get around it? They also  need to get their code into the kernel, which will open many ways for them to access the game memory.</p><p>Notice how I highlighted “somehow”? That’s because Windows is a closed system where Microsoft has the control to decide <a href=\"https://learn.microsoft.com/en-us/windows-hardware/drivers/install/kernel-mode-code-signing-requirements--windows-vista-and-later-\">who should get access to the kernel</a>. All official kernel components are signed with Microsoft code signing certificates, so it’s trivial to verify their authenticity. All 3rd party drivers need to be signed with an <a href=\"https://learn.microsoft.com/en-us/windows-hardware/drivers/dashboard/code-signing-reqs\">EV code signing certificate</a> (which can only be bought by companies) and then go through the <a href=\"https://learn.microsoft.com/en-us/windows-hardware/drivers/dashboard/hardware-program-register\">Hardware Developer Center</a> certification so they can even be loaded. I am not saying this is perfect; in fact, I will most likely be writing an article about how bad actors are still getting their stuff certified. However, when they do, it usually gets quickly revoked, and it’s so costly and complicated that most don’t even bother trying.</p><p>There is, of course, a way to get around it by using <a href=\"https://github.com/SamuelTulach/nullmap\">all sorts of exploits</a> or by <a href=\"https://github.com/hfiref0x/KDU\">using vulnerable drivers</a> (drivers that expose a programming interface to user-mode processes without any checks in place, which allows them to escalate their privileges and possibly even manipulate kernel components). This is where the second goal defined above comes in. The anti-cheat has to actively scan the system and try to find code that is not associated with any legitimate module (a module that was loaded properly, with all certs in place) and other modifications or patches that would otherwise not be there.</p><p>While most gamers are going to say that those anti-cheats are useless and that they see cheaters left and right, the truth is that they add a huge skill check, so not everyone is able to write a cheat and then not get banned. In fact, if done properly, the cheating problem can be basically eliminated this way (I’ll get to this later).</p><p>Another reason to run in the kernel is HWID (hardware identifier) banning (the 3rd point mentioned above). If a player is banned and creates a new account, playing on the same hardware will result in an immediate ban. Since the anti-cheat has a kernel component, it can directly talk to the hardware and read its serials that way. If it was running only as a user-mode process, it would be trivial to fake the serial reads. I am not personally a big fan of this since, as you can imagine, it can result in all sorts of unintended issues (people buying used hardware), but in reality, it’s not really a problem since those HWID bans usually expire after a few months (the game devs won’t tell you this though 😉).</p><p>If I had to pick a game which handles cheating the best, then as of now in my humble opinion it would be <a href=\"https://playvalorant.com/en-gb/\">Valorant</a> by <a href=\"https://www.riotgames.com/en\">Riot Games</a>. Keep in mind the stuff that you’ve just read and let me explain:</p><ul><li>The anti-cheat is loaded on boot. While scary for some, this allows them to block/detect the previously mentioned vulnerable drivers and exploits. This raises the skill required to write a cheat for the game even higher (usually, people resort to <a href=\"https://tulach.cc/bootkits-and-kernel-patching/\">bootkits</a>).</li><li>The kernel driver then doesn’t do anything apart from logging (locally). When the game is actually started, it goes through those logs and figures out if the game launch should be allowed or not and does all the kernel protection stuff mentioned above.</li><li>More advanced methods to obtain HWID are used, such as reading <a href=\"https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/component-updates/tpm-key-attestation\">TPM EK</a>, which is very hard to spoof properly.</li></ul><p>But that’s not all. If that was all there was to it, other anti-cheats would be just as effective. The anti-cheat team closely works with the game development team as well. How? The anti-cheat introduces <a href=\"https://reversing.info/posts/guardedregions/\">extra protection for certain memory regions of the game</a>. Some <a href=\"https://www.unknowncheats.me/forum/valorant/401729-valorant-1-01-names-decryption.html\">game data are encrypted</a>, and the encryption keys change with every (even small) game update, making it really annoying for cheat developers. On top of all that, the team is very active in the cheating communities to get intel about what they are up to.</p><p>I have played Valorant quite extensively, all the way from Silver to Ascendant, and I have yet to meet a cheater.</p><p>There are two main concerns that people have with those kernel-mode anti-cheats:</p><ol><li>They are in the kernel doing in-depth scans; therefore, they must be vulnerable and a security issue.</li><li>They are so deep in the system (and some start on system boot) that they can spy on us without us noticing.</li></ol><p>Let me ask you a question. How many vulnerable drivers (yes, those that can be abused by bad actors to gain kernel access) do you think the average gamer has on their Windows install? I’ll start with my own system. This is what I can immediately think of:</p><p>If I looked hard enough, I would most likely find more.</p><p>It would be really stupid of me to just point to random crap you could have on your computer and say “you have so much exploitable stuff, don’t even bother with security,” and that’s not what I am trying to say. Or maybe it is, but just a little bit… What I am trying to say is that there are many ways a malicious actor could do bad stuff with your system, but anti-cheat is very unlikely to have anything to do with it. In fact, I personally trust those anti-cheat developers much more than random vendors, since they are going to be very well aware of the possible abuse.</p><p>Overall, the Windows driver ecosystem is a mess, but unfortunately, that is not going to change any time soon.</p><p>As someone who is very well versed in Windows internals, I can tell you one thing, it doesn’t make sense. If you give the program administrative permissions (at least once), it can spy on you in the same way a kernel-mode driver could. There is absolutely no difference and it’s significantly easier to just write a standalone program. There are people who don’t want to play games because of their connection to <a href=\"https://www.tencent.com/\">Tencent</a> (for example), but if it wasn’t for the kernel-mode anti-cheat, they would have no problem with it. Isn’t it a bit hypocritical? If the game company wanted to spy on you, they could have done so from the game process or the <a href=\"https://gamerant.com/stalker-2-drm/\">service they have most likely installed for DRM purposes</a>.</p><p>Oh and just by the way, the vast majority of the data networked by those previously mentioned anti-cheats to their respective servers comes from their usermode component. The only thing that’s sent “by the kernel component” (in quotes since the usermode service requests the data from the driver and then networks it, drivers cannot directly network data) is the HWID mentioned multiple times above and then detections (something that’s out of the ordinary). There is really not some magic data grabbing happening that’s only possible in the kernel.</p><p>Another thing that is sometimes mentioned is that since it’s in the kernel, it would be harder for security researchers to debug and assess the possible spying. While technically true that it’s harder, it’s definitely not impossible or problematic for an experienced person, so trust me, security researchers and  the entire cheating community keep a close eye on it, in the same way they do on the usermode components.</p><p>Congratulations, you have successfully made it. You have read all of the stuff and now we can finally get to the Linux part of this post 🎉.</p><p>As you can probably already tell by the extensive rant above, I don’t have much good news. Linux is an open system. There is no central authority like on Windows that would tell you what you can and what you cannot do in the kernel. This obviously has countless advantages and it’s why so many people (and big corporations) love it, but is also the reason why anti-cheats cannot really function like they do on Windows.</p><p>There is no way for them to block or detect memory access into the game. Anything you could think of would just not work. Kernel module? Just recompile the kernel and change the functions it uses to hide the possible cheat and bypass all checks. Mandatory kernel patch? Same thing. What about usermode detections? Just run the game in a <a href=\"https://wiki.debian.org/FakeRoot\">fakeroot environment</a> while the cheat runs with real root privileges, being hidden from the game completely… Mandatory custom kernel build? Entire Linux system dedicated to the anti-cheat? I mean… that could work, but at that point, you can just install Windows.</p><p>There have been attempts to get anti-cheat to work on Linux. <a href=\"https://www.easy.ac/en-US\">Easy Anti-Cheat</a> is the most prominent one. Developers can <a href=\"https://www.gamingonlinux.com/2021/09/epic-games-announce-full-easy-anti-cheat-for-linux-including-wine-a-proton/\">choose whether they want to allow it to run on Linux or not</a>. Linux gamers look at this and use it as an argument that anti-cheat on Linux does not face any issues, but the truth is that apart from the most basic sanity checks, EAC does absolutely nothing on Linux. It’s just a simple module that facilitates the server connection and data encryption/decryption for the game.</p><p>One of the games that allowed EAC to run under Wine/Proton is <a href=\"https://www.ea.com/games/apex-legends\">Apex Legends</a>. I won’t be putting any links here, but if you search <a href=\"https://github.com/\">GitHub</a> for cheats for this game, you will find many that work on Linux and there is absolutely no anti-cheat bypass required. It just works.</p><p>As mentioned above, if you want to achieve the best results, you need to utilize both the  and  measures. Active being the kernel component on Windows blocking memory access and trying to find possible discrepancies. Passive being the code virtualization, obfuscation, game data encryption as well as proper game networking and server-sided checks.</p><p>An example of how  to utilize kernel-mode anti-cheat would be <a href=\"https://www.fallguys.com/en-US\">Fall Guys</a> (yes, that’s the game that one friend made you buy just so you could play it for 30 minutes and then never open again). This game is very specific. There would be no gain in having some sort of wallhack, there would be no gain in having any sort of aimbot (you don’t aim at stuff). All that people did was speedhacking and modifying the game in a way that allowed them to jump higher and generally change their movement. This game is a prime example of why you should write your network code properly. If the game had proper networking and server checks in place (tick-based system, actions performed on both the client and server, if there is a mismatch, the server is the authority and resets the player - that’s how <a href=\"https://en.wikipedia.org/wiki/Counter-Strike:_Global_Offensive\">CS:GO</a> did it, and that’s why people were not flying over the map in that game or speedhacking, it had other issues though), there would be no need for anti-cheat. Not even a usermode one. Instead, they fixed absolutely nothing from their side and slapped <a href=\"https://www.easy.ac/en-US\">Easy Anti-Cheat</a> on top of their game.</p><p>While it’s not really possible to do any of the previously mentioned active measures, there is nothing stopping you from utilizing the passive ones. So, if you are a game developer and want to limit cheating in your game on Linux:</p><ul><li>Write proper networking code, verify data sent by the client so your game server does not blindly accept mach 8 as a walking speed.</li><li>Use code obfuscation and virtualization as much as possible (be aware of the performance penalty, be smart about what parts of the code you protect), try to change it a bit with every update (commercial bin2bin obfuscators like <a href=\"https://vmpsoft.com/\">VMProtect</a> or <a href=\"https://www.oreans.com/Themida.php\">Themida</a> will produce different results on each run).</li><li>If you have control over the game engine itself, try to keep sensitive information on the stack as much as possible.</li></ul>","contentLength":15291,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=44980064"},{"title":"Shader Academy: Learn computer graphics by solving challenges","url":"https://shaderacademy.com/","date":1755688095,"author":"pykello","guid":207,"unread":true,"content":"<!DOCTYPE html>","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=44960750"},{"title":"From M1 MacBook to Arch Linux: A month-long experiment that became permanenent","url":"https://www.ssp.sh/blog/macbook-to-arch-linux-omarchy/","date":1755635106,"author":"articsputnik","guid":206,"unread":true,"content":"<p>I switched my five-year-old MacBook Pro M1 Max for a cheap (comparable) Lenovo ThinkBook 14 G7 ARP (AMD) laptop, running Linux (Arch btw, or better, <a href=\"https://omarchy.org/\" target=\"_blank\" rel=\"noopener noreffer\">Omarchy</a>. And I am having a blast. But not everything is perfect. But let’s not get ahead of ourselves.</p><p>This is a short recap after using it for one month on and off (due to repair 😅), and the last 2 weeks full time. I want to share what I learned, what I like about the new setup after working for 15 years plus on a MacBook, and on and off on Windows at work. And maybe what is still a little rough.</p><h2>Getting Ready for the Switch</h2><p>Before I could make the switch, I had some pre-requirements I needed to be able to use it as my full-time machine. Here are some:</p><ul><li> ✅ fuzzy finder in raycast to open up my favorite files or folder, e.g. if I need to open my Offers template folder</li><li>️✔️ screenshot like Snagit</li><li> ✅ daylight adjustment like <a href=\"https://justgetflux.com/\" target=\"_blank\" rel=\"noopener noreffer\">f.lux</a></li><li> ✅  next calendar events in top bar</li><li>❌ one time backup to store files and OS, or only files?</li></ul><p>And most important, instant workspace navigation. The reason why I was upset with Apple: with the latest update, <a href=\"https://github.com/koekeishiya/yabai\" target=\"_blank\" rel=\"noopener noreffer\">Yabai</a> didn’t work flawlessly anymore, and also all the updates and constant asking if I want to do this or that got in my way.</p><p>During that process, I noticed that many things I was having, like <a href=\"https://setapp.com/\" target=\"_blank\" rel=\"noopener noreffer\">Setapp Apps</a> with all the apps like Bartender, VPN, and other apps are nice and useful, but not needed. Or mostly there is a similar, or sometimes even better, alternative out there.</p><p>While I’m super happy with the switch, here are some direct comparison from apps and workflow from macOS to Linux.</p><p>\nSnagit, my beloved screenshot-taking tool. I haven’t found a similar replacement yet that can cut out in-between the image or store all the captured images in a library. Even OCR search worked out of the box in Snagit, across all my images I took over the years.</p><p>You’d say, but who needs this? Yeah, kind of, but it’s super handy, especially if you are a blog writer and explain stuff visually—the speed and quick image manipulation is not yet there.</p><p>. One thing I noticed lately is that sometimes a shortcut breaks, or something is not working anymore. This is also because Omarchy is just brand new, and I’m inexperienced running Linux as my main OS. But for the last 5 years with the M1, hardware-wise, things just worked. I had to replace my full mainboard as the <a href=\"https://bsky.app/profile/ssp.sh/post/3lug5oijnjc22\" target=\"_blank\" rel=\"noopener noreffer\">GPU was broken</a> within the first two weeks, so that might be bad luck. But the quality of MacBooks is just another level. I had 3 or 4 so far since 2010, and each of them held at least 5 years. Crazy good.</p><p>. It’s not the same game anymore. The fan is also mostly running. But that’s one downside I’m willing to accept for a more joyful experience. Also, if I don’t like something on my OS, I just change it. Or if I want to improve a certain way of working, a quick script, a new package, and I’m just flying.</p><p>. TimeMachine on macOS was great. Gave me peace of mind that if I lose something, I can always recover. I never had to go back file-based, as I have them stored on Sync.com (now with Linux switched to Filen.io), and notes in Obsidian. But when I broke something, or I had to switch MacBooks, one backup, and every little setting was the same. But that’s something I tackle next, so I have peace of mind if I misconfigure something, like yesterday, when I changed the  and I couldn’t log in as sudo anymore 😅 (yeah, don’t ask!). I could fix it again, though. But stuff like this makes me scared that I can run a wrong command and ruin my perfect setup. I need a backup!</p><p>. As mentioned, I had to switch from Sync to Filen, as Sync didn’t run on Linux. But Filen is great, and I’m super happy with it. I also switched from Lastpass to 1Password, took this as a change. I was also thinking about NextCloud on my home server, but I couldn’t switch everything in one go.</p><p>. An important one was keyboard shortcuts. I have advanced shortcuts and many different custom keyboards. First I use <a href=\"https://karabiner-elements.pqrs.org/\" target=\"_blank\" rel=\"noopener noreffer\">Karabiner-Elements</a> for the vim navigations with , which will then return arrow keys. This way I can use vim navigations in each app, as arrow keys are supported everywhere. For this I used <a href=\"https://github.com/jtroo/kanata/\" target=\"_blank\" rel=\"noopener noreffer\">Kanata</a> on Linux. And use <a href=\"https://github.com/kragen/xcompose/\" target=\"_blank\" rel=\"noopener noreffer\">XCompose</a> for simple Umlaut or replacements like  when I write.</p><p>,  and . I used Raycast for all of these. On Windows <a href=\"https://ditto-cp.sourceforge.io/\" target=\"_blank\" rel=\"noopener noreffer\">Ditto</a> was great for clipboard only. But with <a href=\"https://github.com/abenz1267/walker/\" target=\"_blank\" rel=\"noopener noreffer\">Walker</a> (Launcher), that has built-in file search called , and an additional tool called Clipse, I have the same features I needed. Plus more than I ever would have dreamed, because Walker is so customizable that you can add a quick script for everything.</p><p>WebApps as native apps. Shortcuts for everything. E.g. using Signal, WhatsApp or Figma. Want to change monitor setup from home to office? A shortcut. Want to switch from my mechanical keyboard to the laptop keyboard with different shortcuts? A shortcut. Quickly install a new app? A shortcut. And so on. I never thought that an OS can be customizable to my liking.</p><a target=\"_blank\" href=\"https://www.ssp.sh/blog/macbook-to-arch-linux-omarchy/arch-btw.jpeg\" title=\"/blog/macbook-to-arch-linux-omarchy/arch-btw.jpeg\"><img loading=\"lazy\" decoding=\"async\" sizes=\"(min-width: 35em) 800px, 100vw\" srcset=\"/blog/macbook-to-arch-linux-omarchy/arch-btw_hu_7a689079f1933447.jpeg 500w\n, /blog/macbook-to-arch-linux-omarchy/arch-btw_hu_f7699f21b0809d13.jpeg 800w, /blog/macbook-to-arch-linux-omarchy/arch-btw_hu_fea89af25fc63e6d.jpeg 1200w\" src=\"https://www.ssp.sh/blog/macbook-to-arch-linux-omarchy/arch-btw.jpeg\" alt=\"/blog/macbook-to-arch-linux-omarchy/arch-btw.jpeg\" title=\"/blog/macbook-to-arch-linux-omarchy/arch-btw.jpeg\"></a><p>Even themes you can change across OS, vim, terminal, and background with one shortcut. The sky is the limit, literally.</p><h2>Omarchy: An Opinionated Arch Linux “Distro”</h2><p>Luckily, I didn’t have to set up all myself. In fact, Omarchy, a soon-to-be distro that runs Arch Linux, does most of it out of the box. And it’s keyboard shortcut-oriented, and worked really similar to <a href=\"https://www.youtube.com/watch?v=sStKFOwNaSM\" target=\"_blank\" rel=\"noopener noreffer\">my macOS workflow</a> already. So after I installed, changed a couple of hotkeys, I was almost at the same speed and utility as on my old MacBook, but without the frustrations. Or I should say, other frustrations :)</p><p>But huge shoutout to <a href=\"https://x.com/dhh\" target=\"_blank\" rel=\"noopener noreffer\">DHH</a> for creating this gem, and making Arch Linux approachable for many developers coming from macOS. After I checked all the scripts and what the community added over time, I saw that so many things were just solved. Screens, function or media keys, cameras, fingerprint reader, printer, and so on, all just worked, almost like on a MacBook.</p><h2>How It Began: Taking the Leap</h2><p>This was the time working out in the wild with Arch Linux, without bringing my Macbook.<a target=\"_blank\" href=\"https://www.ssp.sh/blog/macbook-to-arch-linux-omarchy/omarchy-coffee.webp\" title=\"/blog/macbook-to-arch-linux-omarchy/omarchy-coffee.webp\"><img loading=\"lazy\" decoding=\"async\" sizes=\"(min-width: 35em) 800px, 100vw\" srcset=\"/blog/macbook-to-arch-linux-omarchy/omarchy-coffee_hu_f960c58cb1383b24.webp 500w\n, /blog/macbook-to-arch-linux-omarchy/omarchy-coffee_hu_cfe39224e4e05d80.webp 800w, /blog/macbook-to-arch-linux-omarchy/omarchy-coffee_hu_b5b9ef52d58b7d08.webp 1200w\" src=\"https://www.ssp.sh/blog/macbook-to-arch-linux-omarchy/omarchy-coffee.webp\" alt=\"/blog/macbook-to-arch-linux-omarchy/omarchy-coffee.webp\" title=\"/blog/macbook-to-arch-linux-omarchy/omarchy-coffee.webp\"></a>\nWriting in a coffeeshop with Arch Linux (Omarchy).</p><p>Some comments from the first days: It’s a blast to work with Hyprland, so fast and smooth. Battery level obviously much less, return of the fan noise when running Electron apps 🙂.</p><p>What works: Advanced Karabiner keyboard setup, sync files (had to switch to Filen), Obsidian, and my dotfiles with <a href=\"https://ssp.sh/brain/tmux/\">tmux</a>, <a href=\"https://ssp.sh/brain/neovim/\">Neovim</a> and all the good jam.</p><p>Still to do: Clipboard manager, better Snagit replacement, Raycast search in files/emojis and backup.</p><p>I’m surprised with what all worked out of the box, like hibernating, external monitors/keyboards, media keys. Not sure how much is thanks to DHH’s Omarchy, and what’s native Arch Linux support, but it’s amazing.</p><p>I’m working on my <a href=\"http://dotfiles.ssp.sh\" target=\"_blank\" rel=\"noopener noreffer\">dotfiles</a> to port them to Linux on . Lots to configure, but the tools to choose from are endless, and just free and open source. Great world. Thanks to all the people who maintain and create these amazing products.</p><p>Great experience over the Macbook so far:</p><ul><li>The  with <a href=\"https://hypr.land/\" target=\"_blank\" rel=\"noopener noreffer\">Hyprland</a><ul><li>Navigation is flawless, even from local to external screen, I just normally navigate, e.g. just hit  If I’m on the app on my laptop, jumping to the next app on the left, if that is the external screen, it will jump there. On Yabai, external monitors had to have a special keymap.</li></ul></li><li>Full screen has  at the top or empty bar like Mac. Normal fullscreen uses all the way and does not open on a random workspace at the end of existing workspaces</li></ul><p>What doesn’t work as well yet, or things I missed in my workflow:</p><ul><li> overlay which is sometimes handy for Obsidian or any other apps to fix grammar. On Linux I need to copy and paste back and forth again. But on the other hand, it does not secretly send each text to the cloud :)</li><li>Microsoft /Office that I need for one client has no native app, but the web app works flawlessly.</li><li>: just sleep and next day come back, everything as it was. Need to shut down to not overheat. (Has been solved in the meantime, but still not the same as MacBook)</li><li>No  for MCP. Although I used Claude Code most of the time. (I have replaced with a webapp, is almost the same feel, but no MCP I believe. But Claude Code has it now too, and Neovim too :)</li><li>I could buy cheaper hardware. The downside, the  are coming up quickly, something I am not used to anymore :) I still use a lot of Electron apps (browser, Claude in browser, Obsidian) and other heavy apps such as Google Meet in browser, YouTube.</li></ul><p>I recorded my macOS workflow () as of now to document it before I potentially switch to Arch Linux with Omarchy. Let’s see 😉</p><p>However, I also showcase that most of my setup on macOS is very similar to the shortcut-driven Linux setup shown in Omarchy - workflow  (now):</p><h3>Life with Arch Linux (Omarchy)</h3><p>Today I’m almost up with the same tools as before, there are still some to be changed, but that’s expected after 15 years on the same OS. This write-up is the start of showing that. I will soon create another video on Omarchy, and add to this post too.</p><p>Before I went full in, I quickly tested it on an old (10-20 years) laptop and installed an early version of Omarchy. It is a beauty. Before, Windows was unusable and with Arch in the back, it runs almost like a brand-new laptop. Obviously when you start heavy apps, you will notice too, but the navigation and simple tasks are instant; you don’t feel that you are on an old machine.<a target=\"_blank\" href=\"https://www.ssp.sh/blog/macbook-to-arch-linux-omarchy/omarchy-old-dell.webp\" title=\"/blog/macbook-to-arch-linux-omarchy/omarchy-old-dell.webp\"><img loading=\"lazy\" decoding=\"async\" sizes=\"(min-width: 35em) 800px, 100vw\" srcset=\"/blog/macbook-to-arch-linux-omarchy/omarchy-old-dell_hu_6e0e4618d0353921.webp 500w\n, /blog/macbook-to-arch-linux-omarchy/omarchy-old-dell_hu_d6fabab8a036c688.webp 800w, /blog/macbook-to-arch-linux-omarchy/omarchy-old-dell_hu_ac4c47f5cebd0e2a.webp 1200w\" src=\"https://www.ssp.sh/blog/macbook-to-arch-linux-omarchy/omarchy-old-dell.webp\" alt=\"/blog/macbook-to-arch-linux-omarchy/omarchy-old-dell.webp\" title=\"/blog/macbook-to-arch-linux-omarchy/omarchy-old-dell.webp\"></a>\nInstalled on an old laptop. Amazed how blazingly fast it is. And beautuful. I can finally say it, Arch BTW  <a href=\"https://x.com/sspaeti/status/1942502383923134464\" target=\"_blank\" rel=\"noopener noreffer\">Twitter</a></p><p>Obviously, I needed new hardware. First I was romanticizing with the <a href=\"https://www.bee-link.com/\" target=\"_blank\" rel=\"noopener noreffer\">Beelink</a> fanless desktops, super fast and affordable. But as I do my best writing on the go in coffee shops, libraries or on the couch, I needed a laptop.</p><p>DHH has a great list that I included in <a href=\"https://ssp.sh/brain/notebook-desktops-for-linux/\">Notebook &amp; Desktops for Linux</a>. And as <a href=\"https://frame.work/\" target=\"_blank\" rel=\"noopener noreffer\">Framework Laptops</a> are not available in Switzerland, I went with an affordable Lenovo ThinkBook. 32 GB and good-looking device with a great keyboard. I didn’t know how good a laptop keyboard can be with some travel; almost can’t write on the MacBook keyboard anymore, even though I didn’t get the bad scissor one.</p><p>But the CPU is not the fastest, and I didn’t do heavy loads yet. And I can already sense if I run a couple of Electron apps that the CPU can go quite high. Like Obsidian, browser and Spotify, these are already three. And if I open webapps as separate windows, these are essentially more tabs or Electron apps.</p><p>But yeah, I got to have a matte screen that also works nice outside, and after all, the screen is not the most important thing to me. Also the speaker and trackpad and everything else on the MacBook was just superior, but it doesn’t bother me as much yet. Only the battery life is a big shift back, and the constant fan. Obviously, if I stay for it longer, I might also buy a beefier laptop, I actually didn’t know if I will stay or not. So far, everything is pointing to that I will stay on Linux for the time being. Also nice to see the constant <a href=\"https://github.com/basecamp/omarchy/releases/\" target=\"_blank\" rel=\"noopener noreffer\">new updates</a> that Omarchy is producing. A breath of fresh air to be honest.</p><h2>I Learned Sooooo much (and Had Fun)</h2><p>The great thing, although I spent quite some time, I learned so much. It’s so fun. As a lover of a good <a href=\"https://ssp.sh/brain/tuis/\">TUI</a>, I really enjoyed every bit of it.</p><p>It’s also fun to set up your OS in a way that makes you more productive, or gives you joy just by the looks of it. Aesthetics and quick transitions between each keypress or transition are amazing.</p><p>It’s only 2-3 weeks in total that I run it full time. So there’s many things I want to improve and I will over time. But I’m amazed how much is already working, and that it’s such a blast to use.</p><p>I’ll update you on the journey for sure. If you don’t want to miss it it, <a href=\"https://subscribe.ssp.sh\" target=\"_blank\" rel=\"noopener noreffer\">subscribe</a> to my newsletter. I write a lot about tech, productivity, Obsidian, Markdown, Neovim and data engineering. Or follow me on <a href=\"https://gh.ssp.sh\" target=\"_blank\" rel=\"noopener noreffer\">GitHub</a> or check out my <a href=\"https://dotfiles.ssp.sh\" target=\"_blank\" rel=\"noopener noreffer\">dotfiles.ssp.sh</a>.</p>","contentLength":11884,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=44955923"},{"title":"I run a full Linux desktop in Docker just because I can","url":"https://www.howtogeek.com/i-run-a-full-linux-desktop-in-docker-just-because-i-can/","date":1755603587,"author":"redbell","guid":205,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=44950482"}],"tags":["dev","hn"]}