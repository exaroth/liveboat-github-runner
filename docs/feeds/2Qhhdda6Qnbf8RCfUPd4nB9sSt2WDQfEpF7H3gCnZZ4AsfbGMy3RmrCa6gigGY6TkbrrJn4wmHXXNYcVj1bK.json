{"id":"2Qhhdda6Qnbf8RCfUPd4nB9sSt2WDQfEpF7H3gCnZZ4AsfbGMy3RmrCa6gigGY6TkbrrJn4wmHXXNYcVj1bK","title":"top scoring links : rust","displayTitle":"Reddit - Rust","url":"https://www.reddit.com/r/rust/top/.rss?sort=top&t=day&limit=6","feedLink":"https://www.reddit.com/r/rust/top/?sort=top&t=day&limit=6","is_query":false,"items":[{"title":"Introducing rust_arkitect: architectural rule validation for Rust projects","url":"https://www.reddit.com/r/rust/comments/1hpmvur/introducing_rust_arkitect_architectural_rule/","date":1735564167,"author":"/u/Ap3ir0n91","unread":true,"content":"<!-- SC_OFF --><div class=\"md\"><p>Hi Rustaceans! ðŸ¦€</p> <p>I&#39;m happy to share <a href=\"https://crates.io/crates/rust_arkitect\">rust_arkitect</a>, a lightweight library for defining and validating architectural rules in Rust projects.</p> <p>I started this project as a way to get my hands dirty with Rust and build something concrete. The idea comes from a similar tool I previously developed in PHP, which brought value by enforcing architectural integrity in large-scale projects. I wanted to see if I could replicate that thing in Rust.</p> <p>Here&#39;s an example:</p> <pre><code>let project = Project::from_relative_path(file!(), &quot;./../src&quot;); let rules = ArchitecturalRules::define() .component(&quot;Application&quot;) .located_at(&quot;crate::application&quot;) .may_depend_on(&amp;[&quot;Domain&quot;]) .component(&quot;Domain&quot;) .located_at(&quot;crate::domain&quot;) .allow_external_dependencies(&amp;[&quot;serde&quot;]) .must_not_depend_on_anything() .finalize(); let result = Arkitect::ensure_that(project).complies_with(rules); assert!(result.is_ok()); </code></pre> <p>Iâ€™d love to hear from anyone who tries it out in a real project. You can find the project here: <a href=\"https://github.com/pfazzi/rust_arkitect\">GitHub</a>.</p> <p>If you have ideas, run into issues, or just want to share how youâ€™re using it, feel free to reach out or open an issue. Thank you in advance! ðŸ˜Š</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Ap3ir0n91\"> /u/Ap3ir0n91 </a> <br/> <span><a href=\"https://www.reddit.com/r/rust/comments/1hpmvur/introducing_rust_arkitect_architectural_rule/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/rust/comments/1hpmvur/introducing_rust_arkitect_architectural_rule/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Reliable software: An interview with Jon Gjengset on writing high quality code","url":"https://www.reddit.com/r/rust/comments/1hpk70n/reliable_software_an_interview_with_jon_gjengset/","date":1735553509,"author":"/u/timClicks","unread":true,"content":"<!-- SC_OFF --><div class=\"md\"><p>The feedback from this interview has been excellent so far. I hope that reddit enjoys it!</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/timClicks\"> /u/timClicks </a> <br/> <span><a href=\"https://timclicks.dev/podcast/reliable-software-an-interview-with-jon-gjengset\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/rust/comments/1hpk70n/reliable_software_an_interview_with_jon_gjengset/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Optimising my Rust solutions for Advent of Code","url":"https://www.reddit.com/r/rust/comments/1hp68dc/optimising_my_rust_solutions_for_advent_of_code/","date":1735507391,"author":"/u/hgwxx7_","unread":true,"content":"&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/hgwxx7_\"> /u/hgwxx7_ </a> <br/> <span><a href=\"https://nindalf.com/posts/optimising-rust/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/rust/comments/1hp68dc/optimising_my_rust_solutions_for_advent_of_code/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"A distributed rate limiter for Tokio/Tower","url":"https://www.reddit.com/r/rust/comments/1hp5bxv/a_distributed_rate_limiter_for_tokiotower/","date":1735505028,"author":"/u/doniec","unread":true,"content":"&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/doniec\"> /u/doniec </a> <br/> <span><a href=\"https://github.com/miedzinski/tower-ratelimit\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/rust/comments/1hp5bxv/a_distributed_rate_limiter_for_tokiotower/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Visualizing memory layout of Rust's data types","url":"https://www.reddit.com/r/rust/comments/1hp3xjm/visualizing_memory_layout_of_rusts_data_types/","date":1735501283,"author":"/u/EventHelixCom","unread":true,"content":"&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/EventHelixCom\"> /u/EventHelixCom </a> <br/> <span><a href=\"https://youtu.be/7_o-YRxf_cc?si=6__TBBF1wcln_JOJ\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/rust/comments/1hp3xjm/visualizing_memory_layout_of_rusts_data_types/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Television 0.8.0","url":"https://www.reddit.com/r/rust/comments/1hp2e6j/television_080/","date":1735497220,"author":"/u/damien__f1","unread":true,"content":"<!-- SC_OFF --><div class=\"md\"><p><a href=\"https://preview.redd.it/aq13co25zt9e1.png?width=1920&amp;format=png&amp;auto=webp&amp;s=6939339fae11dca5f32275f4fe380fc18c1d75b7\">Television running on the linux codebase with the `files` channel</a></p> <blockquote> <p>Television is a fast and versatile fuzzy finder TUI.</p> <p>It lets you quickly search through any kind of data source (files, git repositories, environment variables, docker images, you name it) using a fuzzy matching algorithm and is designed to be easily extensible.</p> </blockquote> <p><a href=\"https://github.com/alexpasmantier/television/releases/tag/0.8.0\">https://github.com/alexpasmantier/television/releases/tag/0.8.0</a></p> <p>tl;dr:</p> <ul> <li><a href=\"https://github.com/alexpasmantier/television/wiki/Shell-Autocomletion\">shell integration for zsh</a></li> <li>simplified UI with opt-in additional components</li> <li>cable channels may now benefit from builtin previewers</li> <li>more straight to the point general documentation</li> </ul> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/damien__f1\"> /u/damien__f1 </a> <br/> <span><a href=\"https://www.reddit.com/r/rust/comments/1hp2e6j/television_080/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/rust/comments/1hp2e6j/television_080/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""}]}