{"id":"6gUbcJtcgqw1wQBapm8qwcP58MMnPvoDmUVDva7XtKUuLQTDpuyDxDo1yehnZDohDQ6a5p","title":"Slashdot: Developers","displayTitle":"Dev - Slashdot - Dev","url":"http://rss.slashdot.org/Slashdot/slashdotDevelopers","feedLink":"https://developers.slashdot.org/","isQuery":false,"isEmpty":false,"isHidden":false,"itemCount":15,"items":[{"title":"Node.js 'Type Stripping' for TypeScript Now Enabled by Default","url":"https://developers.slashdot.org/story/25/01/19/0335202/nodejs-type-stripping-for-typescript-now-enabled-by-default?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1737304440,"author":"EditorDavid","guid":229,"unread":true,"content":"The JavaScript runtime Node.js can execute TypeScript (Microsoft's JavaScript-derived language with static typing). \nBut now it can do it even better, explains Marco Ippolito of the Node.js steering committee:\n\nIn August 2024 Node.js introduced a new experimental feature, Type Stripping, aimed at addressing a longstanding challenge in the Node.js ecosystem: running TypeScript with no configuration. Enabled by default in Node.js v23.6.0, this feature is on its way to becoming stable. \n\n\nTypeScript has reached incredible levels of popularity and has been the most requested feature in all the latest Node.js surveys. Unlike other alternatives such as CoffeeScript or Flow, which never gained similar traction, TypeScript has become a cornerstone of modern development. While it has been supported in Node.js for some time through loaders, they relied heavily on configuration and user libraries. This reliance led to inconsistencies between different loaders, making them difficult to use interchangeably. The developer experience suffered due to these inconsistencies and the extra setup required... The goal is to make development faster and simpler, eliminating the overhead of configuration while maintaining the flexibility that developers expect... \n\nTypeScript is not just a language, it also relies on a toolchain to implement its features. The primary tool for this purpose is tsc, the TypeScript compiler CLI... Type checking is tightly coupled to the implementation of tsc, as there is no formal specification for how the language's type system should behave. This lack of a specification means that the behavior of tsc is effectively the definition of TypeScript's type system. tsc does not follow semantic versioning, so even minor updates can introduce changes to type checking that may break existing code. Transpilation, on the other hand, is a more stable process. It involves converting TypeScript code into JavaScript by removing types, transforming certain syntax constructs, and optionally \"downleveling\" the JavaScript to allow modern syntax to execute on older JavaScript engines. Unlike type checking, transpilation is less likely to change in breaking ways across versions of tsc. The likelihood of breaking changes is further reduced when we only consider the minimum transpilation needed to make the TypeScript code executable — and exclude downleveling of new JavaScript features not yet available in the JavaScript engine but available in TypeScript... \n\nNode.js, before enabling it by default, introduced --experimental-strip-types. This mode allows running TypeScript files by simply stripping inline types without performing type checking or any other code transformation. This minimal technique is known as Type Stripping. By excluding type checking and traditional transpilation, the more unstable aspects of TypeScript, Node.js reduces the risk of instability and mostly sidesteps the need to track minor TypeScript updates. Moreover, this solution does not require any configuration in order to execute code... Node.js eliminates the need for source maps by replacing the removed syntax with blank spaces, ensuring that the original locations of the code and structure remain intact. It is transparent — the code that runs is the code the author wrote, minus the types... \n\n\"As this experimental feature evolves, the Node.js team will continue collaborating with the TypeScript team and the community to refine its behavior and reduce friction. You can check the roadmap for practical next steps...\"","contentLength":3543,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Google Reports Halving Code Migration Time With AI Help","url":"https://developers.slashdot.org/story/25/01/17/2156235/google-reports-halving-code-migration-time-with-ai-help?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1737158520,"author":"BeauHD","guid":256,"unread":true,"content":"Google computer scientists have been using LLMs to streamline internal code migrations, achieving significant time savings of up to 89% in some cases. The findings appear in a pre-print paper titled \"How is Google using AI for internal code migrations?\" The Register reports: Their focus is on bespoke AI tools developed for specific product areas, such as Ads, Search, Workspace and YouTube, instead of generic AI tools that provide broadly applicable services like code completion, code review, and question answering. Google's code migrations involved: changing 32-bit IDs in the 500-plus-million-line codebase for Google Ads to 64-bit IDs; converting its old JUnit3 testing library to JUnit4; and replacing the Joda time library with Java's standard java.time package. The int32 to int64 migration, the Googlers explain, was not trivial as the IDs were often generically defined (int32_t in C++ or Integer in Java) and were not easily searchable. They existed in tens of thousands of code locations across thousands of files. Changes had to be tracked across multiple teams and changes to class interfaces had to be considered across multiple files. \"The full effort, if done manually, was expected to require hundreds of software engineering years and complex crossteam coordination,\" the authors explain.\n \nFor their LLM-based workflow, Google's software engineers implemented the following process. An engineer from Ads would identify an ID in need of migration using a combination of code search, Kythe, and custom scripts. Then an LLM-based migration toolkit, triggered by someone knowledgeable in the art, was run to generate verified changes containing code that passed unit tests. Those changes would be manually checked by the same engineer and potentially corrected. Thereafter, the code changes would be sent to multiple reviewers who are responsible for the portion of the codebase affected by the changes. The result was that 80 percent of the code modifications in the change lists (CLs) were purely the product of AI; the remainder were either human-authored or human-edited AI suggestions.\n \n\"We discovered that in most cases, the human needed to revert at least some changes the model made that were either incorrect or not necessary,\" the authors observe. \"Given the complexity and sensitive nature of the modified code, effort has to be spent in carefully rolling out each change to users.\" Based on this, Google undertook further work on LLM-driven verification to reduce the need for detailed review. Even with the need to double-check the LLM's work, the authors estimate that the time required to complete the migration was reduced by 50 percent. With LLM assistance, it took just three months to migrate 5,359 files and modify 149,000 lines of code to complete the JUnit3-JUnit4 transition. Approximately 87 percent of the code generated by AI ended up being committed with no changes. As for the Joda-Java time framework switch, the authors estimate a time saving of 89 percent compared to the projected manual change time, though no specifics were provided to support that assertion.","contentLength":3113,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"AI Slashes Google's Code Migration Time By Half","url":"https://tech.slashdot.org/story/25/01/16/1810253/ai-slashes-googles-code-migration-time-by-half?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1737053460,"author":"msmash","guid":255,"unread":true,"content":"Google has cut code migration time in half by deploying AI tools to assist with large-scale software updates, according to a new research paper from the company's engineers. The tech giant used large language models to help convert 32-bit IDs to 64-bit across its 500-million-line codebase, upgrade testing libraries, and replace time-handling frameworks. While 80% of code changes were AI-generated, human engineers still needed to verify and sometimes correct the AI's output. In one project, the system helped migrate 5,359 files and modify 149,000 lines of code in three months.","contentLength":582,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Replit CEO on AI Breakthroughs: 'We Don't Care About Professional Coders Anymore'","url":"https://developers.slashdot.org/story/25/01/16/1441258/replit-ceo-on-ai-breakthroughs-we-dont-care-about-professional-coders-anymore?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1737038520,"author":"msmash","guid":254,"unread":true,"content":"Replit, an AI coding startup platform, has made a dramatic pivot away from professional programmers in a fundamental shift in how software may be created in the future. \"We don't care about professional coders anymore,\" CEO Amjad Masad told Semafor, as the company refocuses on helping non-developers build software using AI. \n\nThe strategic shift follows the September launch of Replit's \"Agent\" tool, which can create working applications from simple text commands. The tool, powered by Anthropic's Claude 3.5 Sonnet AI model, has driven a five-fold revenue increase in six months. The move marks a significant departure for Replit, which built its business providing online coding tools for software developers. The company is now betting that AI will make traditional programming skills less crucial, allowing non-technical users to create software through natural language instructions.","contentLength":891,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"EU Probes Apple's New App Store Fees","url":"https://apple.slashdot.org/story/25/01/13/1830218/eu-probes-apples-new-app-store-fees?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1736794140,"author":"msmash","guid":253,"unread":true,"content":"European Union regulators are investigating Apple's revised app store fees amid concerns they may increase costs for developers, according to Bloomberg News. \n\nThe European Commission sent questionnaires to developers in December focusing on Apple's new \"core technology fee\" of $0.51 per app installation, part of its compliance with EU's Digital Markets Act. Under Apple's revised structure, developers can maintain existing terms with commissions up to 30% on app sales, or choose a new model with lower commission rates but additional charges.","contentLength":547,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Oracle Won't Withdraw 'JavaScript' Trademark, Says Deno. Legal Skirmish Continues","url":"https://developers.slashdot.org/story/25/01/13/0323229/oracle-wont-withdraw-javascript-trademark-says-deno-legal-skirmish-continues?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1736757240,"author":"EditorDavid","guid":252,"unread":true,"content":"\"Oracle has informed us they won't voluntarily withdraw their trademark on 'JavaScript'.\" That's the word coming from the company behind Deno, the alternative JavaScript/TypeScript/WebAssembly runtime, which is pursuing a formal cancellation with the U.S. Patent and Trademark Office. \n\nSo what happens next? Oracle \"will file their Answer, and we'll start discovery to show how 'JavaScript' is widely recognized as a generic term and not controlled by Oracle.\" Deno's social media posts show a schedule of various court dates that extend through July of 2026, so \"The dispute between Oracle and Deno Land could go on for quite a while,\" reports InfoWorld:\nDeno Land co-founder Ryan Dahl, creator of both the Deno and Node.js runtimes, said a formal answer from Oracle is expected before February 3, unless Oracle extends the deadline again. \"After that, we will begin the process of discovery, which is where the real legal work begins. It will be interesting to see how Oracle argues against our claims — genericide, fraud on the USPTO, and non-use of the mark.\" \n\nThe legal process begins with a discovery conference by March 5, with discovery closing by September 1, followed by pretrial disclosure from October 16 to December 15. An optional request for an oral hearing is due by July 8, 2026. \n\nOracle took ownership of JavaScript's trademark in 2009 when it purchased Sun Microsystems, InfoWorld notes. \n\nBut \"Oracle does not control (and has never controlled) any aspect of the specification or how the phrase 'JavaScript' can be used by others,\" argues an official petition filed by Deno Land Inc. with the United States Patent and Trademark Office:\nToday, millions of companies, universities, academics, and programmers, including Petitioner, use \"JavaScript\" daily without any involvement with Oracle. The phrase \"JavaScript\" does not belong to one corporation. It belongs to the public. JavaScript is the generic name for one of the bedrock languages of modern programming, and, therefore, the Registered Mark must be canceled. \n\nAn open letter to Oracle discussing the genericness of the phrase \"JavaScript,\" published at https://javascript.tm/, was signed by 14,000+ individuals at the time of this Petition to Cancel, including notable figures such as Brendan Eich, the creator of JavaScript, and the current editors of the JavaScript specification, Michael Ficarra and Shu-yu Guo. There is broad industry and public consensus that the term \"JavaScript\" is generic. \n\nThe seven-page petition goes into great detail, reports InfoWorld. \"Deno Land also accused Oracle of committing fraud in its trademark renewal efforts in 2019 by submitting screen captures of the website of JavaScript runtime Node.js, even though Node.js was not affiliated with Oracle.\"","contentLength":2772,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Ask Slashdot: What's the Best Way to Transfer Legacy PHP Code to a Modern Framework?","url":"https://ask.slashdot.org/story/25/01/12/0319219/ask-slashdot-whats-the-best-way-to-transfer-legacy-php-code-to-a-modern-framework?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1736699640,"author":"EditorDavid","guid":251,"unread":true,"content":"Slashdot reader rzack writes:\nSince 1999, I've written a huge amount of PHP code, for dozens of applications and websites. Most of it has been continually updated, and remains active and in-production, in one form or another. \n\nHere's the thing. It's all hand-written using vi, even to this day. \n\nIs there any benefit to migrating this codebase to a more modern PHP framework, like Laravel? And is there an easy and minimally intrusive way this can be done en-masse, across dozens of applications and websites? \n\nOr at this point should I just stick with vi?\n \n\nShare your thoughts and suggestions in the comments. \n\nWhat's the best way to transfer legacy PHP code to a modern framework?","contentLength":688,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Database Tables of Student, Teacher Info Stolen From PowerSchool In Cyberattack","url":"https://yro.slashdot.org/story/25/01/10/2059204/database-tables-of-student-teacher-info-stolen-from-powerschool-in-cyberattack?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1736548800,"author":"BeauHD","guid":250,"unread":true,"content":"An anonymous reader quotes a report from The Register: A leading education software maker has admitted its IT environment was compromised in a cyberattack, with students and teachers' personal data -- including some Social Security Numbers and medical info -- stolen. PowerSchool says its cloud-based student information system is used by 18,000 customers around the globe, including the US and Canada, to handle grading, attendance records, and personal information of more than 60 million K-12 students and teachers. On December 28 someone managed to get into its systems and access their contents \"using a compromised credential,\" the California-based biz told its clients in an email seen by Register this week.\n \n[...] \"We believe the unauthorized actor extracted two tables within the student information system database,\" a spokesperson told us. \"These tables primarily include contact information with data elements such as name and address information for families and educators. \"For a certain subset of the customers, these tables may also include Social Security Number, other personally identifiable information, and limited medical and grade information. \"Not all PowerSchool student information system customers were impacted, and we anticipate that only a subset of impacted customers will have notification obligations.\" While the company has tightened security measures and offered identity protection services to affected individuals, cybersecurity firm Cyble suggests the intrusion \"may have been more serious and gone on much longer than has been publicly acknowledged so far,\" reports The Register. The cybersecurity vendor says the intrusion could have occurred as far back as June 16, 2011, with it ending on January 2 of this year.\n \n\"Critical systems and applications such as Oracle Netsuite ERP, HR software UltiPro, Zoom, Slack, Jira, GitLab, and sensitive credentials for platforms like Microsoft login, LogMeIn, Windows AD Azure, and BeyondTrust\" may have been compromised, too.","contentLength":2008,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"StackOverflow Usage Plummets as AI Chatbots Rise","url":"https://developers.slashdot.org/story/25/01/10/1729248/stackoverflow-usage-plummets-as-ai-chatbots-rise?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1736530440,"author":"msmash","guid":249,"unread":true,"content":"Developer Q&amp;A platform StackOverflow appears to be facing an existential crisis as volume of new questions on the site has plunged 75% from the 2017 peak and 60% year-on-year in December 2024, according to StackExchange Data Explorer figures. \n\nThe decline accelerated after ChatGPT's launch in November 2022, with questions falling 76% since then. Despite banning AI-generated answers two years ago, StackOverflow has embraced AI partnerships, striking deals with Google, OpenAI and GitHub.","contentLength":491,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Pre-Lunch Coffee Drinkers Enjoy Lower Risk of Death, Analysis Finds","url":"https://developers.slashdot.org/story/25/01/08/0825249/pre-lunch-coffee-drinkers-enjoy-lower-risk-of-death-analysis-finds?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1736341200,"author":"BeauHD","guid":248,"unread":true,"content":"An anonymous reader quotes a report from The Guardian: People who get their coffee hit in the morning reap benefits that are not seen in those who have shots later in the day, according to the first major study into the health benefits of the drink at different times. Analysis of the coffee consumption of more than 40,000 adults found that morning coffee drinkers were 16% less likely to die of any cause and 31% less likely to die from cardiovascular disease during a 10-year follow-up period than those who went without. But the benefits to heart health appeared to vanish in people who drank coffee throughout the day, the researchers found, with medical records showing no significant reduction in mortality for all-day drinkers compared with those who avoided coffee. [...]\n \nThe study suggests that a morning dose of coffee is better for the heart than an evening one, but it does not explain why. One possible explanation is that drinking coffee later in the day can disrupt circadian rhythms and levels of hormones such as melatonin. This in turn affects sleep, inflammation and blood pressure, all of which can harm heart health. In an accompanying editorial, Prof Thomas Luscher, a consultant cardiologist at the Royal Brompton and Harefield hospitals in London, notes that many all-day drinkers sleep poorly, adding that coffee seems to suppress melatonin, a hormone that is important for inducing sleep in the brain. The effects are driven largely by caffeine, but coffee contains hundreds of other bioactive compounds that affect our physiology. The researchers say some substances in the blood that drive inflammation often peak in the morning and could be countered by anti-inflammatory compounds in a morning coffee. \"This explanation applies to both caffeinated and decaffeinated coffee,\" they write. \"Overall, we must accept the now substantial evidence that coffee drinking, particularly in the morning hours, is likely to be healthy,\" Luscher writes. \"Thus, drink your coffee, but do so in the morning!\"\n \nThe study has been published in the European Heart Journal.","contentLength":2087,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Should First-Year Programming Students Be Taught With Python and Java?","url":"https://developers.slashdot.org/story/25/01/05/1853210/should-first-year-programming-students-be-taught-with-python-and-java?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1736105700,"author":"EditorDavid","guid":247,"unread":true,"content":"Long-time Slashdot reader theodp writes: In an Op-ed for The Huntington News, fourth year Northeastern University CS student Derek Kaplan argues that real pedagogical merit is what should count when deciding which language to use to teach CS fundamentals (aka 'Fundies'). He makes the case for Northeastern to reconsider its decision to move from Racket to Python and Java later this year in an overhaul of its first-year curriculum. \n\n\"Students will get extensive training in Python, which is currently the most requested language by co-op employers,\" Northeastern explains (some two decades after a Slashdot commenter made the same Hot Languages = Jobs observation in a spirited 2001 debate on Java as a CS introductory language)... \n\n\"I have often heard computer science students complain that Fundies 1 teaches Racket instead of a 'useful language' like Python,\" Kaplan writes. \"But the point of Fundies is not to teach Racket — it is to teach program design skills that can be applied using any programming language. Racket is just the tool it uses to do so. A student who does well in Fundies will have no difficulty applying the same skills to Python or any other language. And with how fast the tech industry changes, is it really worth having a course that teaches just Python when tomorrow, some other language might dominate the industry? Our current curriculum focuses on timeless principles rather than fleeting trends.\" Also expressing concerns about the selection of suitable languages for novice programming is King's College CS Prof Michael Kölling, who explains, \"One of the drivers is the perceived usefulness of the language in a real-world context. Students (and their parents) often have opinions which language is 'better' to learn. In forming these opinions, the definition of 'better' can often be vague and driven by limited insight. One strong aspect commonly cited is the perceived usefulness of a language in the 'real world.' If a language is widely used in industry, it is more likely to be seen as a useful language to learn.\" Kölling's recommendation? \"We need a new language for teaching novices at secondary school and introductory university level,\" Kölling concludes. \"This language should be designed explicitly for teaching [...] Maintenance and adaptation of this language should be driven by pedagogical considerations, not by industry needs.\" While noble in intent, one suspects Kaplan and Kölling may be on a quixotic quest in a money wins world, outgunned by the demands, resources, and influence of tech giants like Amazon — the top employer of Northeastern MSCS program grads — who pushed back against NSF advice to deemphasize Java in high school CS and dropped $15 million to have tech-backed nonprofit Code.org develop and push a new Java-based, powered-by-AWS CS curriculum into high schools with the support of a consortium of politicians, educators, and tech companies. Echoing Northeastern, an Amazon press release argued the new Java-based curriculum \"best prepares students for the next step in their education and careers.\"\n\n","contentLength":3091,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"New System Auto-Converts C To Memory-Safe Rust, But There's a Catch","url":"https://developers.slashdot.org/story/25/01/03/133213/new-system-auto-converts-c-to-memory-safe-rust-but-theres-a-catch?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1735917720,"author":"msmash","guid":246,"unread":true,"content":"Researchers from Inria and Microsoft have developed a system to automatically convert specific types of C programming code into memory-safe Rust code, addressing growing cybersecurity concerns about memory vulnerabilities in software systems. \n\nThe technique, detailed in a new paper, requires programmers to use a restricted version of C called \"Mini-C\" that excludes features like pointer arithmetic. The researchers successfully tested their conversion system on two major code libraries, including the 80,000-line HACL* cryptographic library. Parts of the converted code have already been integrated into Mozilla's NSS and OpenSSH security systems, according to the researchers. Memory safety errors account for 76% of Android vulnerabilities in 2019.","contentLength":755,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Over 3.1 Million Fake 'Stars' on GitHub Projects Used To Boost Rankings","url":"https://developers.slashdot.org/story/24/12/31/1726239/over-31-million-fake-stars-on-github-projects-used-to-boost-rankings?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1735666020,"author":"msmash","guid":245,"unread":true,"content":"Researchers have uncovered widespread manipulation of GitHub's star-rating system, with over 3.1 million fraudulent stars identified across 15,835 repositories, according to a new study by Socket, Carnegie Mellon University, and North Carolina State University. \n\nThe research team analyzed 20TB of data from GHArchive, spanning 6 billion GitHub events from 2019 to 2024, using their \"StarScout\" detection tool. The tool identified 278,000 accounts engaging in coordinated inauthentic behavior to artificially boost repository rankings. \n\nGitHub uses stars, similar to social media likes, to rank projects and recommend content to users. The platform has previously encountered malicious exploitation of this system, including the \"Stargazers Ghost Network\" malware operation discovered last summer. Approximately 91% of flagged repositories and 62% of suspicious accounts were removed by October 2024.","contentLength":902,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"'International Obfuscated C Code Contest' Will Relaunch, Celebrating 40th Anniversary","url":"https://developers.slashdot.org/story/24/12/29/1730224/international-obfuscated-c-code-contest-will-relaunch-celebrating-40th-anniversary?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1735493640,"author":"EditorDavid","guid":244,"unread":true,"content":"After a four-year hiatus, 2025 will see the return of the International Obfuscated C Code Contest. Started in 1984 (and inspired partly by a bug in the classic Bourne shell), it's \"the Internet's oldest contest,\" acording to their official social media account on Mastodon. \n\nThe contest enters its \"pending\" state today at 2024-12-29 23:58 UTC — meaning an opening date for submissions has been officially scheduled (for January 31st) as well as a closing date roughly eight weeks later on April 1st, 2025. That's according to the newly-released (proposed and tentative) rules and guidelines, listing contest goals like \"show the importance of programming style, in an ironic way\" and \"stress C compilers with unusual code.\" And the contest's home page adds an additional goal: \"to have fun with C!\" \n\nExcerpts from the official rules:\n\n\nRule 0 \nJust as C starts at 0, so the IOCCC starts at rule 0. :-) \n\nRule 1 \nYour submission must be a complete program.... \n\nRule 5 \nYour submission MUST not modify the content or filename of any part of your original submission including, but not limited to prog.c, the Makefile (that we create from your how to build instructions), as well as any data files you submit.... \n\n\nRule 6 \nI am not a rule, I am a free(void *human); \n while (!(ioccc(rule(you(are(number(6)))))) {\n ha_ha_ha();\n } \n\n \nRule 6 is clearly a reference to The Prisoner... (Some other rules are even sillier...) And the guidelines include their own jokes:\n You are in a maze of twisty guidelines, all different. \n\nThere are at least zero judges who think that Fideism has little or nothing to do with the IOCCC judging process.... \n\n\nWe suggest that you avoid trying for the 'smallest self-replicating' source. The smallest, a zero byte entry, won in 1994.\n \n\nAnd this weekend there was also a second announcement:\n\nAfter a 4 year effort by a number of people, with over 6168+ commits, the Great Fork Merge has been completed and the Official IOCCC web site has been updated! A significant number of improvements has been made to the IOCCC winning entries. A number of fixes and improvements involve the ability of reasonable modern Unix/Linux systems to be able to compile and even run them. \n\nThanks to long-time Slashdot reader — and C programmer — achowe for sharing the news.","contentLength":2297,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python in 2024: Faster, More Powerful, and More Popular Than Ever","url":"https://developers.slashdot.org/story/24/12/29/0534253/python-in-2024-faster-more-powerful-and-more-popular-than-ever?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1735461240,"author":"EditorDavid","guid":243,"unread":true,"content":"\"Over the course of 2024, Python has proven again and again why it's one of the most popular, useful, and promising programming languages out there,\" writes InfoWorld:\n\nThe latest version of the language pushes the envelope further for speed and power, sheds many of Python's most decrepit elements, and broadens its appeal with developers worldwide. Here's a look back at the year in Python. \n\nIn the biggest news of the year, the core Python development team took a major step toward overcoming one of Python's longstanding drawbacks: the Global Interpreter Lock or \"GIL,\" a mechanism for managing interpreter state. The GIL prevents data corruption across threads in Python programs, but it comes at the cost of making threads nearly useless for CPU-bound work. Over the years, various attempts to remove the GIL ended in tears, as they made single-threaded Python programs drastically slower. But the most recent no-GIL project goes a long way toward fixing that issue — enough that it's been made available for regular users to try out. \n\nThe no-GIL or \"free-threaded\" builds are still considered experimental, so they shouldn't be deployed in production yet. The Python team wants to alleviate as much of the single-threaded performance impact as possible, along with any other concerns, before giving the no-GIL builds the full green light. It's also entirely possible these builds may never make it to full-blown production-ready status, but the early signs are encouraging. \nAnother forward-looking feature introduced in Python 3.13 is the experimental just-in-time compiler or JIT. It expands on previous efforts to speed up the interpreter by generating machine code for certain operations at runtime. Right now, the speedup doesn't amount to much (maybe 5% for most programs), but future versions of Python will expand the JIT's functionality where it yields real-world payoffs.\n \nPython is now more widely used than JavaScript on GitHub (thanks partly to its role in AI and data science code).","contentLength":2008,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null}]}