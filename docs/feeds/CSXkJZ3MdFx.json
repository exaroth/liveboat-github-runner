{"id":"CSXkJZ3MdFx","title":"Dev News","displayTitle":"Dev News","url":"","feedLink":"","isQuery":true,"isEmpty":false,"isHidden":false,"itemCount":65,"items":[{"title":"arXiv No Longer Accepts Computer Science Position or Review Papers Due to LLMs","url":"https://blog.arxiv.org/2025/10/31/attention-authors-updated-practice-for-review-articles-and-position-papers-in-arxiv-cs-category/","date":1762009085,"author":"dw64","guid":202,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45782136"},{"title":"Go's Context Logger","url":"https://github.com/pablovarg/contextlogger?tab=readme-ov-file#examples","date":1762007053,"author":"/u/PurityHeadHunter","guid":581,"unread":true,"content":"<p>Hello Gophers! A while ago, I started using contextual logging in my projects and found it made debugging significantly easier. Being able to trace request context through your entire call stack is a game-changer for understanding what's happening in your system.</p><p>This project started as a collection of utility functions I copy-pasted between projects. Eventually, it grew too large to maintain that way, so I decided to turn it into a proper library and share it with the community. <a href=\"https://github.com/PabloVarg/contextlogger\">https://github.com/PabloVarg/contextlogger</a></p><p>Context Logger is a library that makes it easy to propagate your logging context through Go's  and integrates seamlessly with Go's standard library, mainly  and . If this is something that you usually use or you're interested on using it for your projects, take a look at some <a href=\"https://github.com/pablovarg/contextlogger\">Usage Examples</a>.</p><p>For a very simple example, here you can see how to:</p><ul><li>Embed a logger into your context</li><li>Update the context (this can be done many times before logging)</li><li>Log everything that you have included in your context so far</li></ul><pre><code>ctx = contextlogger.EmbedLogger(ctx) contextlogger.UpdateContext(ctx, \"userID\", user.ID) contextlogger.LogWithContext(ctx, slog.LevelInfo, \"done\") </code></pre>","contentLength":1171,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/golang/comments/1olp424/gos_context_logger/"},{"title":"Async Rust explained without Tokio or Smol","url":"https://youtu.be/_x61dSP4ZKM?si=XPDtuH13Du-s5KTD","date":1762005654,"author":"/u/Gisleburt","guid":604,"unread":true,"content":"<!DOCTYPE html>","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/rust/comments/1olokba/async_rust_explained_without_tokio_or_smol/"},{"title":"unsupportedConfigOverrides USAGE","url":"https://www.reddit.com/r/kubernetes/comments/1olodfm/unsupportedconfigoverrides_usage/","date":1762005147,"author":"/u/BigBprofessional","guid":588,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Need Advice: Bitbucket Helm Repo Structure for Multi-Service K8s Project + Shared Infra (ArgoCD, Vault, Cert-Manager, etc.)","url":"https://www.reddit.com/r/kubernetes/comments/1olnp4b/need_advice_bitbucket_helm_repo_structure_for/","date":1762003325,"author":"/u/Dependent_Concert446","guid":587,"unread":true,"content":"<p>I’m looking for some advice on how to organize our <strong>Helm charts and Bitbucket repos</strong> for a growing  setup.</p><p>We currently have  that contains everything — about  several  (like ArgoCD, Vault, Cert-Manager, etc.).</p><p>For our , we created  that’s used for microservices. We <strong>don’t have separate repos for each microservice</strong> — all are managed under the same project.</p><p>Here’s a simplified view of the repo structure:</p><pre><code>app/ ├── project-argocd/ │ ├── charts/ │ └── values.yaml ├── project-vault/ │ ├── charts/ │ └── values.yaml │ ├── project-chart/ # Base chart used only for microservices │ ├── basechart/ │ │ ├── templates/ │ │ └── Chart.yaml │ ├── templates/ │ ├── Chart.yaml # Defines multiple services as dependencies using │ └── values/ │ ├── cluster1/ │ │ ├── service1/ │ │ │ └── values.yaml │ │ └── service2/ │ │ └── values.yaml │ └── values.yaml │ │ # Each values file under 'values/' is synced to clusters via ArgoCD │ # using an ApplicationSet for automated multi-cluster deployments </code></pre><p>The following  are also in the same repo right now:</p><ul><li><strong>Project Contour (Ingress)</strong></li><li><em>(and other cluster-level tools like k3s, Longhorn, etc.)</em></li></ul><p>These are <strong>not tied to the application project</strong> — they’re might shared and deployed across <strong>multiple clusters and environments</strong>.</p><ol><li>Should I move these shared infra components into a <strong>separate “infra” Bitbucket repo</strong> (including their Helm charts, Terraform, and Ansible configs)?</li><li>For GitOps with , would it make more sense to split things like this: <ul><li> → all microservices + base Helm chart</li><li> → cluster-level services (ArgoCD, Vault, Cert-Manager, Longhorn, etc.)</li></ul></li><li>How do other teams structure and manage their repositories, and what are the best practices for this in DevOps and GitOps?</li></ol><p> Used AI to help write and format this post for grammar and readability.</p>","contentLength":1940,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"SQLite concurrency and why you should care about it","url":"https://jellyfin.org/posts/SQLite-locking/","date":1762001943,"author":"HunOL","guid":201,"unread":true,"content":"<p>SQLite is a powerful database engine, but due to its design, it has limitations that should not be overlooked.</p><p>Jellyfin has used a SQLite-based database for storing most of its data for years, but it has also encountered issues on many systems. In this blog post, I will explain how we address these limitations and how developers using SQLite can apply the same solutions.</p><p>This will be a technical blog post intended for developers and everyone wanting to learn about concurrency.</p><p>Also Jellyfin's implementation of locking for SQLite should be fairly easy to be implemented into another EF Core application if you are facing the same issue.</p><p>SQLite is a file-based database engine running within your application and allows you to store data in a relational structure.\nOverall it gives your application the means of storing structured data as a single file and without having to depend on another application to do so.\nNaturally this also comes at a price. If your application fully manages this file, the assumption must be made that your application is the sole owner of this file, and nobody else will tinker with it while you are writing data to it.</p><p>So an application that wants to use SQLite as its database needs to be the only one accessing it.\nHaving established this fact, an important thought arises: if only a single write operation should be performed on a single file at a time, this rule must also apply to operations within the same application.</p><p>SQLite has a feature that tries to get around this limitation: the Write-Ahead-Log (WAL).\nThe WAL is a separate file that acts as a journal of operations that should be applied to an SQLite file.\nThis allows multiple parallel writes to take place and get enqueued into the WAL.\nWhen another part of the application wants to read data, it reads from the actual database, then scans the WAL for modifications and applies them on the fly.\nThis is not a foolproof solution; there are still scenarios where WAL does not prevent locking conflicts.</p><p>A transaction is supposed to ensure two things.\nModifications made within a transaction can be reverted, either when something goes wrong or when the application decides it should and optionally a transaction may also block other readers from reading data that is modified within a transaction.\nThis is where it gets spicy and we come to the real reason why I am writing this blog post.\nFor some reason on some systems that run Jellyfin when a transaction takes place the SQLite engine reports the database is locked and instead of waiting for the transaction to be resolved the engine refuses to wait and just crashes.\nThis seems to be a not uncommon issue and there are many reports to be found on the issue.</p><p>The factor that makes this issue so bad is that it does not happen reliably. So far we only have one team member where this can be (somewhat) reliably be reproduced which makes this an even worse a bug.\nFrom the reports this issue happens across all operating systems, drive speeds and with or without virtualization.\nSo we do not have any deciding factor identified that even contributes to the likelihood of the issue happening.</p><p>Having established the general theory on how SQLite behaves, we also have to look at the specifics of Jellyfins usage of SQLite.\nDuring normal operations on a recommended setup (Non-Networked Storage and preferably SSD) its unusual for any problems to arise, however the way Jellyfin utilises the SQLite db up to 10.11 is very suboptimal.\nIn versions prior to 10.11 Jellyfin had a bug in its parallel task limit which resulted in exponential overscheduling of library scan operations which hammered the database engine with thousands of parallel write requests that an SQLite engine is simply not able to handle.\nWhile most SQLite engine implementations have retry behavior, they also have timeouts and checks in place to prevent limitless waiting so if we stress the engine enough, it just fails with an error.\nThat and very long running and frankly unoptimized transactions could lead to the database just being overloaded with requests and flaking out.</p><p>Since we moved the codebase over to EF Core proper, we have the tools to actually do something about this as EF Core gives us a structured abstraction level.\nEF Core supports a way of hooking into every command execution or transaction by creating <a href=\"https://learn.microsoft.com/en-us/ef/core/logging-events-diagnostics/interceptors\" target=\"_blank\" rel=\"noopener noreferrer\">Interceptors</a>.\nWith an interceptor we can finally do the straight forward idea of just \"not\" writing to the database in parallel in a transparent way to the caller.\nThe overall idea is to have multiple strategies of locking. Because all levels of synchronization will inevitably come at the cost of performance, we only want to do it when it is really necessary.\nSo, I decided on three locking strategies:</p><ol></ol><p>As a default, the no-lock behavior does exactly what the name implies. Nothing. This is the default because my research shows that for 99% all of this is not an issue and every interaction at this level will slow down the whole application.</p><p>Both the optimistic and pessimistic behaviors use two interceptors—one for transactions and one for commands—and override  in .</p><h3>Optimistic locking behavior<a href=\"https://jellyfin.org/posts/SQLite-locking/#optimistic-locking-behavior\" aria-label=\"Direct link to Optimistic locking behavior\" title=\"Direct link to Optimistic locking behavior\" translate=\"no\">​</a></h3><p>Optimistic locking means to assume the operation in question will succeed and only handle issues afterwards. In essence this can be boiled down to \"Try and Retry and Retry ...\" for a set number of times until either we succeed with the operation or fail entirely.\nThis still leaves the possibility that we will not actually be able to perform a write, but the introduced overhead is far less than the Pessimistic locking behavior.</p><p>The idea behind how this works is simple: every time two operations try to write to the database, one will always win. The other will fail, wait some time, then retry a few times.</p><p>Jellyfin uses the  library perform the retry behavior and will only retry operations it will find have been locked due to this exact issue.</p><h3>Pessimistic locking behavior<a href=\"https://jellyfin.org/posts/SQLite-locking/#pessimistic-locking-behavior\" aria-label=\"Direct link to Pessimistic locking behavior\" title=\"Direct link to Pessimistic locking behavior\" translate=\"no\">​</a></h3><p>Pessimistic locking always locks when a write to SQLite should be performed. Essentially every time an transaction is started or a write operation on the database is done though EF Core, Jellyfin will wait until all other read operations are finished and then block all other operations may they be read or write until the write in question has been performed.\nThis however means, that Jellyfin can only ever perform a single write to the database, even if it would technically does not need to.</p><p>In theory, an application should have no issue reading from table \"Alice\" while writing to table \"Bob\" however to eliminate all possible sources of concurrency related locking, Jellyfin will only ever allow a single write performed on its database in this mode.\nWhile this will absolutely result in the most stable operation, it will undoubtedly also be the slowest.</p><p>Jellyfin uses a <a href=\"https://learn.microsoft.com/en-us/dotnet/fundamentals/runtime-libraries/system-threading-readerwriterlockslim\" target=\"_blank\" rel=\"noopener noreferrer\">ReaderWriterLockSlim</a> to lock the operations, that means we allow an unlimited number of reads to happen concurrently while only one write may ever be done on the database.</p><h3>The future Smart locking behavior<a href=\"https://jellyfin.org/posts/SQLite-locking/#the-future-smart-locking-behavior\" aria-label=\"Direct link to The future Smart locking behavior\" title=\"Direct link to The future Smart locking behavior\" translate=\"no\">​</a></h3><p>In the future we might also consider combining both modes, to get the best of both worlds.</p><p>Initial testing showed that with both modes, we had great success in handling the underlying issue. While we are not yet sure why this happens only on some systems when others work, we at least now have an option for users previously left out of using Jellyfin.</p><p>When I was researching this topic, I found many reports all over the internet facing the same error but nobody was able to provide a conclusive explanation whats really happening here.\nThere have been similar proposals made to handle it but there wasn't a \"ready to drop in\" solution that handles all the different cases or only code that required massive modifications to every EF Core query.\nJellyfin's implementation of the locking behaviors should be a copy-paste solution for everyone having the same issues as its using interceptors and the caller has no idea of the actual locking behavior.</p>","contentLength":7955,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45781298"},{"title":"Abandonware of the web: do you know that there is an HTML tables API?","url":"https://christianheilmann.com/2025/10/08/abandonware-of-the-web-do-you-know-that-there-is-an-html-tables-api/","date":1762001901,"author":"begoon","guid":200,"unread":true,"content":"<p>When people turn data into  tables using JavaScript, they either use the  methods (createElement() and the likes), but most of the time just append a huge string and use innerHTML, which always is a security concern. However, did you know that  tables also have an <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement\" title=\"\">old, forgotten </a> ? Using this one, you can loop over tables, create bodies, rows, cells, heads, footers, captions an summaries (yes,  tables have all of those) and access the table cells. Without having to re-render the whole table on each change. Check out the <a href=\"https://codepen.io/codepo8/pen/RNrVPzq?editors=1111\" title=\"\">Codepen</a> to see how you can create a table from a nested array:</p><div><table><tbody><tr><td><pre>let table \nlet b  document.\nlet t  document.\nb.t\ntable.rowri\n  let r  t.ri\n  row.li\n    let c  r.i\n    c. l</pre></td></tr></tbody></table><p>let table = [\n  ['one','two','three'],\n  ['four','five','six']\n];\nlet b = document.body;\nlet t = document.createElement('table');\nb.appendChild(t);\ntable.forEach((row,ri) =&gt; {\n  let r = t.insertRow(ri);\n  row.forEach((l,i) =&gt; {\n    let c = r.insertCell(i);\n    c.innerText = l;  \n  })\n});</p></div><p>You can then access each table cell with an index (with t being a reference to the table):</p><div><table><tbody><tr><td><pre>console.t..</pre></td></tr></tbody></table><p>console.log(t.rows[1].cells[1]);\n// =&gt; &lt;td&gt;five&lt;/td&gt;</p></div><p>You can also delete and create cells and rows, if you want to add a row to the end of the table with a cell, all you need to do is:</p><div><table><tbody><tr><td><pre>t.\nt..\nt...</pre></td></tr></tbody></table><p>t.insertRow(-1);\nt.rows[2].insertCell(0);\nt.rows[2].cells[0].innerText = 'foo';</p></div><p>There are a few things here that are odd – adding a -1 to add a row at the end for example – and there seems to be no way to create a TH element instead of a TD. All table cells are just cells.</p><p>However, seeing how much of a pain it is to create tables, it would be fun to re-visit this  and add more functionality to it. We did add a lot of things to  forms, like formData and the change event, so why not add events and other features to tables. That way they’d finally get the status as data structures and not a hack to layout content on the web.</p>","contentLength":1911,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45781293"},{"title":"We open-sourced a minimal NASDAQ ITCH parser in Rust. Built for clarity, not just speed. Here's how we pushed it to 107M msg/sec.","url":"https://www.reddit.com/r/rust/comments/1oln5mw/we_opensourced_a_minimal_nasdaq_itch_parser_in/","date":1762001832,"author":"/u/capitanturkiye","guid":603,"unread":true,"content":"<p>We just released Lunyn ITCH Lite, a minimal NASDAQ ITCH parser designed to be readable, reproducible, and easy to build on top of. And we published a technical deep dive on how the optimized version hits 107 million messages per second.</p><p>We were frustrated with how opaque ITCH parsing was. Existing implementations either hide complexity behind vendor APIs or get bogged down in micro-optimization that obscures the core logic. So we built a version that strips everything away and focuses on clarity.</p><ul><li>Clean, readable, baseline Rust code to get started</li><li>No SIMD intrinsics, no lock-free queues, no vendor tweaks</li><li>Targets about 6-10M messages per second on commodity hardware</li><li>Intentionally leaves optimization and building as an exercise for you</li><li>Validates message boundaries but doesn't decode fields (fast baseline)</li></ul><p>You can clone it right now and reproduce the numbers on your own hardware. Memory-mapped files, length-prefixed message scanning, full benchmark harness included.</p><pre><code>use lunyn_itch_lite::{Parser, ParseStats}; let buf = std::fs::read(\"/path/to/itch.bin\")?; let mut parser = Parser::default(); let stats = parser.parse(&amp;buf)?; println!(\"{} msgs in {:?} ({:.2}M/s)\", stats.messages, stats.elapsed, stats.mps() / 1_000_000.0); </code></pre><p>That's it. The whole API.</p><p><strong>Then we built the optimized version.</strong></p><p>The blog post walks through every optimization decision:</p><ul><li>Zero-copy parsing (no allocations per message)</li><li>SIMD vectorization (8x parallel field extraction)</li><li>Lock-free concurrency (linear scaling to 16+ cores)</li><li>Cache-aligned memory layouts (eliminate cache misses)</li><li>Production-hardened error handling</li></ul><p>Each section explains why the optimization matters and what the performance impact actually is. Numbers backed by real benchmarks against official NASDAQ data.</p><p>The lite version is your baseline. Fork it, add SIMD, benchmark again, see the difference. That's how you learn where performance actually comes from instead of just cargo-culting optimizations.</p><p>Binary protocol parsing shouldn't be a black box. Neither should high-performance systems design. If you want to build fast infrastructure, you need to understand these patterns. So we're open-sourcing the simple version and publishing the deep dive.</p><p>The lite parser is good for education, research, and as a foundation for your own optimization work. The blog post is for anyone who wants to understand the decisions that take you from 10M to 107M messages per second.</p><p>Happy to answer technical questions about the architecture, benchmarking methodology, or specific optimization decisions in the comments.</p>","contentLength":2534,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Hard Rust requirements from May onward for all Debian ports","url":"https://lists.debian.org/debian-devel/2025/10/msg00285.html","date":1762000364,"author":"/u/pyeri","guid":600,"unread":true,"content":"<pre>Hi all,\n\nI plan to introduce hard Rust dependencies and Rust code into\nAPT, no earlier than May 2026. This extends at first to the\nRust compiler and standard library, and the Sequoia ecosystem.\n\nIn particular, our code to parse .deb, .ar, .tar, and the\nHTTP signature verification code would strongly benefit\nfrom memory safe languages and a stronger approach to\nunit testing.\n\nIf you maintain a port without a working Rust toolchain,\nplease ensure it has one within the next 6 months, or\nsunset the port.\n\nIt's important for the project as whole to be able to\nmove forward and rely on modern tools and technologies\nand not be held back by trying to shoehorn modern software\non retro computing devices.\n\nThank you for your understanding.\n-- \ndebian developer - deb.li/jak | jak-linux.org - free software dev\nubuntu core developer                              i speak de, en\n</pre>","contentLength":874,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1olmnhx/hard_rust_requirements_from_may_onward_for_all/"},{"title":"Hard Rust requirements from May onward (for Debian's package manager, APT)","url":"https://lists.debian.org/debian-devel/2025/10/msg00285.html","date":1761999882,"author":"/u/DeleeciousCheeps","guid":607,"unread":true,"content":"<pre>Hi all,\n\nI plan to introduce hard Rust dependencies and Rust code into\nAPT, no earlier than May 2026. This extends at first to the\nRust compiler and standard library, and the Sequoia ecosystem.\n\nIn particular, our code to parse .deb, .ar, .tar, and the\nHTTP signature verification code would strongly benefit\nfrom memory safe languages and a stronger approach to\nunit testing.\n\nIf you maintain a port without a working Rust toolchain,\nplease ensure it has one within the next 6 months, or\nsunset the port.\n\nIt's important for the project as whole to be able to\nmove forward and rely on modern tools and technologies\nand not be held back by trying to shoehorn modern software\non retro computing devices.\n\nThank you for your understanding.\n-- \ndebian developer - deb.li/jak | jak-linux.org - free software dev\nubuntu core developer                              i speak de, en\n</pre>","contentLength":874,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/rust/comments/1olmhxe/hard_rust_requirements_from_may_onward_for/"},{"title":"Python refuses $1.5M grant, Unity's in trouble, AUR attacked again - Linux Weekly News","url":"https://tilvids.com/videos/watch/02a038db-fdd0-46d4-8cb2-1f0b1b0bd04d","date":1761998909,"author":"/u/Pure_Toe6636","guid":592,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/linux/comments/1olm6jp/python_refuses_15m_grant_unitys_in_trouble_aur/"},{"title":"what exactly is open-sourced in grokipedia?","url":"https://www.reddit.com/r/linux/comments/1olk43q/what_exactly_is_opensourced_in_grokipedia/","date":1761991521,"author":"/u/nix-solves-that-2317","guid":594,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Monthly: Certification help requests, vents, and brags","url":"https://www.reddit.com/r/kubernetes/comments/1olk1no/monthly_certification_help_requests_vents_and/","date":1761991272,"author":"/u/thockin","guid":586,"unread":true,"content":"<p>Did you pass a cert? Congratulations, tell us about it!</p><p>Did you bomb a cert exam and want help? This is the thread for you.</p><p>Do you just hate the process? Complain here.</p><p>(Note: other certification related posts will be removed)</p>","contentLength":223,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Monthly: Who is hiring?","url":"https://www.reddit.com/r/kubernetes/comments/1olk17i/monthly_who_is_hiring/","date":1761991234,"author":"/u/gctaylor","guid":590,"unread":true,"content":"<div><p>This monthly post can be used to share Kubernetes-related job openings within  company. Please include:</p><ul><li>Location requirements (or lack thereof)</li><li>At least one of: a link to a job posting/application page or contact details</li></ul><p>If you are interested in a job, please contact the poster directly. </p><p>Common reasons for comment removal:</p><ul><li>Not meeting the above requirements</li><li>Recruiter post / recruiter listings</li><li>Negative, inflammatory, or abrasive tone</li></ul></div>   submitted by   <a href=\"https://www.reddit.com/user/gctaylor\"> /u/gctaylor </a>","contentLength":461,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Not So Fast: Analyzing the Performance of WebAssembly vs. Native Code (WASM 45% slower)","url":"https://ar5iv.labs.arxiv.org/html/1901.09056","date":1761989253,"author":"/u/Zomgnerfenigma","guid":599,"unread":true,"content":"<h5>The Challenge of Benchmarking WebAssembly</h5><div><p>The aforementioned suite of 24 benchmarks is the PolybenchC benchmark\nsuite&nbsp;, which is designed to measure the effect of\npolyhedral loop optimizations in compilers. All the benchmarks in the\nsuite are small scientific computing kernels rather than full\napplications (e.g., matrix multiplication and LU Decomposition); each is\nroughly 100 LOC. While WebAssembly is designed to accelerate scientific\nkernels on the Web, it is also explicitly designed for a much richer set\nof full applications.</p></div><div><p>The WebAssembly documentation highlights several intended use\ncases&nbsp;, including scientific kernels, image editing,\nvideo editing, image recognition, scientific visualization, simulations,\nprogramming language interpreters, virtual machines, and POSIX applications.\nTherefore, WebAssembly’s strong performance on the scientific kernels in PolybenchC\ndo not imply that it will perform well given a different kind of application.</p></div><div><p>We argue that a more comprehensive evaluation of WebAssembly should rely on an\nestablished benchmark suite of large programs, such as the SPEC CPU benchmark\nsuites. In fact, the SPEC CPU 2006 and 2017 suite of\nbenchmarks include several applications that fall under the intended use cases of\nWebAssembly: eight benchmarks are scientific applications (e.g., ,\n, , , and\n), two benchmarks involve image and video processing\n( and ), and all of the benchmarks are POSIX\napplications.</p></div><div><p>Unfortunately, it is not possible to simply compile a sophisticated\nnative program to WebAssembly. Native programs, including the programs in\nthe SPEC CPU suites, require operating system services, such as a\nfilesystem, synchronous I/O, and processes, which WebAssembly and the\nbrowser do not provide. The SPEC benchmarking harness itself requires\na file system, a shell, the ability to spawn processes, and other Unix\nfacilities. To overcome these limitations when porting native\napplications to the web, many programmers painstakingly modify their\nprograms to avoid or mimic missing operating system\nservices. Modifying well-known benchmarks, such as SPEC CPU, would not\nonly be time consuming but would also pose a serious threat to\nvalidity.</p></div><div><p>The standard approach to running these applications today is to use\nEmscripten, a toolchain for compiling C and C++ to\nWebAssembly&nbsp;. Unfortunately, Emscripten only supports\nthe most trivial system calls and does not scale up to large-scale\napplications. For example, to enable applications to use synchronous\nI/O, the default Emscripten  filesystem loads the entire\nfilesystem image into memory before the program begins executing. For\nSPEC, these files are too large to fit into memory.</p></div><div><p>A promising alternative is to use , a framework that enables\nrunning unmodified, full-featured Unix applications in the\nbrowser&nbsp;.  implements\na Unix-compatible kernel in JavaScript, with full support for\nprocesses, files, pipes, blocking I/O, and other Unix features.\nMoreover, it includes a C/C++ compiler (based on Emscripten)\nthat allows programs to run in the browser\nunmodified. The  case studies include complex applications,\nsuch as , which runs entirely in the browser without any\nsource code modifications.</p></div><div><p>Unfortunately,  is a JavaScript-only solution, since it was\nbuilt before the release of\nWebAssembly. Moreover,  suffers from high performance overhead,\nwhich would be a significant confounder while benchmarking. Using ,\nit would be difficult to tease apart the poorly performing benchmarks\nfrom performance degradation introduced by .</p></div>","contentLength":3526,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1oljj3v/not_so_fast_analyzing_the_performance_of/"},{"title":"You can't refuse to be scanned by ICE's facial recognition app, DHS document say","url":"https://www.404media.co/you-cant-refuse-to-be-scanned-by-ices-facial-recognition-app-dhs-document-says/","date":1761987534,"author":"nh43215rgb","guid":199,"unread":true,"content":"<div>Photos captured by Mobile Fortify will be stored for 15 years, regardless of immigration or citizenship status, the document says.</div>","contentLength":130,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45780228"},{"title":"Hard Rust requirements from May onward","url":"https://lists.debian.org/debian-devel/2025/10/msg00285.html","date":1761982300,"author":"rkta","guid":198,"unread":true,"content":"<pre>Hi all,\n\nI plan to introduce hard Rust dependencies and Rust code into\nAPT, no earlier than May 2026. This extends at first to the\nRust compiler and standard library, and the Sequoia ecosystem.\n\nIn particular, our code to parse .deb, .ar, .tar, and the\nHTTP signature verification code would strongly benefit\nfrom memory safe languages and a stronger approach to\nunit testing.\n\nIf you maintain a port without a working Rust toolchain,\nplease ensure it has one within the next 6 months, or\nsunset the port.\n\nIt's important for the project as whole to be able to\nmove forward and rely on modern tools and technologies\nand not be held back by trying to shoehorn modern software\non retro computing devices.\n\nThank you for your understanding.\n-- \ndebian developer - deb.li/jak | jak-linux.org - free software dev\nubuntu core developer                              i speak de, en\n</pre>","contentLength":874,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45779860"},{"title":"Programming Language Agnostic Naming Conventions","url":"https://codedrivendevelopment.com/posts/programmatic-naming-conventions-guide","date":1761982250,"author":"/u/Distinct-Panic-246","guid":598,"unread":true,"content":"<p>There is a famous quote when it comes to naming things in programming, which is attributed to Phil Karlton</p><blockquote><p>\"There are only two hard things in Computer Science: cache invalidation and naming things\"</p></blockquote><p>(Or the slight variation of <em>\"There are only two hard things in Computer Science: cache invalidation, naming things, and off by one errors\"</em>)</p><p>But over the last few decades there are definitely a few common conventions. Using standard names for things frees up time to work on tougher problems than naming, and means future readers of your code can probably understand the concept better.</p><h2>Why we spend time naming things correctly</h2><p>If you see a variable called , you can probably assume it is a boolean.  or  are not clear.</p><h3>Avoid Negative variable names:</h3><p>Negative names can lead to double negatives, which are confusing.</p><ul></ul><p>Abbreviations can be ambiguous - not everyone will interpret it as the same meaning. Just use the full word, it is clearer.</p><p>(Although  is probably an exception where it should always be used over ).</p><ul></ul><h3>Pick a language and always use that</h3><p>If you work in a modern company then it is likely you work with people originally from various countries around the world. It can be easy to end up with a codebase with a mix of words like  and .</p><p>I'd recommend just picking US spelling in your code (even if the app is localised only for a UK or AU audiece)</p><ul></ul><h3>Make booleans obvious by using is/has prefix</h3><p>If you name something , it is quite obvious that it is a boolean. Try to always do this, as something like  could read as if it wasn't a boolean</p><ul></ul><p>Words like , ,  are too generic. Try to avoid these terms</p><p>Pick a convention for naming things, and use those everywhere.calculateAmount</p><ul><li>Bad 👎:  and </li><li>Good 👍:  and </li></ul><p>Also pick a style for casing, and be sure you're consistent with it. Here are some examples (there might be other typical conventions for your library/language of choice)</p><ul><li> for class names</li><li> for most other variables</li><li> for static constants</li></ul><h2>Common names for specific things</h2><p>If you're taking some data and  it to a different shape or different values then  is a common and accurate name.</p><pre><div><div><div><code></code></div></div></div></pre><p>If you need to check if data is valid/correct, then its almost always called a validator.</p><pre><div><div><div><code></code></div></div></div></pre><p>Used when describing the shape of some data structure. Often used with database designs.</p><pre><div><div><div><code></code></div></div></div></pre><p>When you need to take some data (e.g. some string) and understand its own data structure. They are quite different things, parsers and transformers can  be very related</p><pre><div><div><div><code></code></div></div></div></pre><p>For code that runs 'between' different parts of your application. A typical use for middleware is in HTTP servers the incoming HTTP request can go through multiple middlewares to either transform the incoming data (before passing to next one or final endpoint handler function) or to do something with that data</p><pre><div><div><div><code></code></div></div></div></pre><p>When you have some functionality with a specific interface, and you need to convert it to another interface/shape.</p><p>It is also known as a 'wrapper' (or a bridge, although that is technically a slightly different thing)</p><p>When you need to make data uniform in scale, format, or structure</p><pre><div><div><div><code></code></div></div></div></pre>","contentLength":3010,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1olht95/programming_language_agnostic_naming_conventions/"},{"title":"Well a old school flex i guess","url":"https://www.reddit.com/r/linux/comments/1olftbt/well_a_old_school_flex_i_guess/","date":1761974186,"author":"/u/Puzzleheaded-Car4883","guid":591,"unread":true,"content":"<p>This old Red Hat Linux 8.0 manual’s been gathering dust on my shelf. I used to read it as a kid — didn’t understand a single word back then. Fast forward to age 19, 3 years into using Linux daily... and everything suddenly makes sense.</p><p>Btw this is one of those first thing that introduced me to linux </p>","contentLength":306,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Happy Halloween, nerds","url":"https://www.reddit.com/r/linux/comments/1olf21x/happy_halloween_nerds/","date":1761971357,"author":"/u/feelingsupersonic","guid":596,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Java Virtual Threads VS GO routines","url":"https://www.reddit.com/r/golang/comments/1oldyoo/java_virtual_threads_vs_go_routines/","date":1761967558,"author":"/u/gamecrow77","guid":579,"unread":true,"content":"<p>I recently had a argument with my tech lead about this , my push was for Go since its a new stack , new learning for the team and Go is evolving , my assumption is that we will find newer gen of devs who specialise in Go. Was i wrong here ? the argument was java with virtual threads is as efficient as go </p>","contentLength":306,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"The profitable startup","url":"https://linear.app/now/the-profitable-startup","date":1761967084,"author":"doppp","guid":197,"unread":true,"content":"<p>For years, startups have been taught to prioritize growth over everything else. Profitability was seen as unambitious or even wrong – something to worry about when you hit scale. Why focus on profits when money and valuations were easy to come by?</p><p>But that thinking was always flawed.</p><p>Profitability isn't unambitious; it's controlling your own destiny. It means you don't have to rely on investors for survival. It means you can focus on your unaltered vision and mission. And it means you as a founder decide the pace of growth. And once you experience it, it's hard to imagine doing things any other way.</p><p><a href=\"https://paulgraham.com/ramenprofitable.html\">Paul Graham famously wrote about \"ramen profitability\"</a> – the point where a founding team could survive without external funding. He argued this made startups more attractive to investors, showing they could get customers to pay, were serious about building valuable products, and were disciplined with expenses.</p><p>Graham wrote his essay in 2009. I’d argue that we now live in a world where it’s not just easier to get ramen profitable, but traditionally profitable – while also growing fast.</p><p>At Linear we didn't set out to be profitable but kind of stumbled into it. We believed that to win this market we really needed to build a superior tool. The best way we knew how to do that was to keep the team small and focused. And when we launched after a year in private beta, almost all of our 100 beta users converted to paid customers. To our surprise, we realized it wouldn't take that long to become profitable if we kept the costs in check. Twelve months after launch, we hit profitability, and we've stayed profitable ever since.</p><p>I don't know why hiring massive teams ever became the norm. In my own experience, small teams always delivered better quality, and faster. Maybe it's fear of missing out if you don't grow the team fast. Maybe it's investors whispering that your team is \"understaffed compared to benchmarks.\" Being understaffed compared to benchmarks almost always should be a source of pride, not a problem. People should be surprised how small your team is, not how big it is.</p><p>What holds you back is rarely team size – it's the clarity of your focus, skill and ability to execute. Larger teams mean slower progress, more management overhead, more meetings, more opinions, and usually dilution of vision and standards. Yet growing the team has somehow become a symbol of success.</p><p>At Linear, we hired our first employee after six months and roughly doubled the team each year. With each hire, we make sure they truly elevate the team. We don't set out to hire ten engineers – we hire the next  engineer. This intentional approach has allowed us to maintain both quality and culture.</p><p>The most underrated thing about profitability is how much peace of mind it gives you. Once you're profitable, you stop worrying about survival and focus on what really matters: building something great. Building the way you want. Instead of optimizing for the next fundraising round, you optimize for value creation.</p><p>While profitability might not come quickly for every startup, I believe it's achievable sooner than most think. If you're creating a new market, or truly require massive scale like a social network, or significant upfront investment like a hardware company, it might take longer. But if you're in a category where there isn't hard upfront investment, and you get some level of product-market fit with customers willing to pay, you can probably be profitable. You can decide to become profitable. And usually, it's a decision about how much and how fast you hire.</p><p>Revenue per employee is one of the clearest ways to see you’re hiring appropriately. While some of the best public companies benchmark at $1-2M per employee, for startups it's not unreasonable to target the range of $500k-$1M per employee.</p><p><strong>Understand Your Risk Profile</strong></p><p>Are you building something highly speculative where you're not sure if there's a market for it, or are you building something that already has a market but with a different take on it? In the former case profitability takes longer, but in the latter it could happen right away. Most software today, especially in the B2B space, is about building a modern version of something existing.</p><p><strong>Hire Intentionally and Slower</strong></p><p>For most software startups, ten people before product-market fit should be your ceiling, not your target. After PMF, every hire should address a specific, pressing need – not just fill out an org chart. At Linear, our deliberately slow headcount growth forced us to be selective, which meant making better hires. It also protected our culture, since rapid hiring often dilutes the very things that made your startup special in the first place. When you hire less, you naturally hire better.</p><p>Being profitable doesn't mean you have to be anti-investors. It means you have that choice, and investors are quite interested in profitable companies that also grow fast. You can raise more, less, or nothing. You can wait for the right timing, the right partner, or fund. For most ambitious startups, it can still be a good idea to raise something even if you could get by bootstrapping. Investors can still be helpful, and the additional cash balance can help you to make larger investments, or acquisitions.</p><p>The point is that you can be and are allowed to be profitable as a startup. It's not a bad thing, it's not an oxymoron or as hard as people make it out to be. The secret is that a lot of successful companies actually were quite profitable early on, they just didn't talk about it. When you're profitable, you make decisions based on what's best for your customers and your product, not what's best for impressing investors.</p><p>I didn't set out to build a profitable startup. But once I got there, I realized I wouldn't want to build a company any other way.</p>","contentLength":5825,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45778984"},{"title":"IRS open-sourced the fact graph it uses for tax law","url":"https://github.com/IRS-Public/fact-graph","date":1761958132,"author":"/u/R2_SWE2","guid":602,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1olb241/irs_opensourced_the_fact_graph_it_uses_for_tax_law/"},{"title":"shift left approach for requests and limits","url":"https://www.reddit.com/r/kubernetes/comments/1olaat1/shift_left_approach_for_requests_and_limits/","date":1761955835,"author":"/u/Containertester","guid":585,"unread":true,"content":"<p>We’re trying to solve the classic requests &amp; limits guessing game; instead of setting CPU/memory by gut feeling or by copying defaults (which either wastes resources or causes throttling/OOM), we started experimenting with a benchmark-driven approach: we benchmark workloads in CI/CD and derive the optimal requests/limits based on http_requests_per_second (load testing).</p><p>In our latest write-up, we share:</p><ul><li>Why manual tuning doesn’t scale for dynamic workloads</li><li>How benchmarking actual CPU/memory under realistic load helps predict good limits</li><li>How to feed those results back into Kubernetes manifests</li><li>Some gotchas around autoscaling &amp; metrics pipelines</li></ul><p>Curious if anyone here has tried a similar “shift-left” approach for resource optimization or integrated benchmarking into their pipelines and how that worked out.</p>","contentLength":817,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Steinberg, creators of VST technology and the ASIO protocol, have released the SDKs for VST 3 and ASIO as Open Source.","url":"https://www.reddit.com/r/linux/comments/1ola786/steinberg_creators_of_vst_technology_and_the_asio/","date":1761955542,"author":"/u/fenix0000000","guid":593,"unread":true,"content":"   submitted by   <a href=\"https://www.reddit.com/user/fenix0000000\"> /u/fenix0000000 </a>","contentLength":35,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Show HN: Strange Attractors","url":"https://blog.shashanktomar.com/posts/strange-attractors","date":1761953039,"author":"shashanktomar","guid":185,"unread":true,"content":"<p>A few months back, while playing around with <a target=\"_blank\" rel=\"noopener\" href=\"https://threejs.org/\">Three.js</a>, I came across something that completely derailed my plans. Strange attractors - fancy math that creates beautiful patterns. At first I thought I'd just render one and move on, but then soon I realized that this is too much fun. When complexity emerges from three simple equations, when you see something chaotic emerge into beautiful, it's hard not to waste some time. I've spent countless hours, maybe more than I'd care to admit, watching these patterns form. I realized there's something deeply satisfying about seeing order emerge from randomness. Let me show you what kept me hooked.</p><h2><a aria-hidden=\"true\" tabindex=\"-1\" href=\"https://blog.shashanktomar.com/posts/strange-attractors#the-basics-dynamical-systems-and-chaos-theory\"></a>The Basics: Dynamical Systems and Chaos Theory</h2><p>Dynamical Systems are a mathematical way to understand how things . Imagine you have a system, which\ncould be anything from the movement of planets to the growth of a population. In this system, there are rules that\ndetermine how it evolves from one moment to the next. These rules tell you what will happen next based on what is\nhappening now. Some examples are, a pendulum, the weather patterns, a flock of birds, the spread of a virus in a\npopulation (we are all too familiar with this one), and stock market.</p><p>There are two primary things to understand about this system:</p><ul><li>: This is like a big collection of all the possible states the system can be in. Each state is like a\nsnapshot of the system at a specific time. This is also called the  or the .</li><li>: These are the rules that takes one state of the system and moves it to the next state. It can be\nrepresented as a function that transforms the system from now to later.</li></ul><p>For instance, when studying population growth, a phase-space (world-state) might consist of the current population size\nand the rate of growth or decline at a specific time. The dynamics would then be derived from models of population\ndynamics, which, considering factors like birth rates, death rates, and carrying capacity of the environment, dictate\nthe changes in population size over time.</p><p>Another way of saying this is that the dynamical systems describe how things change over time, in a space of\npossibilities, governed by a set of rules. Numerous fields such as biology, physics, economics, and applied mathematics,\nstudy systems like these, focusing on the specific rules that dictate their evolution. These rules are grounded in\nrelevant theories, such as Newtonian mechanics, fluid dynamics, and mathematics of economics, among others.</p><p>There are different ways of classifying dynamical systems, and one of the most interesting is the classification into\nchaotic and non-chaotic systems. The change over time in non-chaotic systems is more deterministic as compared to\nchaotic systems which exhibit randomness and unpredictability.</p><p> is the sub branch of dynamical systems that studies chaotic systems and challenges the traditional\ndeterministic views of causality. Most of the natural systems we observe are chaotic in nature, like the weather, a drop\nof ink dissolving in water, social and economic behaviours etc. In contrast, systems like the movement of planets,\npendulums, and simple harmonic oscillators are extremely predictable and non-chaotic.</p><p>Chaos Theory deals with systems that exhibit irregular and unpredictable behavior over time, even though they follow\ndeterministic rules. Having a set of rules that govern the system, and yet exhibit randomness and unpredictability,\nmight seem a bit contradictory, but it is because the rules do not always represent the whole system. In fact, most of\nthe time, these rules are an approximation of the system and that is what leads to the unpredictability. In complex\nsystems, we do not have enough information to come up with a perfect set of rules. And by using incomplete information\nto make predictions, we introduce uncertainty, which amplifies over time, leading to the chaotic behaviour.</p><p>Chaotic systems generally have many non-linear interacting components, which we partially understand (or can partially\nobserve) and which are very sensitive to small changes. A small change in the initial conditions can lead to a\ncompletely different outcome, a phenomenon known as the . In this post, we will try to see the\nbutterfly effect in action but before that, let's talk about .</p><p>To understand Strange Attractors, let's first understand what an attractor is. As discussed earlier, dynamical systems\nare all about . During this change, the system moves through different possible states (remember the\nphase space jargon?). An attractor is a set of states towards which a system tends to settle over time, or you can say,\ntowards which it is . It's like a magnet that pulls the system towards it.</p><p>For example, think of a pendulum. When you release it, it swings back and forth, but eventually, it comes to rest at the\nbottom. The bottom is the attractor in this case. It's the state towards which the pendulum is attracted.</p><p>This happens due to the system's inherent dynamics, which govern how states in the phase space change. Here are some of\nthe reasons why different states get attracted towards attractors:</p><ul><li>: Attractors are stable states of the system, meaning that once the system reaches them, it tends to stay\nthere. This stability arises from the system's dynamics, which push it towards the attractor and keep it there.</li><li>: Many dynamical systems have dissipative forces, which cause the system to lose energy over time. This\nloss of energy leads the system to settle into a lower-energy state, which often corresponds to an attractor. This is\nwhat happens in the case of the pendulum.</li><li>: In some regions of the phase space, the system's dynamics cause trajectories to converge. This\ncontraction effect means that nearby states will tend to come closer together over time, eventually being drawn\ntowards the attractor.</li></ul><p>Some attractors have complex governing equations that can create unpredictable trajectories or behaviours. These\nnonlinear interactions can result in multiple stable states or periodic orbits, towards which the system evolves. These\ncomplex attractors are categorised as . They are called \"strange\" due to their unique\ncharacteristics.</p><ol><li>: Strange attractors often have a fractal-like structure, meaning they display intricate\npatterns that repeat at different scales. This complexity sets them apart from simpler, regular attractors.</li><li><strong>Sensitive Dependence on Initial Conditions</strong>: Systems with strange attractors are highly sensitive to their initial\nconditions. Small changes in the starting point can lead to vastly different long-term behaviors, a phenomenon known\nas the \"butterfly effect\".</li><li><strong>Unpredictable Trajectories</strong>: The trajectories on a strange attractor never repeat themselves, exhibiting\nnon-periodic motion. The system's behavior appears random and unpredictable, even though it is governed by\ndeterministic rules.</li><li><strong>Emergent Order from Chaos</strong>: Despite their chaotic nature, strange attractors exhibit a form of underlying order.\nPatterns and structures emerge from the seemingly random behavior, revealing the complex dynamics at play.</li></ol><p>You can observe most of these characteristics in the visualisation. The one which is most fascinating to observe is the\nbutterfly effect.</p><blockquote><p>A butterfly can flutter its wings over a flower in China and cause a hurricane in the Caribbean.</p></blockquote><p>One of the defining features of strange attractors is their sensitivity to initial conditions. This means that small\nchanges in the starting state of the system can lead to vastly different long-term behaviors, a phenomenon known as the\n. In chaotic systems, tiny variations in the initial conditions can amplify over time, leading to\ndrastically different outcomes.</p><p>In our visualisation, let's observe this behavior on Thomas Attractor. It is governed by the following equations:</p><p>A small change in the parameter  can lead to vastly different particle trajectories and the overall shape of the\nattractor. Change this value in the control panel and observe the butterfly effect in action.</p><p>There is another way of observing the butterfly effect in this visualisation. Change the  from  to\n in the control panel and observe how the particles move differently in the two cases. The particles\neventually get attracted to the same states but have different trajectories.</p><p>This visualization required rendering a large number of particles using Three.js. To achieve this efficiently, we used a\ntechnique called . This method handles iterative updates of particle systems directly on the GPU,\nminimizing data transfers between the CPU and GPU. It utilizes two frame buffer objects (FBOs) that alternate roles: One\nstores the current state of particles and render them on the screen, while the other calculates the next state.</p><ol><li><p><strong>Setting Up Frame Buffer Objects (FBOs):</strong> We start by creating two FBOs,  and , to hold the current and\nnext state of particles. These buffers store data such as particle positions in RGBA channels, making efficient use\nof GPU resources.</p></li><li><p><strong>Shader Programs for Particle Dynamics:</strong> The shader programs execute on the GPU and apply attractor dynamics to\neach particle. Following is the attractor function which update the particle positions based on the attractor equation.</p></li><li><p><strong>Rendering and Buffer Swapping:</strong> In each frame, the shader computes the new positions based on the attractor's\nequations and stores them in the inactive buffer. After updating, the roles of the FBOs are swapped: The previously\ninactive buffer becomes active, and vice versa.</p></li></ol><p>This combination of efficient shader calculations and the ping-pong technique allows us to render the particle system.</p><p>If you have any comments, please leave them on <strong><a target=\"_blank\" rel=\"noopener\" href=\"https://github.com/shashanktomar/blog-discussion/discussions/1\">this GitHub discussions topic</a></strong>. Sooner or later, I will integrate it with the blog. The  discussion can be found <a href=\"https://news.ycombinator.com/item?id=45777810\">here</a>.</p>","contentLength":9689,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45777810"},{"title":"S.A.R.C.A.S.M: Slightly Annoying Rubik's Cube Automatic Solving Machine","url":"https://github.com/vindar/SARCASM","date":1761951798,"author":"chris_overseas","guid":196,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45777682"},{"title":"[GoGreement] A new linter that can help enforce interface implementation and immutability","url":"https://www.reddit.com/r/golang/comments/1ol8das/gogreement_a_new_linter_that_can_help_enforce/","date":1761950330,"author":"/u/Green-Sympathy-2198","guid":582,"unread":true,"content":"<p>Hey guys! I wrote this linter mainly for myself, but I hope some of you find it useful.</p><p>I came to golang from JVM world and I was missing some things like explicit implementation declaration and immutability.</p><p>But I see gophers love their linters, so I thought I could solve this with a linter.</p><p>How does it work? You just add annotations to your types like: <code>go // @immutable type User struct { id string name string } </code></p><p>And run the linter and it will give you an error if you try to change fields like this: </p><p>I also added annotations that let you check interface implementation: <code>go // @implements io.Reader </code></p><p>This lets you check that a struct actually implements an interface without all this stuff: <code>go var _ MyInterface = (*MyStruct)(nil) </code></p><p>And many other annotations (testonly, packageonly, ...). Would love to hear what you think!</p>","contentLength":822,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Borrow checker says “No”! An error that scares me every single time!","url":"https://polymonster.co.uk/blog/borow-checker-says-no","date":1761949509,"author":"/u/__shufb","guid":605,"unread":true,"content":"<p>It’s Halloween and I have just been caught out by a spooky borrow checker error that caught me by surprise. It feels as though it is the single most time consuming issue to fix and always seems to catch me unaware. The issue in particular is “cannot borrow x immutably as it is already borrowed mutably” - it manifests itself in different ways under different circumstances, but I find myself hitting it often when refactoring. It happened again recently so I did some investigating and thought I would discuss it in more detail.</p><p>The issue last hit me when I was refactoring some code in my graphics engine <a href=\"https://github.com/polymonster/hotline\">hotline</a>, I have been creating some content on YouTube and, after a little bit of a slog to fix the issue, I recorded a video of me going through the scenario of how it occurred and some patterns to use that I have adopted in the past to get around it. You can check out the video if you are that way inclined, the rest of this post will mostly echo what is in the video, but it might be a bit easier to follow code snippets and description in text.</p><p>I have a generic graphics API, which consists of traits called <a href=\"https://github.com/polymonster/hotline/blob/master/src/gfx.rs\">gfx</a>. This is there to allow different platform backends to implement the trait; currently I have a fully implemented Direct3D12 backend and I recently began to port macOS using Metal.</p><p>The gfx backend wraps underlying graphics API primitives; in this case we are mostly concerned about  which is a command buffer. Command buffers are used to submit commands to the GPU. They do things like  or , amongst other things. For the purposes of this blog post, what the command buffer does is not really that important, just that is does , which at the starting point when the code was working is a trait method that takes an immutable self and another immutable parameter ie. <code>fn do_something(&amp;self, param: &amp;Param)</code>.</p><p>In the rest of the code base I have a higher level rendering system called . This is graphics engine code that is not platform specific but implements shared functionality. So where  is a low level abstraction layer,  implements concepts of a  that is a view of a scene that we can render from. A  has a camera that can look at the scene and is then passed to a render function, which can build a command buffer to render the scene from that camera’s perspective. The engine is designed to be multithreaded and render functions are dispatched through  systems, so a view gets passed into a render system but it is wrapped in an .</p><p>I made a small cutdown example of this code to be able to demonstrate the problem I encounter, so let’s start with the initial working version:</p><div><div><pre><code></code></pre></div></div><p>I tried to simplify it as much as possible so these snippets should compile if you copy and paste them, they won’t run thanks to  macro (which I absolutely love using, it is so handy!) but we only care about the borrow checker anyway.</p><p>All we really need to think about is that a  can  and it also gets passed in a , which is also contained as part of ‘view’. Coming from a C/C++ background I landed on my personal preference being procedural C code with context passing, so I tend to group things together into a single struct. It makes sense to me in this case and I wanted to group everything inside , and we fetch the view from elsewhere in the engine.</p><p>So the code in the snippet compiles fine and I was working with this setup for some time. I began work on macOS and it turned out that the  method needed to mutate the command buffer so that I could mutate some internal state and make the Metal graphics API behave similarly to Direct3D12. This is common for graphics API plumbing.</p><p>The specific example in this case was that in Direct3D we call a function  to bind an index buffer before we make a call to , but in Metal there is no equivalent to bind an index buffer. Instead you pass a pointer to your index buffer when calling the equivalent draw indexed. So to fix this, when we call  we can store some extra state in the command buffer so we can pass it in the later call to .</p><p>In hindsight any method on the command buffer trait that does anything, like set anything or write into the command buffer, should take a  because it is mutating the command buffer after all. In my case since I am calling through to methods on  , which is unsafe code and does not require any mutable references.</p><p>In our simplified example, in order to store, state  now needs to change and take a mutable self: <code>do_something(&amp;mut self, param: &amp;Param)</code> it should be noted that  itself was already .</p><div><div><pre><code></code></pre></div></div><p>Borrow checker now kicks in…my heart sinks. In the real code base not only did I have to modify a single call site, but I had hundreds of places where this error was happening, I made the decision here and now to make any methods that write to the command buffer also be mutable and make the mutability</p><div><div><pre><code>error[E0502]: cannot borrow `view` as immutable because it is also borrowed as mutable\n  --&gt; src/main.rs:30:28\n   |\n30 |     view.cmd.do_something(&amp;view.param);\n   |     ----     ------------  ^^^^ immutable borrow occurs here\n   |     |        |\n   |     |        mutable borrow later used by call\n   |     mutable borrow occurs here\n\nFor more information about this error, try `rustc --explain E0502`.\nerror: could not compile due to 1 previous error\n</code></pre></div></div><p>This is not the first time I have encountered this problem and I doubt it will be the last. There are a number of ways to resolve it and they aren’t too complicated. The frustrating thing is that it seems to occur always when you are doing something else and not just when you decide to refactor, so you end up having a mountain of errors to solve before you can get back to the original task. I suppose you could call it a symptom of bad design or lack of experience, but when writing code things inevitably change and bend with new requirements, and Rust throws these unexpected issues up for me more often than I find with C, and often the required refactor takes more effort as well. But that is the cost you pay, hopefully more upfront effort to get past the borrow checker means fewer nasty debugging stages later. So let’s look at some patterns to fix the issue!</p><p>The one I actually went for in this case was using . We take the  out of view so we no longer need to borrow a ‘view’ to use , and then when finished return the cmd into ‘view’. It is important to note here that  needs to derive default in order for this to work, as when we take the  in  will become </p><div><div><pre><code></code></pre></div></div><p>This approach is the simplest I could think of at the time because any existing code using  doesn’t need updating, everything stays the same and we just separate the references. In this case it was easy to derive the default for  .You need to remember to set the  back on  here, which could be a pitfall and cause unexpected behaviour if you didn’t.</p><p>If you can’t easily derive default on a struct there are some other options. If the struct is clonable or you can easily derive a clone, you can clone to achieve a similar effect.</p><div><div><pre><code></code></pre></div></div><p>Cloning might be considered a heavier operation than ‘take’ depending on the circumstances, but this method has the same benefit as the take version whereby unaffected code that is using  elsewhere doesn’t need to be changed.</p><p>Another approach would be to use  this allows for interior mutability and again we do not need to worry about default or clone.</p><div><div><pre><code></code></pre></div></div><p>We also need to update any code that ever used  and do the same. Not ideal but it allows us to get around the need for a default or clone. I have had to resort to this in other places in the code base.</p><p>There are more options; quite literally  here can help. If we make  an  then this gives us the ability to use  as the default and we can use the  approach. We can also use  and swap with . Swapping works similar to ‘take’, where we take mem and swap with the default.</p><div><div><pre><code></code></pre></div></div><p>The  approach also requires more effort as we need to now take a reference and unwrap the option and update any code that ever used  to do the same. Not ideal, but it allows us to get around the need for a default or clone, and if your type is already optional then this will fit easily.</p><p>There is one final approach that could save a lot of time, and that would be to not change the  function at all in the first place. That is to keep it as <code>do_something(&amp;self, param: &amp;Param)</code>. So how do we mutate the interior state without requiring the self to be mutable?</p><p>This can be done with  in single threaded code or  in multithreaded code. Since we already looked at  I will do an example of .</p><div><div><pre><code></code></pre></div></div><p>I decided to make the mutability explicit to the trait and that was based on how the command buffers are used in the engine, in other places I have taken other approaches favouring interior mutability. For this case a view can be dispatched in parallel with other views, but the engine is designed such that 1 thread per view and no work happens to a single view on multiple threads at the same time. Command buffers are submitted in a queue in order and dispatched on the GPU.</p><p>Here it made sense to me to avoid locking interior mutability for each time we call a method on a  and it works with the engine’s design. We lock a view at the start of a render thread, fill it with commands and then hand it back to the graphics engineer for submission to the GPU. The usage is explicit, we just needed to appease the borrow checker!</p><p>I hope you enjoyed this article, please check out my <a href=\"https://www.youtube.com/@polymonster\">YouTube channel</a> for more videos or more articles on my blog, let me know what you think and if you have any other strategies or approaches I would love to hear about them. I would also like to hear about compiler and borrow checker errors you find particularly time consuming or frustrating to deal with.</p>","contentLength":9662,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/rust/comments/1ol82h6/borrow_checker_says_no_an_error_that_scares_me/"},{"title":"What kind of debug tools are available that are cloud native?","url":"https://www.reddit.com/r/kubernetes/comments/1ol64df/what_kind_of_debug_tools_are_available_that_are/","date":1761944378,"author":"/u/lickety-split1800","guid":589,"unread":true,"content":"<p>I'm an SRE and a longtime Linux &amp; automation person, starting in the late 90s.</p><p>With the advent of apps on containers, there are fewer and fewer tools to perform debugging.</p><p>Taking a look at the types of debug tools one has used to diagnose issues.</p><ul><li>even basic tools such as find, grep, ls and others are used in debugging.</li></ul><p>The Linux OS used to be under the control of the system administrator, who would put the tools required to meet operational debugging requirements, increasingly since it is the developer that maintains the container image and none of these tools end up on the image, citing most of the time startup time as the main requirement.</p><p>Now a container is a slice of the operating system so I argue that the container base image should still be maintained by those who maintain Linux, because it's their role to have these tools to diagnose issues. That should be DevOps/SRE teams but many organisations don't see it this way.</p><p>So what tools does Kubernetes provide that fulfil the needs I've listed above?</p>","contentLength":1012,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"My Must-Have Apps Since Switching to Linux","url":"https://www.reddit.com/r/linux/comments/1ol5a1k/my_musthave_apps_since_switching_to_linux/","date":1761942274,"author":"/u/Overflow_Nuts","guid":595,"unread":true,"content":"<p>OnlyOffice → If you’re used to MS Office, the interface feels almost identical — super easy to adapt.</p><p>Brave / Zen → When I need a Chromium-based browser, I use Brave; when I need a Firefox-based one, Zen. Both are top-tier.</p><p>Okular → Opens everything from PDFs to EPUBs.</p><p>yt-dlp → Downloads videos and audio straight from the terminal — and not just from YouTube, it supports tons of platforms.</p><p>Qbittorrent → Clean, simple, and easily the best torrent client out there.</p><p>Stremio + Add-ons → The best torrent-based media player, hands down.</p><p>KeepassXC → A simple yet powerful password manager with browser integration.</p><p>LocalSend → Transfers files across all your devices locally, no internet needed.</p><p>KDE Connect → Perfect bridge between your phone and computer.</p><p>Bottles → Makes using Wine more stable and user-friendly.</p><p>Espanso → Expands text shortcuts automatically — a real time-saver.</p><p>Tmux → Lets you split your terminal and run multiple sessions at once.</p><p>Btop / ytop / glances → Displays system resource usage right from the terminal.</p><p>Fastfetch → A faster Neofetch alternative for system info.</p><p>Syncthing → Syncs your files seamlessly between devices.</p><p>Czkawka → Finds duplicate or junk files on your disk.</p><p>Mpv + Plugins → Lightweight, scriptable video player.</p><p>Input Leap → Control multiple computers with one keyboard and mouse.</p><p>Zapret → Bypasses DPI-based network restrictions.</p><p>Moonlight / Sunshine → Stream your games locally across your network.</p><p>Heroic Games Launcher → Great alternative for Epic Games.</p><p>Lutris → Customizable launcher supporting multiple game libraries.</p><p>Prism Launcher → Clean, mod- and shader-friendly Minecraft launcher.</p><p>Ente Auth → The best 2FA app I’ve tried — encrypted sync between devices.</p><p>GDU → Visual disk usage analyzer.</p><p>Newsboat → Read RSS feeds directly in the terminal.</p><p>Neovim → Fast, lightweight text editor.</p><p>Waypaper / Swaybg / Hyprpaper → Manage your wallpapers easily.</p><p>Easy Effects → Lets you tweak and filter your system’s audio.</p><p>Waybar (+ eww + rofi) → Build a fully customizable system bar.</p><p>scrcpy → The simplest way to mirror your Android screen on your PC.</p><p>Podman / Distrobox → Run another Linux environment inside a container.</p><p>Wireshark / mitmproxy → Monitor and analyze your network traffic.</p><p>Opensnitch → See which apps are making network connections.</p><p>qutebrowser → A minimalist, keyboard-driven browser.</p><p>fail2ban → The most satisfying way to troll persistent brute-forcers.</p><p>qemu + Virt-Manager → Create and manage virtual machines easily.</p><p>Waydroid → Run Android apps directly on Linux.</p><p>Lf → Terminal-based file manager.</p><p>These are the tools I’ve discovered and personally enjoy using on Linux. What about yours what are your must-have apps?</p>","contentLength":2737,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"A theoretical way to circumvent Android developer verification","url":"https://enaix.github.io/2025/10/30/developer-verification.html","date":1761942042,"author":"sleirsgoevy","guid":195,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45776269"},{"title":"Futurelock - Subtle Risk in async Rust","url":"https://rfd.shared.oxide.computer/rfd/0609","date":1761942015,"author":"/u/-Y0-","guid":606,"unread":true,"content":"<div data-lineno=\"424\"><p>Bounded channels are not really the issue here.  Even in omicron#9259, the capacity=1 channel was basically behaving as documented and as one would expect.  It woke up a sender when capacity was available, and the other senders were blocked to maintain the documented FIFO property.  However, some of the patterns that we use with bounded channels are problematic on their own and, if changed, could prevent the channel from getting caught up in a futurelock.</p></div><div data-lineno=\"426\"><p>In Omicron, we commonly use bounded channels with .  The bound is intended to cap memory usage and provide backpressure, but using the blocking  creates a second  queue: the wait queue for the channel.  Instead, we could consider using a larger capacity channel plus  and propagate failure from .</p></div><div data-lineno=\"428\"><p>As an example, when we use the actor pattern, we typically observe that there’s only one actor and potentially many clients, so there’s not much point in buffering messages  the channel.  So we use  and let clients block in .  But we could instead have  and have clients use  and propagate failure if they’re unable to send the message.  The value  here is pretty arbitrary.  You want it to be large enough to account for an expected amount of client concurrency, but not larger.  If the value is too small, you’ll wind up with spurious failures when the client could have just waited a bit longer.  If the value is too large, you can wind up queueing so much work that the actor is always behind (and clients are potentially even timing out at a higher level).  One might observe:</p></div><div data-lineno=\"430\"><div data-lineno=\"1\"><p>Channel limits, channel limits: always wrong!</p></div><div data-lineno=\"3\"><p>Some too short and some too long!</p></div></div><div data-lineno=\"434\"><p>But as with timeouts, it’s often possible to find values that work in practice.</p></div><div data-lineno=\"436\"><p>Using  is  a mitigation because this still results in the sender blocking.  It needs to be polled after the timeout expires in order to give up.  But with futurelock, it will never be polled.</p></div>","contentLength":1894,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/rust/comments/1ol566h/futurelock_subtle_risk_in_async_rust/"},{"title":"John Carmack on mutable variables","url":"https://twitter.com/id_aa_carmack/status/1983593511703474196","date":1761938789,"author":"/u/iamkeyur","guid":601,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1ol3unj/john_carmack_on_mutable_variables/"},{"title":"Write PostgreSQL functions in Go Golang example","url":"https://www.reddit.com/r/golang/comments/1ol2tqv/write_postgresql_functions_in_go_golang_example/","date":1761936351,"author":"/u/WinProfessional4958","guid":584,"unread":true,"content":"<p>It took me a while to figure this out. Go compiles the C files automatically.</p><pre><code>#include \"postgres.h\" #include \"fmgr.h\" PG_MODULE_MAGIC; extern int32 Adder(int32); PG_FUNCTION_INFO_V1(add_two); Datum add_two(PG_FUNCTION_ARGS) { int32 arg = PG_GETARG_INT32(0); PG_RETURN_INT32(Adder(arg)); } </code></pre><pre><code>package main /* #cgo CFLAGS: -DWIN32 -ID:/pg18headers -ID:/pg18headers/port/win32 #cgo LDFLAGS: -LD:/pg18lib #include \"postgres.h\" #include \"fmgr.h\" // Forward declare the C function so cgo compiles add_two.c too. extern void init_add_two(); */ import \"C\" //export Adder func Adder(a C.int32) C.int32 { return a + 3 } func main() {} </code></pre><p><code>PS D:\\C\\myextension&gt; go build -o add_two.dll -buildmode=c-shared</code></p><p>In PostgreSQL: open the query window (adjust path to your generated dynamically loaded library and header file (.dll, .h).</p><p><code>CREATE FUNCTION add_two(int4) RETURNS int4</code></p><p><code>AS 'D:/C/myextension/add_two.dll', 'add_two'</code></p>","contentLength":893,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Go vs Kotlin: Server throughput","url":"https://www.reddit.com/r/golang/comments/1ol1upp/go_vs_kotlin_server_throughput/","date":1761934095,"author":"/u/iG0tB00ts","guid":583,"unread":true,"content":"<p>Let me start off by saying I'm a big fan of Go. Go is my side love while Kotlin is my official (work-enforced) love. I recognize benchmarks do not translate to real world performance &amp; I also acknowledge this is the first benchmark I've made, so mistakes are possible.</p><p>That being said, I was recently tasked with evaluating Kotlin vs Go for a small service we're building. This service is a wrapper around Redis providing a REST API for checking the existence of a key.</p><p>With a load of 30,000 RPS in mind, I ran a benchmark using  (the workload is a list of newline separated 40chars string) and saw to my surprise Kotlin outperforming Go by ~35% RPS. Surprise because my thoughts, few online searches as well as AI prompts led me to believe Go would be the winner due to its lightweight and performant goroutines.</p><p>Go + net/http + go-redis <code>Text Thread Stats Avg Stdev Max +/- Stdev Latency 4.82ms 810.59us 38.38ms 97.05% Req/Sec 5.22k 449.62 10.29k 95.57% 105459 requests in 5.08s, 7.90MB read Non-2xx or 3xx responses: 53529 Requests/sec: 20767.19 </code> Kotlin + ktor + lettuce <code> Thread Stats Avg Stdev Max +/- Stdev Latency 3.63ms 1.66ms 52.25ms 97.24% Req/Sec 7.05k 0.94k 13.07k 92.65% 143105 requests in 5.10s, 5.67MB read Non-2xx or 3xx responses: 72138 Requests/sec: 28057.91 </code></p><p>I am in no way an expert with the Go ecosystem, so I was wondering if anyone had an explanation for the results or suggestions on improving my Go code. ```Go package main</p><p>import ( \"context\" \"net/http\" \"runtime\" \"time\"</p><pre><code>\"github.com/redis/go-redis/v9\" </code></pre><p>var ( redisClient *redis.Client )</p><p>func main() { redisClient = redis.NewClient(&amp;redis.Options{ Addr: \"localhost:6379\", Password: \"\", DB: 0, PoolSize: runtime.NumCPU() * 10, MinIdleConns: runtime.NumCPU() * 2, MaxRetries: 1, PoolTimeout: 2 * time.Second, ReadTimeout: 1 * time.Second, WriteTimeout: 1 * time.Second, }) defer redisClient.Close()</p><pre><code>mux := http.NewServeMux() mux.HandleFunc(\"/\", handleKey) server := &amp;http.Server{ Addr: \":8080\", Handler: mux, } server.ListenAndServe() // some code for quitting on exit signal </code></pre><p>// handleKey handles GET requests to /{key} func handleKey(w http.ResponseWriter, r *http.Request) { path := r.URL.Path</p><pre><code>key := path[1:] exists, _ := redisClient.Exists(context.Background(), key).Result() if exists == 0 { w.WriteHeader(http.StatusNotFound) return } </code></pre><p>Kotlin code for reference ```Kotlin // application</p><p>fun main(args: Array&lt;String&gt;) { io.ktor.server.netty.EngineMain.main(args) }</p><p>fun Application.module() { val redis = RedisClient.create(\"redis://localhost/\"); val conn = redis.connect() configureRouting(conn) }</p><p>fun Application.configureRouting(connection: StatefulRedisConnection&lt;String, String&gt;) { val api = connection.async()</p><pre><code>routing { get(\"/{key}\") { val key = call.parameters[\"key\"]!! val exists = api.exists(key).await() &gt; 0 if (exists) { call.respond(HttpStatusCode.OK) } else { call.respond(HttpStatusCode.NotFound) } } } </code></pre>","contentLength":2876,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"html/template: Why does it escape opening angle bracket?","url":"https://www.reddit.com/r/golang/comments/1ol1cyi/htmltemplate_why_does_it_escape_opening_angle/","date":1761932979,"author":"/u/cvilsmeier","guid":580,"unread":true,"content":"<div><p>Hi, html/template escapes input data, but why does it escape an angle bracket character (\"&lt;\") in the template? Here is an example:</p><pre><code>package main import ( \"fmt\" \"html/template\" \"strings\" ) func main() { text := \"&lt;{{.tag}}&gt;\" tp := template.Must(template.New(\"sample\").Parse(text)) var buf strings.Builder template.Must(nil, tp.Execute(&amp;buf, map[string]any{\"tag\": template.HTML(\"p\")})) fmt.Println(buf.String()) // Expected output: &lt;p&gt; // Actual output: &amp;lt;p&gt; } </code></pre></div>   submitted by   <a href=\"https://www.reddit.com/user/cvilsmeier\"> /u/cvilsmeier </a>","contentLength":491,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Addiction Markets","url":"https://www.thebignewsletter.com/p/addiction-markets-abolish-corporate","date":1761932575,"author":"toomuchtodo","guid":194,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45774640"},{"title":"Use DuckDB-WASM to query TB of data in browser","url":"https://lil.law.harvard.edu/blog/2025/10/24/rethinking-data-discovery-for-libraries-and-digital-humanities/","date":1761932235,"author":"mlissner","guid":193,"unread":true,"content":"<p>Libraries, digital humanities projects, and cultural heritage organizations have long had to perform a balancing act when sharing their collections online, negotiating between access and affordability. Providing robust features for data discovery, such as browsing, filtering, and search, has traditionally required dedicated computing infrastructure such as servers and databases. Ongoing server hosting, regular security and software updates, and consistent operational oversight are expensive and require skilled staff. Over years or decades, budget changes and staff turnover often strand these projects in an unmaintained or nonfunctioning state.</p><p>The alternative, static file hosting, requires minimal maintenance and reduces expenses dramatically. For example, storing gigabytes of data on Amazon S3 may cost $1/month or less. However, static hosting often diminishes the capacity for rich data discovery. Without a dynamic computing layer between the user’s web browser and the source files, data access may be restricted to brittle pre-rendered browsing hierarchies or search functionality that is impeded by client memory limits. Under such barriers, the collection’s discoverability suffers.</p><p>For years, online collection discovery has been stuck between a rock and a hard place: accept the complexity and expense required for a good user experience, or opt for simplicity and leave users to contend with the blunt limitations of a static discovery layer.</p><h2>Why We Explored a New Approach</h2><p>When LIL began thinking about how to provide discovery for the <a href=\"https://source.coop/harvard-lil/gov-data/\">Data.gov Archive</a>, we decided that building a lightweight and easily maintained access point from the beginning would be worth our team’s effort. We wanted to provide low-effort discovery with minimal impact on our resources. We also wanted to ensure that whatever path we chose would encourage, rather than impede, long-term access.</p><p>This approach builds on our recent experience when the Caselaw Access Project (CAP) hit <a href=\"https://lil.law.harvard.edu/blog/2024/03/26/transitions-for-the-caselaw-access-project/\">a transition moment</a>. At that time, we elected to switch <a href=\"http://case.law\">case.law</a> to a static site and to partner with others dedicated to open legal data to provide more feature-rich access.</p><p>CAP includes some 11 TB of data; the Data.gov Archive represents nearly 18 TB, with the catalog metadata alone accounting for about 1 GB. Manually browsing the archive data in its repository, even for a user who knows what she’s looking for, is laborious and time-consuming. Thus we faced a challenge. Could we enable dynamic, scalable discovery of the Data.gov Archive while enjoying the frugality, simplicity, and maintainability of static hosting?</p><h2>Our Experiment: Rich Discovery, No Server Required</h2><p>Recent advancements in client-side data analysis led us to try something new. Tools like <a href=\"https://duckdb.org/docs/api/wasm/\">DuckDB-Wasm</a>, <a href=\"https://phiresky.github.io/blog/2021/hosting-sqlite-databases-on-github-pages/\">sql.js-httpvfs</a>, and <a href=\"https://protomaps.com\">Protomaps</a>, powered by standards such as WebAssembly, web workers, and HTTP range requests, allow users to efficiently query large remote datasets in the browser. Rather than downloading a 2 GB data file into memory, these tools can incrementally retrieve only the relevant parts of the file and process query results locally.</p><p>We developed Data.gov Archive Search on the same model. Here’s how it works:</p><ul><li> We store Data.gov Archive catalog metadata as sorted, compressed Parquet files on Source.coop, taking advantage of performant static file hosting.</li><li> Our client-side web application loads DuckDB-Wasm, a fully functional database engine running inside the user’s browser.</li><li> When a user navigates to a resource or submits a search, our DuckDB-Wasm client executes a targeted retrieval of the data needed to fulfill the request. No dedicated server is required; queries run entirely in the browser.</li></ul><p>This experiment has not been without obstacles. Getting good performance out of this model demands careful data engineering, and the large DuckDB-Wasm binary imposes a considerable latency cost. As of this writing, we’re continuing to explore speedy alternatives like <a href=\"https://github.com/hyparam/hyparquet\">hyparquet</a> and <a href=\"https://idl.uw.edu/arquero\">Arquero</a> to further improve performance.</p><p>Still, we’re pleased with the result: an inexpensive, low-maintenance static discovery platform that allows users to browse, search, and filter Data.gov Archive records entirely in the browser.</p><h2>Why This Matters for Libraries, Digital Humanities Projects, and Beyond</h2><p>This new pattern offers a compelling model for libraries, academic archives, and DH projects of all sizes:</p><ul><li> By shifting from an expensive server to lower cost static storage, projects can sustainably offer their users access to data.</li><li><strong>Reduced technical overhead:</strong> With no dedicated backend server, security risks are reduced, no patching or upgrades are needed, and crashing servers are not a concern.</li><li> Projects can be set up with care, but without demanding constant attention. Organizations can be more confident that their archive and discovery interfaces remain usable and accessible, even as staffing or funding changes over time.</li></ul><p>Knowing that we are not the only group interested in approaching access in this way, we’re sharing our generalized learnings. We see a few ways forward for others in the knowledge and information world:</p><ul><li> If your organization has large, relatively static datasets, consider experimenting with a browser-based search tool using static hosting.</li><li> Template applications, workflows, and lessons learned can help this new pattern gain adoption and maturity across the community.</li></ul><p>This project is still evolving, and we invite others—particularly those in libraries and digital cultural heritage—to explore these possibilities with us. We’re committed to open sharing as we refine our tools, and we welcome collaboration or feedback at <a href=\"mailto:lil@law.harvard.edu\">lil@law.harvard.edu</a>.</p>","contentLength":5646,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45774571"},{"title":"Just use a button","url":"https://gomakethings.com/just-use-a-button/","date":1761929962,"author":"moebrowne","guid":224,"unread":true,"content":"<p>One of the weirdest “debates” I seem to perpetually have with framework-enthusiastic developers is whether or not a  is “just as good” as a .</p><p> it’s not. Let’s dig in.</p><p>Among the React crowd, and also among people who seem to enjoy HTMX, I see a lot this…</p><div><pre><code data-lang=\"html\">\n\tOpen Modal\n</code></pre></div><div><pre><code data-lang=\"js\"></code></pre></div><ol><li>This element does not announce itself as an interactive element to screen reader users.</li><li>You can’t focus on a  with a keyboard.</li><li>The event only fires on , not when the  or  keys are pressed (again, keyboard users).</li></ol><p>I’ve had arguments with <em>a very prominent React thought leader whose name starts with R</em> who insisted that using a  was “more accessible” than using a , and that Twitter made the right decision in using this pattern in their app.</p><p>It’s wrong. It’s all wrong.</p><p>Many HTML elements have  that tell assistive tech like screen readers what they do.</p><p>The  element is one of them. It has an implicit  of , which tells screen reader users it can be interacted with and will trigger some type of behavior in the app.</p><p>The HTML  attribute can be used to add or modify the role of an element. And so, folks like React Ry–thought-leader-guy will say stuff like (I’m paraphrasing)…</p><blockquote><p>That attribute exists for a reason. You can add  to a  to give it the correct semantics.</p></blockquote><p>OK, that addresses one issue.</p><p>That role doesn’t affect focusability (or lack thereof) or keyboard behavior. Visually impaired users and people who navigate with a keyboard still can’t use it.</p><p>“No worries!” they say. “We can fix that, too!”</p><p>You can make the element focusable with the  attribute.</p><div><pre><code data-lang=\"html\">\n\tOpen Modal\n</code></pre></div><p>You , though! Seriously, just don’t fuck with focus order.</p><p>It’s way too easy to go down this path and then fuck it up and have folks jumping all over the page instead of navigating through in the normal and expected order.</p><p>And again, still no keyboard interactivity.</p><p>But don’t fear! You can add that, too. You just need to listen for all  events, and then filter them out by  so that you only run your code if the  or  keys were pressed (the latter means checking for a literal space: ).</p><p>That can’t run on the element, either. You’ve got to attach that even to the  and figure out which element has focus.</p><div><pre><code data-lang=\"js\"></code></pre></div><p>So um… ok, I guess it is technically a fix, but…</p><h2>You’ve just recreated all of the functionality a  gives you for free</h2><p>Seriously, WTF would you do that?!?</p><p>All of these hoops to write this HTML…</p><div><pre><code data-lang=\"html\">\n\tOpen Modal\n</code></pre></div><p>When you could write this HTML instead…</p><div><pre><code data-lang=\"html\">\n\tOpen Modal\n</code></pre></div><ol><li>Has the correct  implicitly.</li><li>Is automatically focusable.</li><li>Fires a  event in response to  and  presses when it has focus.</li></ol><p>Look, I’m a lazy developer.</p><p>And I suspect, if you’re someone who loves tools like React, you probably are, too. It’s cool, I get it! The best code is the code you didn’t write and all that.</p><p>Use the correct element for the job, and avoid writing a bunch of extra code!</p>","contentLength":2834,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45774182"},{"title":"Futurelock: A subtle risk in async Rust","url":"https://rfd.shared.oxide.computer/rfd/0609","date":1761929366,"author":"bcantrill","guid":192,"unread":true,"content":"<div data-lineno=\"424\"><p>Bounded channels are not really the issue here.  Even in omicron#9259, the capacity=1 channel was basically behaving as documented and as one would expect.  It woke up a sender when capacity was available, and the other senders were blocked to maintain the documented FIFO property.  However, some of the patterns that we use with bounded channels are problematic on their own and, if changed, could prevent the channel from getting caught up in a futurelock.</p></div><div data-lineno=\"426\"><p>In Omicron, we commonly use bounded channels with .  The bound is intended to cap memory usage and provide backpressure, but using the blocking  creates a second  queue: the wait queue for the channel.  Instead, we could consider using a larger capacity channel plus  and propagate failure from .</p></div><div data-lineno=\"428\"><p>As an example, when we use the actor pattern, we typically observe that there’s only one actor and potentially many clients, so there’s not much point in buffering messages  the channel.  So we use  and let clients block in .  But we could instead have  and have clients use  and propagate failure if they’re unable to send the message.  The value  here is pretty arbitrary.  You want it to be large enough to account for an expected amount of client concurrency, but not larger.  If the value is too small, you’ll wind up with spurious failures when the client could have just waited a bit longer.  If the value is too large, you can wind up queueing so much work that the actor is always behind (and clients are potentially even timing out at a higher level).  One might observe:</p></div><div data-lineno=\"430\"><div data-lineno=\"1\"><p>Channel limits, channel limits: always wrong!</p></div><div data-lineno=\"3\"><p>Some too short and some too long!</p></div></div><div data-lineno=\"434\"><p>But as with timeouts, it’s often possible to find values that work in practice.</p></div><div data-lineno=\"436\"><p>Using  is  a mitigation because this still results in the sender blocking.  It needs to be polled after the timeout expires in order to give up.  But with futurelock, it will never be polled.</p></div>","contentLength":1894,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45774086"},{"title":"Another European agency shifts off US Tech as digital sovereignty gains steam","url":"https://www.zdnet.com/article/another-european-agency-ditches-big-tech-as-digital-sovereignty-movement-gains-steam/","date":1761928762,"author":"CrankyBear","guid":223,"unread":true,"content":"<ul><li>Austria's Ministry of Economy has migrated to a Nextcloud platform.</li><li>It's the latest move in a European trend to shift away from Big Tech.</li><li>European governments and agencies want to control sensitive data.</li></ul><p>This shift away from proprietary, foreign-owned cloud services, such as <a href=\"https://www.zdnet.com/article/how-you-can-get-microsoft-365-formerly-office-for-free-3-easy-ways/\">Microsoft 365</a>, to an <a href=\"https://www.zdnet.com/article/what-is-open-source-and-how-does-it-benefit-you/\">open-source</a>, European-based cloud service aligns with a growing trend among European governments and agencies. They want control over sensitive data and to declare their independence from US-based tech providers.&nbsp;</p><p>European companies are encouraging this trend. Many of them have joined forces in the newly created non-profit foundation, the EuroStack Initiative. This foundation's goal is \" to organize action, not just talk, around the pillars of the initiative: <a href=\"https://www.linkedin.com/posts/euro-stack_foundation-press-release-activity-7389635091049840641-J3gZ?utm_source=share&amp;utm_medium=member_desktop&amp;rcm=ACoAAAAAKH4BBvA-ZwpVFbaZDTqwLgneEpGsrHQ\" target=\"_blank\" rel=\"noopener nofollow\">Buy European, Sell European, Fund European</a>.\"&nbsp;</p><p>What's the motive behind these moves away from proprietary tech? Well, in Austria's case, Florian Zinnagl, CISO of the Ministry of Economy, Energy, and Tourism (BMWET), explained, \"We carry responsibility for a large amount of sensitive data -- from employees, companies, and citizens. As a public institution, we take this responsibility very seriously. That's why we view it critically to rely on cloud solutions from non-European corporations for processing this information.\"</p><p>All of these organizations aim to keep data storage and processing within national or European borders to enhance security, comply with privacy laws such as the <a href=\"https://www.zdnet.com/article/gdpr-an-executive-guide-to-what-you-need-to-know/\">EU's General Data Protection Regulation (GDPR)</a>, and mitigate risks from potential commercial and foreign government surveillance.&nbsp;</p><p>Open-source software is seen as combining the virtues of faster development and better security, while providing companies and governments with more control, as general manager Thierry Carrez of the <a href=\"https://openinfra.org/\" target=\"_blank\" rel=\"noopener nofollow\">OpenInfra Foundation</a> recently suggested: \"Open infrastructure allows nations and organizations to maintain control over their applications, their data, and their destiny while benefiting from global collaboration.\" &nbsp;</p><p>While the US may not like it, with NextCloud's help, BMWET completed its migration in just four months. Although BMWET had already begun adopting Microsoft 365 and <a href=\"https://www.zdnet.com/article/microsoft-copilot-is-taking-over-teams-heres-how-ai-will-shape-your-daily-workflow/\">Teams</a>&nbsp;before the project's start, the shift was still considered a success. That's because instead of reversing its path, the ministry implemented a hybrid architecture: Nextcloud handles internal collaboration and secure data management, while Teams remains available for external meetings.</p><p>The project emphasized integration with existing workflows, including seamless integration with Outlook email and calendar via Sendent's Outlook app. This approach minimized disruption and ensured user acceptance. However, not all migrations progress so well.&nbsp;</p><p>For example, in Austria, the <a href=\"https://www.derstandard.de/story/3000000293383/prozentzeichen-statt-bundesadler-wie-die-justiz-ihre-it-umstellt\" target=\"_blank\" rel=\"noopener nofollow\">Ministry of Justice decided to replace Office with LibreOffice</a>. Yet the transition has run into trouble. It appears that the move of 20,000 desktops, which was prompted by a desire to reduce spending on Microsoft licenses, has been, as one person reported, an \"unprofessional, rushed operation.\" Some offices are still on Office, others on LibreOffice, and they're running into incompatible document format problems and misfires in e-mail systems.&nbsp;</p><p>The moral of the story is that any switch from one software suite to another requires careful handling by the IT department and helpdesk staff. Otherwise, you end up with unhappy users.</p><p>That said, BMWET's bold shift to Nextcloud appears to have gone well. This initiative demonstrates that adopting sovereign cloud solutions can be practical, user-friendly, and rapid in the public sector. However, as Austria's Justice Ministry experience has shown, simply shifting to an open-source approach without careful planning can get in the way of getting work done.&nbsp;</p>","contentLength":3746,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45773974"},{"title":"C3 0.7.7 Vector ABI changes, RISC-V improvements and more","url":"https://c3-lang.org/blog/c3-language-at-0-7-7-vector-abi,-riscv-improvements-and-more/","date":1761928654,"author":"/u/Nuoji","guid":597,"unread":true,"content":"<p>0.7.7 is a major advance in C3 usability with vector ABI changes. It also contains several small quality-of-life additions, such as the ability to splat structs into an initializer, and implicit subscript dereferencing. Fairly few bugs were discovered during this development cycle, which is why the fixed bugs are unusually low.</p><p>Let’s look at what 0.7.7 brings in more detail:</p><p>The most significant change in this release is the ABI change for vectors, which now store and pass vectors as arrays in function calls and structs. While vectors still use SIMD, their equality to arrays on the ABI level means that C graphical libraries will directly match vector types.</p><p>Where before you needed to work with C structs defining vectors and then converting them to SIMD vectors for actual computation, it now works out of the box. Another problem with vectors prior to 0.7.7 was their space and alignment requirements over structs. From 0.7.7 alignment matches that of structs and arrays, making them extremely convenient to work with.</p><p>For cases where SIMD vectors are actually expected, it’s possible to create distinct types using  with a new  attribute to exactly match standard C SIMD vectors, e.g. <code dir=\"auto\">typedef V4si = int[&lt;4&gt;] @simd;</code>. This then exactly matches the corresponding C SIMD type.</p><p>This makes it easier than ever to use SIMD with C3.</p><div><figure><pre data-language=\"c3\"><code></code></pre></figure></div><h2>Struct initializer splats</h2><p>This feature enables using the splat operator  to give a designated initializer default values that are overridden by the following arguments.</p><div><figure><pre data-language=\"c3\"><code></code></pre></figure></div><p>When passing arrays or lists by reference, the  operator tend to behave in an undesirable way, dereferencing the pointer instead of the underlying array/list:</p><div><figure><pre data-language=\"c3\"><code></code></pre></figure></div><p>Subscript deref addresses this. Using  will dereference :</p><div><figure><pre data-language=\"c3\"><code></code></pre></figure></div><p>This is helpful when writing macros and such that will want to accept both elements by reference and by value:</p><div><figure><pre data-language=\"c3\"><code></code></pre></figure></div><p>A new feature for  is to allow creating a type with a specific alignment without wrapping it in a struct. We may, for example, create an integer that is 16 bit aligned using <code dir=\"auto\">typedef Int2 = int @align(2);</code>. This is an alternative way to safely work with references to under-aligned members in packed structs.</p><div><figure><pre data-language=\"c3\"><code></code></pre></figure></div><p>, ,  and  macros are added to modify strings at compile time efficiently for certain macro manipulation at compile time.</p><div><figure><pre data-language=\"c3\"><code></code></pre></figure></div><h2>Small but important changes</h2><p>Aliases that refer to  variables must themselves have local visibility.  is renamed  as it was frequently misunderstood. Generic inference now works better in initializers. For slices with the  syntax, it’s now possible to have the end index be one less than the starting index, so that zero size slices can be expressed with the  syntax as well.</p><p>This release significantly strengthens C3C’s cross-platform capabilities, particularly for RISC-V architecture support. It’s now possible to set individual CPU features using , e.g. . For RISC-V,  has been added, as well as renaming the RISC-V abi flag to the more correct .</p><p>The sorting macros accidentally only took non-slices by value, which would work in some cases but not in others. This has been fixed, but might mean that some code needs to update as well. TcpSocketPair was added to the tcp module to create a bidirectional local socket pair, and using sockets on Windows should now implicitly initialize the underlying socket subsystem.</p><p>0.7.7 has only about 11 fixes, which reflects the relatively few bugs encountered in the 0.7.7 cycle. There are outstanding bugs on the inline asm, which has a significant update planned. The most important fix is patching a regression for MacOS which prevented backtrace printing.</p><p>With the updated Vector ABI and the change from  to  there are a lot of vendor libraries that will need a refresh. There is also a new matrix library in development that hopefully might get included in the next release. There is more functionality to add for fine-tuning processor capabilities for both RISC-V, but also AArch64. There have also been requests for 32-bit Arm support, but the lack of CI tests for different Arm processors is blocking it at the moment.</p><p>This release wouldn’t have been possible without the C3 community. I’d like to extend a deep thank you to all who have contributed, both through filed issues, PRs and just plain discussions.</p><p>Have questions? Come and chat with us on <a href=\"https://discord.gg/qN76R87\">Discord</a>.</p><p>Discuss this article on <a href=\"https://www.reddit.com/r/programming/comments/1okzgsu/c3_077_vector_abi_changes_riscv_improvements_and/?utm_source=share&amp;utm_medium=web3x&amp;utm_name=web3xcss&amp;utm_term=1&amp;utm_content=share_button\">Reddit</a>.</p>","contentLength":4297,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1okzgsu/c3_077_vector_abi_changes_riscv_improvements_and/"},{"title":"Project goals for 2025H2 | Rust Blog","url":"https://blog.rust-lang.org/2025/10/28/project-goals-2025h2/","date":1761927825,"author":"/u/Kobzol","guid":608,"unread":true,"content":"<p>On Sep 9, we merged <a href=\"https://github.com/rust-lang/rfcs/pull/3849\">RFC 3849</a>, declaring our goals for the \"second half\" of 2025H2 -- well, the last 3 months, at least, since \"yours truly\" ran a bit behind getting the goals program organized.</p><p>In prior goals programs, we had a few major flagship goals, but since many of these goals were multi-year programs, it was hard to see what progress had been made. This time we decided to organize things a bit differently. We established four flagship , each of which covers a number of more specific goals. These themes cover the goals we expect to be the most impactful and constitute our major focus as a Project for the remainder of the year. The four themes identified in the RFC are as follows:</p><ul><li>, making it possible to create user-defined smart pointers that are as ergonomic as Rust's built-in references .</li><li><strong>Unblocking dormant traits</strong>, extending the core capabilities of Rust's trait system to unblock long-desired features for language interop, lending iteration, and more.</li><li><strong>Flexible, fast(er) compilation</strong>, making it faster to build Rust programs and improving support for specialized build scenarios like embedded usage and sanitizers.</li><li>, making higher-level usage patterns in Rust easier.</li></ul><p>One of Rust's core value propositions is that it's a \"library-based language\"—libraries can build abstractions that feel built-in to the language even when they're not. Smart pointer types like  and  are prime examples, implemented purely in the standard library yet feeling like native language features. However, Rust's built-in reference types ( and ) have special capabilities that user-defined smart pointers cannot replicate. This creates a \"second-class citizen\" problem where custom pointer types can't provide the same ergonomic experience as built-in references.</p><p>The \"Beyond the \" initiative aims to share the special capabilities of , allowing library authors to create smart pointers that are truly indistinguishable from built-in references in terms of syntax and ergonomics. This will enable more ergonomic smart pointers for use in cross-language interop (e.g., references to objects in other languages like C++ or Python) and for low-level projects like Rust for Linux that use smart pointers to express particular data structures.</p><h3><a href=\"https://blog.rust-lang.org/2025/10/28/project-goals-2025h2/#unblocking-dormant-traits\" aria-hidden=\"true\"></a>\n\"Unblocking dormant traits\"</h3><p>Rust's trait system is one of its most powerful features, but it has a number of longstanding limitations that are preventing us from adopting new patterns. The goals in this category unblock a number of new capabilities:</p><ul><li><a href=\"https://rust-lang.github.io/rust-project-goals/2025h2/./polonius.html\">Polonius</a> will enable new borrowing patterns, and in particular <a href=\"https://github.com/rust-lang/rust/issues/92985\">unblock \"lending iterators\"</a>. Over the last few goal periods, we have identified an \"alpha\" version of Polonius that addresses the most important cases while being relatively simple and optimizable. Our goal for 2025H2 is to implement this algorithm in a form that is ready for stabilization in 2026.</li><li>The <a href=\"https://rust-lang.github.io/rust-project-goals/2025h2/./next-solver.html\">next-generation trait solver</a> is a refactored trait solver that unblocks better support for numerous language features (implied bounds, negative impls, the list goes on) in addition to closing a number of existing bugs and sources of unsoundness. Over the last few goal periods, the trait solver went from being an early prototype to being in production use for coherence checking. The goal for 2025H2 is to prepare it for stabilization.</li><li>The work on <a href=\"https://rust-lang.github.io/rust-project-goals/2025h2/./evolving-traits.html\">evolving trait hierarchies</a> will make it possible to refactor some parts of an existing trait into a new supertrait so they can be used on their own. This unblocks a number of features where the existing trait is insufficiently general, in particular stabilizing support for custom receiver types, a prior Project goal that wound up blocked on this refactoring. This will also make it safer to provide stable traits in the standard library while preserving the ability to evolve them in the future.</li><li>The work to <a href=\"https://rust-lang.github.io/rust-project-goals/2025h2/./scalable-vectors.html\">expand Rust's  hierarchy</a> will permit us to express types that are neither  nor , such as extern types (which have no size) or Arm's Scalable Vector Extension (which have a size that is known at runtime but not at compilation time). This goal builds on <a href=\"https://github.com/rust-lang/rfcs/pull/3729\">RFC #3729</a> and <a href=\"https://github.com/rust-lang/rfcs/pull/3838\">RFC #3838</a>, authored in previous Project goal periods.</li><li><a href=\"https://rust-lang.github.io/rust-project-goals/2025h2/./in-place-initialization.html\">In-place initialization</a> allows creating structs and values that are tied to a particular place in memory. While useful directly for projects doing advanced C interop, it also unblocks expanding  to support  and  methods, as compiling such methods requires the ability for the callee to return a future whose size is not known to the caller.</li></ul><p>The \"Flexible, fast(er) compilation\" initiative focuses on improving Rust's build system to better serve both specialized use cases and everyday development workflows:</p><p>People generally start using Rust for foundational use cases, where the requirements for performance or reliability make it an obvious choice. But once they get used to it, they often find themselves turning to Rust even for higher-level use cases, like scripting, web services, or even GUI applications. Rust is often \"surprisingly tolerable\" for these high-level use cases -- except for some specific pain points that, while they impact everyone using Rust, hit these use cases particularly hard. We plan two flagship goals this period in this area:</p><ul><li>We aim to stabilize <a href=\"https://rust-lang.github.io/rust-project-goals/2025h2/./cargo-script.html\">cargo script</a>, a feature that allows single-file Rust programs that embed their dependencies, making it much easier to write small utilities, share code examples, and create reproducible bug reports without the overhead of full Cargo projects.</li><li>We aim to finalize the design of <a href=\"https://rust-lang.github.io/rust-project-goals/2025h2/./ergonomic-rc.html\">ergonomic ref-counting</a> and to finalize the experimental impl feature so it is ready for beta testing. Ergonomic ref-counting makes it less cumbersome to work with ref-counted types like  and , particularly in closures.</li></ul><p>For the remainder of 2025 you can expect monthly blog posts covering the major progress on the Project goals.</p><p>Looking at the broader picture, we have now done three iterations of the goals program, and we want to judge how it should be run going forward. To start, Nandini Sharma from CMU has been conducting interviews with various Project members to help us see what's working with the goals program and what could be improved. We expect to spend some time discussing what we should do and to be launching the next iteration of the goals program next year. Whatever form that winds up taking, Tomas Sedovic, the <a href=\"https://blog.rust-lang.org/inside-rust/2025/06/30/program-management-update-2025-06/\">Rust program manager</a> hired by the Leadership Council, will join me in running the program.</p>","contentLength":6396,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/rust/comments/1okz3ti/project_goals_for_2025h2_rust_blog/"},{"title":"AI scrapers request commented scripts","url":"https://cryptography.dog/blog/AI-scrapers-request-commented-scripts/","date":1761925459,"author":"ColinWright","guid":222,"unread":true,"content":"<!DOCTYPE html>","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45773347"},{"title":"Ask HN: Who uses open LLMs and coding assistants locally? Share setup and laptop","url":"https://news.ycombinator.com/item?id=45771870","date":1761917995,"author":"threeturn","guid":221,"unread":true,"content":"Dear Hackers,\nI’m interested in your real-world workflows for using open-source LLMs and open-source coding assistants on your laptop (not just cloud/enterprise SaaS). Specifically:<p>Which model(s) are you running (e.g., Ollama, LM Studio, or others) and which open-source coding assistant/integration (for example, a VS Code plugin) you’re using?</p><p>What laptop hardware do you have (CPU, GPU/NPU, memory, whether discrete GPU or integrated, OS) and how it performs for your workflow?</p><p>What kinds of tasks you use it for (code completion, refactoring, debugging, code review) and how reliable it is (what works well / where it falls short).</p><p>I'm conducting my own investigation, which I will be happy to share as well when over.</p>","contentLength":723,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45771870"},{"title":"Attention lapses due to sleep deprivation due to flushing fluid from brain","url":"https://news.mit.edu/2025/your-brain-without-sleep-1029","date":1761916463,"author":"gmays","guid":220,"unread":true,"content":"<p>Nearly everyone has experienced it: After a night of poor sleep, you don’t feel as alert as you should. Your brain might seem foggy, and your mind drifts off when you should be paying attention.</p><p>A new study from MIT reveals what happens inside the brain as these momentary failures of attention occur. The scientists found that during these lapses, a wave of cerebrospinal fluid (CSF) flows out of the brain — a process that typically occurs during sleep and helps to wash away waste products that have built up during the day. This flushing is believed to be necessary for maintaining a healthy, normally functioning brain.</p><p>When a person is sleep-deprived, it appears that their body attempts to catch up on this cleansing process by initiating pulses of CSF flow. However, this comes at a cost of dramatically impaired attention.</p><p>“If you don’t sleep, the CSF waves start to intrude into wakefulness where normally you wouldn’t see them. However, they come with an attentional tradeoff, where attention fails during the moments that you have this wave of fluid flow,” says Laura Lewis, the Athinoula A. Martinos Associate Professor of Electrical Engineering and Computer Science, a member of MIT’s Institute for Medical Engineering and Science and the Research Laboratory of Electronics, and an associate member of the Picower Institute for Learning and Memory.</p><p>Lewis is the senior author of the study, which <a href=\"https://www.nature.com/articles/s41593-025-02098-8\" target=\"_blank\">appears today</a> in . MIT visiting graduate student Zinong Yang&nbsp;is the lead author of the paper.</p><p>Although sleep is a critical biological process, it’s not known exactly why it is so important. It appears to be essential for maintaining alertness, and it has been well-documented that sleep deprivation leads to impairments of attention and other cognitive functions.</p><p>During sleep, the cerebrospinal fluid that cushions the brain helps to remove waste that has built up during the day. In a 2019&nbsp;<a href=\"https://www.science.org/doi/10.1126/science.aax5440\" target=\"_blank\">study</a>, Lewis and colleagues showed that CSF flow during sleep follows a rhythmic pattern in and out of the brain, and that these flows are linked to changes in brain waves during sleep.</p><p>That finding led Lewis to wonder what might happen to CSF flow after sleep deprivation. To explore that question, she and her colleagues recruited 26 volunteers who were tested twice — once following a night of sleep deprivation in the lab, and once when they were well-rested.</p><p>In the morning, the researchers monitored several different measures of brain and body function as the participants performed a task that is commonly used to evaluate the effects of sleep deprivation.</p><p>During the task, each participant wore an electroencephalogram (EEG) cap that could record brain waves while they were also in a functional magnetic resonance imaging (fMRI) scanner. The researchers used a modified version of fMRI that allowed them to measure not only blood oxygenation in the brain, but also the flow of CSF in and out of the brain. They also measured each subject’s heart rate, breathing rate, and pupil diameter.</p><p>The participants performed two attentional tasks while in the fMRI scanner, one visual and one auditory. For the visual task, they had to look at a screen that had a fixed cross. At random intervals, the cross would turn into a square, and the participants were told to press a button whenever they saw this happen. For the auditory task, they would hear a beep instead of seeing a visual transformation.</p><p>Sleep-deprived participants performed much worse than well-rested participants on these tasks, as expected. Their response times were slower, and for some of the stimuli, the participants never registered the change at all.</p><p>During these momentary lapses of attention, the researchers identified several physiological changes that occurred at the same time. Most significantly, they found a flux of CSF out of the brain just as those lapses occurred. After each lapse, CSF flowed back into the brain.</p><p>“The results are suggesting that at the moment that attention fails, this fluid is actually being expelled outward away from the brain. And when attention recovers, it’s drawn back in,” Lewis says.</p><p>The researchers hypothesize that when the brain is sleep-deprived, it begins to compensate for the loss of the cleansing that normally occurs during sleep, even though these pulses of CSF flow&nbsp;come with the cost of attention loss.</p><p>“One way to think about those events is because your brain is so in need of sleep, it tries its best to enter into a sleep-like state to restore some cognitive functions,” Yang says. “Your brain’s fluid system is trying to restore function by pushing the brain to iterate between high-attention and high-flow states.”</p><p>The researchers also found several other physiological events linked to attentional lapses, including decreases in breathing and heart rate, along with constriction of the pupils. They found that pupil constriction began about 12 seconds before CSF flowed out of the brain, and pupils dilated again after the attentional lapse.</p><p>“What’s interesting is it seems like this isn’t just a phenomenon in the brain, it’s also a body-wide event. It suggests that there’s a tight coordination of these systems, where when your attention fails, you might feel it perceptually and psychologically, but it’s also reflecting an event that’s happening throughout the brain and body,” Lewis says.</p><p>This close linkage between disparate events may indicate that there is a single circuit that controls both attention and bodily functions such as fluid flow, heart rate, and arousal, according to the researchers.</p><p>“These results suggest to us that there’s a unified circuit that’s governing both what we think of as very high-level functions of the brain — our attention, our ability to perceive and respond to the world — and then also really basic fundamental physiological processes like fluid dynamics of the brain, brain-wide blood flow, and blood vessel constriction,” Lewis says.</p><p>In this study, the researchers did not explore what circuit might be controlling this switching, but one good candidate, they say, is the noradrenergic system. Recent research has shown that this system, which regulates many cognitive and bodily functions through the neurotransmitter norepinephrine, oscillates during normal sleep.</p><p>The research was funded by the National Institutes of Health, a National Defense Science and Engineering Graduate Research Fellowship, a NAWA Fellowship, a McKnight Scholar Award, a Sloan Fellowship, a Pew Biomedical Scholar Award, a One Mind Rising Star Award, and the Simons Collaboration on Plasticity in the Aging Brain.</p>","contentLength":6622,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45771636"},{"title":"How OpenAI uses complex and circular deals to fuel its multibillion-dollar rise","url":"https://www.nytimes.com/interactive/2025/10/31/technology/openai-fundraising-deals.html","date":1761915826,"author":"reaperducer","guid":219,"unread":true,"content":"<p>Sam Altman, the chief executive of OpenAI, says that technological revolutions are driven by more than just technology. They are also driven, he argues, by new ways of paying for them.</p><p>“There is always a lot of focus on technological innovation. What really drives a lot of progress is when people also figure out how to innovate on the financial model,” he recently said at the site of a data center that OpenAI is building in Abilene, Texas.</p><p>Over the last several years, Mr. Altman’s company has found unusual and creative ways of paying for the computing power needed to fuel its ambitions.</p><p>Many of the deals OpenAI has struck — with chipmakers, cloud computing companies and others — are strangely circular. OpenAI receives billions from tech companies before sending those billions back to the same companies to pay for computing power and other services.</p><p>Industry experts and financial analysts have welcomed the start-up’s creativity. But these unorthodox arrangements have also fueled concerns that OpenAI is helping to inflate a potential financial bubble as it builds what is still a highly speculative technology.</p><p>Here are unusual financial agreements helping to drive the ambitions of OpenAI, the poster child of the artificial intelligence revolution.</p><figure></figure><p>From 2019 through 2023, Microsoft was OpenAI’s primary investor. The tech giant pumped more than  into the start-up. Then OpenAI funneled most of those billions back into Microsoft, buying  needed to fuel the development of new A.I. technologies.</p><p>(The New York Times has <a href=\"https://www.nytimes.com/2023/12/27/business/media/new-york-times-open-ai-microsoft-lawsuit.html\">sued</a> OpenAI and Microsoft, claiming copyright infringement of news content related to A.I. systems. The two companies have denied the suit’s claims.)</p><figure></figure><p>By the summer of last year, OpenAI could not get all the computing power it wanted from Microsoft. So it started signing cloud computing contracts with other companies, including Oracle and little-known start-ups with names like CoreWeave.</p><p>Across three different deals signed this year, OpenAI agreed to pay CoreWeave, a company that builds A.I. data centers, more than  for computing power. As part of these agreements, OpenAI received  in CoreWeave stock, which could ultimately help pay for this computing power.</p><figure></figure><p>OpenAI also struggled to get the additional investment dollars it wanted from Microsoft. So, it turned to other investors. Earlier this year, the Japanese conglomerate SoftBank led a  investment in OpenAI.</p><p>At the same time, OpenAI has been working with various companies to build its own computing data centers, rather than rely on cloud computing deals. This also includes SoftBank, which is known for highly speculative technological bets that don’t always pay off. The company is raising  to help OpenAI build data centers in Texas and Ohio.</p><figure></figure><p>Similarly, Oracle, a software and cloud computing giant, has agreed to spend  building new data centers for OpenAI in Texas, New Mexico, Michigan and Wisconsin. OpenAI will then pay Oracle roughly the same amount to use these  over the next several years.</p><figure></figure><p>The United Arab Emirates was part of an OpenAI’s fund-raising round in October 2024. Now, G42, a firm with close ties to the Emirati government, is building a roughly  for OpenAI in the Emirates.</p><figure></figure><p>Last month, Nvidia announced that it intended to invest  in OpenAI over the next several years. This could help OpenAI pay for its new data centers. As OpenAI buys or leases specialized chips from Nvidia, Nvidia will pump billions back into OpenAI.</p><figure></figure><p>Two weeks later, OpenAI signed an agreement with AMD that allows OpenAI to buy up to  in the chipmaker at a penny per share. That translates to roughly a 10 percent stake in the company. This stock could supply OpenAI with additional capital as it works to build new data centers.</p><p>OpenAI pulls in billions of dollars in revenue each year from customers who pay for ChatGPT, computer programming tools and other technologies. But it still loses more money than it makes, according to a person familiar with the company’s finances.</p><p>If the company can use its new data centers to significantly improve A.I. technologies and expand its revenue over the next several years, it can become a viable business, as Mr. Altman believes it will. If technology progress stalls, OpenAI – and its many partners – could lose enormous amounts of money. Smaller companies like CoreWeave, which are taking on enormous amounts of debt to build new data centers, could go bankrupt.</p><p>In some cases, companies are hedging their bets. Nvidia and AMD, for instance, have the option of reducing the cash and stock they send to OpenAI if the A.I. market does not expand as quickly as expected. But others would be left with enormous debt, which could send ripples across the larger economy.</p>","contentLength":4718,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45771538"},{"title":"My Impressions of the MacBook Pro M4","url":"https://michael.stapelberg.ch/posts/2025-10-31-macbook-pro-m4-impressions/","date":1761905620,"author":"secure","guid":191,"unread":true,"content":"<p>I have been using a MacBook Pro M4 as my portable computer for the last half a\nyear and wanted to share a few short impressions. As always, I am not a\nprofessional laptop reviewer, so in this article you won’t find benchmarks, just\nsubjective thoughts!</p><p>Back in 2021, I wrote about the <a href=\"https://michael.stapelberg.ch/posts/2021-11-28-macbook-air-m1/\">MacBook Air\nM1</a>, which was the first computer I used that\ncontained Apple’s own ARM-based CPU. Having a silent laptop with long battery\nlife was a game-changer, so I wanted to keep those properties.</p><p>When the US government announced tariffs, I figured I would replace my 4-year\nold MacBook Air M1 with a more recent model that should last a few more\nyears. Ultimately, Apple’s prices remained stable, so, in retrospect, I could\nhave stayed with the M1 for a few more years. Oh well.</p><h2>The nano-textured display</h2><p>I went to the Apple Store to compare the different options in\nperson. Specifically, I was curious about the display and whether the increased\nweight and form factor of the MacBook Pro (compared to a MacBook Air) would be\nacceptable. Another downside of the Pro model is that it comes with a fan, and I\nreally like absolutely quiet computers. Online, I read from other MacBook Pro\nowners that the fan mostly stays off.</p><p>In general, I would have preferred to go with a MacBook Air because it has\nenough compute power for my needs and I like the case better (no ventilation\nslots), but unfortunately only the MacBook Pro line has the better displays.</p><p>Why aren’t all displays nano-textured? The employee at the Apple Store presented\nthe trade-off as follows: The nano texture display is great at reducing\nreflections, at the expense of also making the picture slightly less vibrant.</p><p>I could immediately see the difference when placing two laptops side by side:\nThe bright Apple Store lights showed up very prominently on the normal display\n(left), and were almost not visible at all on the nano texture display (right):</p><a href=\"https://michael.stapelberg.ch/posts/2025-10-31-macbook-pro-m4-impressions/2025-10-30-macbooks-displays.jpg\"><img srcset=\"https://michael.stapelberg.ch/posts/2025-10-31-macbook-pro-m4-impressions/2025-10-30-macbooks-displays_hu_8c87fe476c5344b6.jpg 2x,https://michael.stapelberg.ch/posts/2025-10-31-macbook-pro-m4-impressions/2025-10-30-macbooks-displays_hu_243730d5507ecc98.jpg 3x\" src=\"https://michael.stapelberg.ch/posts/2025-10-31-macbook-pro-m4-impressions/2025-10-30-macbooks-displays_hu_4cb7e6e8fae8437.jpg\" alt=\"MacBook Air (left) vs. MacBook Pro (right)\" title=\"MacBook Air (left) vs. MacBook Pro (right)\" width=\"600\" height=\"409\" loading=\"lazy\"></a><p>Personally, I did not perceive a big difference in “vibrancy”, so my choice was\nclear: I’ll pick the MacBook Pro over the MacBook Air (despite the weight) for\nthe nano texture display!</p><p>After using the laptop in a number of situations, I am very happy with this\nchoice. In normal scenarios, I notice no reflections at all (where my previous\nlaptop did show reflections!). This includes using the laptop on a train (next\nto the window), or using the laptop outside in daylight.</p><p>(When I chose the new laptop, Apple’s M4 chips were current. By now, they have\nreleased the first devices with M5 chips.)</p><p>I decided to go with the MacBook Pro with M4 chip instead of the M4  chip\nbecause I don’t need the extra compute, and the M4 needs less cooling — the M4\nPro apparently runs hotter. This increases the chance of the fan staying off.</p><p>Here are the specs I ended up with:</p><ul><li>14\" Liquid Retina XDR Display with nano texture</li><li>Apple M4 Chip (10 core CPU, 10 core GPU)</li><li>32 GB RAM (this is the maximum!), 2 TB SSD (enough for this computer)</li></ul><p>One thing I noticed is that the MacBook Pro M4 sometimes gets warm, even when it\nis connected to power, but is suspended to RAM (and has been fully charged for\nhours). I’m not sure why.</p><p>Luckily, the fan indeed stays silent. I think I might have heard it spin up once\nin half a year or so?</p><p>The battery life is amazing! The previous MacBook Air M1 had amazing all-day\nbattery life already, and this MacBook Pro M4 lasts even longer. For example,\nwatching videos on a train ride (with VLC) for 3 hours consumed only 10% of\nbattery life. I generally never even carry the charger.</p><p>Because of that, Apple’s re-introduction of MagSafe, a magnetic power connector\n(so you don’t damage the laptop when you trip over it), is nice-to-have but\ndoesn’t really make much of a difference anymore. In fact, it might be better to\npack a USB-C cable when traveling, as that makes you more flexible in how you\nuse the charger.</p><p>I was curious whether the 120 Hz display would make a difference in practice. I\nmostly notice the increased refresh rate when there are animations, but not,\nfor example, when scrolling.</p><p>One surprising discovery (but obvious in retrospect) is that even non-animations\ncan become faster. For example, when running a Go web server on , I\nnoticed that navigating between pages by clicking links felt faster on the 120\nHz display!</p><p>The following illustration shows why that is, using a page load that takes 6ms\nof processing time. There are three cases (the illustration shows an average\ncase and the worst case):</p><ol><li>Best case: Page load finishes  the next frame is displayed: no delay.</li><li>Worst case: Page load finishes  a frame is displayed: one frame of delay.</li><li>Most page loads are somewhere in between. We’ll have 0.x to 1.0 frames of delay</li></ol><a href=\"https://michael.stapelberg.ch/posts/2025-10-31-macbook-pro-m4-impressions/2025-10-31-delay-60-vs-120.svg\"><img src=\"https://michael.stapelberg.ch/posts/2025-10-31-macbook-pro-m4-impressions/2025-10-31-delay-60-vs-120.svg\" alt=\"delay\" title=\"delay\" loading=\"lazy\"></a><p>As you can see, the waiting time becomes shorter when going from 60 Hz (one\nframe every 16.6ms) to 120 Hz (one frame every 8.3ms). So if you’re working with\na system that has &lt;8ms response times, you might observe actions completing (up\nto) twice as fast!</p><p>I don’t notice going back to 60 Hz displays on computers. However, on phones,\nwhere a lot more animations are a key part of the user experience, I think 120\nHz displays are more interesting.</p><p>My ideal MacBook would probably be a MacBook Air, but with the nano-texture display! :)</p><p>I still don’t like macOS and would prefer to run Linux on this laptop. But\n<a href=\"https://asahilinux.org/\">Asahi Linux</a> still needs some work before it’s usable\nfor me (I need external display output, and M4 support). This doesn’t bother me\ntoo much, though, as I don’t use this computer for serious work.</p>","contentLength":5491,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45770304"},{"title":"Reasoning models reason well, until they don't","url":"https://arxiv.org/abs/2510.22371","date":1761902621,"author":"optimalsolver","guid":218,"unread":true,"content":"<!DOCTYPE html>","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45769971"},{"title":"AMD could enter ARM market with Sound Wave APU built on TSMC 3nm process","url":"https://www.guru3d.com/story/amd-enters-arm-market-with-sound-wave-apu-built-on-tsmc-3nm-process/","date":1761880068,"author":"walterbell","guid":217,"unread":true,"content":"AMD is expanding its processor portfolio beyond the x86 architecture with its first ARM-based APU, internally known as “Sound Wave.” The chip’s existence was uncovered through customs import records, confirming several details about its design and purpose. Built with a BGA-1074 package measuring 32 mm × 27 mm, the processor fits within standard mobile SoC dimensions, making it suitable for thin and light computing platforms. It employs a 0.8 mm pitch and FF5 interface, replacing the FF3 socket previously used in Valve’s Steam handheld devices, further hinting at a new generation of compact AMD-powered hardware.\n                                    <p>According to leaks from industry insiders such as @Moore’s Law Is Dead and @KeplerL2, “Sound Wave” is manufactured on  and aims for a  range, positioning it directly against Qualcomm’s Snapdragon X Elite. The chip is expected to power future  products scheduled for release in 2026.&nbsp;<strong>four RDNA 3.5 compute units</strong><strong>machine learning acceleration</strong></p><p>Memory support is another highlight: the chip integrates a <strong>128-bit LPDDR5X-9600 controller</strong> and will reportedly include , aligning with current trends in unified memory designs used in ARM SoCs. Additionally, the APU carries AMD’s <strong>fourth-generation AI engine</strong>, enabling on-device inference tasks and enhanced efficiency for workloads such as speech recognition, image analysis, and real-time translation.</p><p>While AMD experimented with ARM over a decade ago through the abandoned “Project Skybridge,” this new effort represents a more mature and strategic approach. With industry interest in efficient, ARM-based computing accelerating, “Sound Wave” could help AMD diversify its portfolio while leveraging its strengths in graphics and AI acceleration. If reports are accurate, the processor will enter production in late 2025, with commercial devices expected the following year.</p>","contentLength":1896,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45767916"},{"title":"John Carmack on mutable variables","url":"https://twitter.com/id_aa_carmack/status/1983593511703474196","date":1761878076,"author":"azhenley","guid":216,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45767725"},{"title":"ICE and the Smartphone Panopticon","url":"https://www.newyorker.com/culture/infinite-scroll/ice-and-the-smartphone-panopticon","date":1761873236,"author":"fortran77","guid":215,"unread":true,"content":"<p>Last week, as  raids ramped up in New York, city residents set about resisting in the ways they had available: confronting agents directly on sidewalks, haranguing them as they processed down blocks, and recording them on phone cameras held aloft. Relentless <a href=\"https://www.newyorker.com/magazine/2025/08/11/ices-spectacle-of-intimidation\">documentation</a> has proved something of an effective tool against President Donald Trump’s empowerment of ; agents have taken to wearing masks in fear of exposure, and the proliferation of imagery showing armed police and mobilized National Guard troops in otherwise calm cities has underlined the cruel absurdity of their activities. Activist memes have been minted on social media: a woman on New York’s Canal Street, dressed in a polka-dotted office-casual dress, flipping  agents off; a man in Washington, D.C., throwing a Subway sandwich at a federal agent in August. The recent “No Kings” marches were filled with protesters in inflatable frog costumes, inspired by a similarly outfitted man who got pepper-sprayed protesting outside the U.S. Immigration and Customs Enforcement Building in Portland, Oregon. Some might write the memes off as resistance porn, but digital content is at least serving as a lively defense mechanism in the absence of functional politics.</p><p>At the same time, social media has served as a reinvigorated source of transparency in recent weeks, harking back to the days when Twitter became an organizing tool during the Arab Spring, in the early twenty-tens, or when Facebook and Instagram helped fuel the Black Lives Matter marches of 2020. The grassroots optimism of that earlier social-media era is long gone, though, replaced by a sense of posting as a last resort. After Trump authorized the deployment of the National Guard <a href=\"https://www.newyorker.com/news/the-lede/the-conflict-on-the-streets-of-chicago\">in Chicago</a> earlier this month, the governor of Illinois, J.&nbsp;B. Pritzker, told residents to “record and narrate what you see—put it on social media.” But, if the anti- opposition is taking advantage of the internet,  and the Trump Administration are, too. Right-wing creators have been using the same channels to identify and publicize targets for raids. According to reporting in Semafor, the Trump-friendly YouTuber Nick Shirley’s videos of African migrant vendors on Canal Street seemed to help drive recent  sweeps of the area.  itself is also working to monitor social media. The investigative outlet  found documents revealing that the agency has enlisted an A.I.-driven surveillance product called Zignal Labs that creates “curated detection feeds” to aid in criminal investigations. According to reporting in ,  also has plans to build out a team of dozens of analysts to monitor social media and identify targets. Recent videos, identified by 404 Media and other publications, have purportedly shown  agents using technology developed by the data-analytics firm Palantir, founded by Peter Thiel and others, to scan social-media accounts, government records, and biometrics data of those they detain. Social media has become a political panopticon in which your posts are a conduit for your politics, and what you post can increasingly be used against you.</p><p>Meanwhile, a new wave of digital tools has emerged to help surveil the surveillants. The apps ICEBlock, Red Dot, and DEICER all allow users to pinpoint where  agents are active, forming an online version of a whisper network to alert potential targets. Eyes Up provides a way for users to record and upload footage of abusive law-enforcement activity, building an archive of potential evidence. Its creator is a software developer named Mark (who uses only his first name to separate the project from his professional work); he was inspired to create Eyes Up earlier this year, when he began seeing clips of  abductions and harassment circulating on social media and worried about their shelf life. As he put it to me, “They could disappear at any given moment, whether the platforms decide to moderate, whether the individual deletes their account or the post.”</p><p>Ultimately, the app itself was also vulnerable to sudden disappearance. After launching, on September 1st, Eyes Up accumulated thousands of downloads and thousands of minutes of uploaded footage. Then, on October 3rd, Mark received a notice that Apple was removing the app from its store on the grounds that it may “harm a targeted individual or group.” Eyes Up is not alone. ICEBlock and Red Dot have been blocked from both Apple and Google’s app stores, the two largest marketplaces; DEICER, like Eyes Up, was removed by Apple. Pressure on the tech platforms seemed to come from the Trump Administration; after a deadly shooting at an  field office in Dallas in late September, the Attorney General, Pam Bondi, said in a statement to Fox News Digital that ICEBlock “put ICE agents at risk just for doing their jobs.” Mark is contesting Apple’s decision about Eyes Up through its official channels, and the creator of ICEBlock, Joshua Aaron, has argued that his app should be treated no differently than services, such as Google’s Waze, that allow users to warn one another of highway speed traps. But for now they must try to make do with a limited reach.</p>","contentLength":5138,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45767325"},{"title":"Myths Programmers Believe about CPU Caches (2018)","url":"https://software.rajivprab.com/2018/04/29/myths-programmers-believe-about-cpu-caches/","date":1761871616,"author":"whack","guid":190,"unread":true,"content":"<p><a href=\"https://en.wikipedia.org/wiki/Distributed_computing\" target=\"_blank\" rel=\"noopener\">distributed-system-architecture</a><a href=\"https://en.wikipedia.org/wiki/Isolation_(database_systems)#Isolation_levels\" target=\"_blank\" rel=\"noopener\">database-isolation-levels</a><a href=\"https://hackernoon.com/eventual-vs-strong-consistency-in-distributed-databases-282fdad37cf7\" target=\"_blank\" rel=\"noopener\">strong-vs-eventual consistency</a></p><p><a href=\"https://docs.oracle.com/javase/tutorial/essential/concurrency/atomic.html\" target=\"_blank\" rel=\"noopener\">volatiles</a><a href=\"http://tutorials.jenkov.com/java-concurrency/volatile.html\" target=\"_blank\" rel=\"noopener\">read/written all the way to main memory</a></p><p><a href=\"https://stackoverflow.com/questions/23593061/volatile-keyword-in-multicore-vs-single-processor\" target=\"_blank\" rel=\"noopener\">even single-core systems are at risk of concurrency bugs</a></p><h2></h2><p><a href=\"https://en.wikipedia.org/wiki/Consistency_model\" target=\"_blank\" rel=\"noopener\">great wealth of nuance</a></p><p><a rel=\"noopener\" href=\"http://tutorials.jenkov.com/java-concurrency/volatile.html\" target=\"_blank\">this tutorial</a></p><p><a rel=\"noopener\" href=\"https://en.wikipedia.org/wiki/MESI_protocol\" target=\"_blank\">MESI protocol</a></p><ol><li><ol></ol></li><li><ol></ol></li><li><ol></ol></li><li><ol></ol></li></ol><ol><li><ol><li>The state of the cache-line is set to M, since it is now modified</li></ol></li></ol><h3></h3><ol><li><ol></ol></li><li><ol></ol></li></ol><ol></ol><h3></h3><ol><li><ol></ol></li></ol><h3></h3><ol></ol><h3></h3><ol></ol><p><a href=\"https://software.intel.com/en-us/articles/how-memory-is-accessed\" target=\"_blank\" rel=\"noopener\">multi-processor system</a></p><h2></h2><p><a rel=\"noopener\" href=\"https://stackoverflow.com/questions/4633866/is-volatile-expensive\" target=\"_blank\">immediately trigger cache reads/writes instead</a></p>","contentLength":371,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45767178"},{"title":"Show HN: Quibbler – A critic for your coding agent that learns what you want","url":"https://github.com/fulcrumresearch/quibbler","date":1761871437,"author":"etherio","guid":184,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45767162"},{"title":"Kimi Linear: An Expressive, Efficient Attention Architecture","url":"https://github.com/MoonshotAI/Kimi-Linear","date":1761869256,"author":"blackcat201","guid":214,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45766937"},{"title":"Leaker reveals which Pixels are vulnerable to Cellebrite phone hacking","url":"https://arstechnica.com/gadgets/2025/10/leaker-reveals-which-pixels-are-vulnerable-to-cellebrite-phone-hacking/","date":1761865930,"author":"akyuu","guid":189,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45766501"},{"title":"A change of address led to our Wise accounts being shut down","url":"https://shaun.nz/why-were-never-using-wise-again-a-cautionary-tale-from-a-business-burned/","date":1761864110,"author":"jemmyw","guid":213,"unread":true,"content":"<p>For years, one of my businesses has been a regular user of  (formerly TransferWise). Wise is a financial service that lets you send and receive money across currencies, often at a better rate and lower fee than traditional banks. Sounds great, right?</p><p>This is our story – a sobering, frustrating, and frankly  experience that ended with our business and personal accounts being shut down, without any meaningful reason, support, or recourse.</p><p>And all we did? We .</p><h2><strong>🏢 A Routine Change Turned Nightmare</strong></h2><p>Like many businesses, we recently moved into a new office. Alongside the usual updates to suppliers and records, we updated our  with Wise. Not long after, we received an email requesting us to  the new address.</p><p>Fair enough – we had no problem with that.</p><p>Wise provided a dropdown list of acceptable documents: a lease agreement, rates notice, tax document, utilities bill, or telecommunications bill. Due to our company structure, most of those documents are in the name of our parent company or show our PO Box (which NZ Post requires, since they won’t deliver to our street address). But we had a  that ticked every box:</p><ul><li>Correct physical street address ✅</li><li>Even detailed our fibre connection at the new premises ✅</li></ul><p>So we uploaded it – and assumed that would be the end of it.</p><h2><strong>📞 The Call That Made No Sense</strong></h2><p>Days later, we received an email: our document was . </p><p>No clear reason. So, I called Wise and explained the situation to the customer service representative.</p><p>Her response left me stunned.</p><blockquote><p>“The document was rejected because it was a , not a .”</p></blockquote><p>I paused, trying to process this. I politely explained that in <strong>New Zealand, a “tax invoice” is a legal form of a bill</strong> – even down to the name “tax invoice” being a legal requirement by IRD, and that’s how telecommunications companies issue invoices here. But she refused to accept it.</p><blockquote><p>“It needs to say  at the top,” she insisted.</p></blockquote><blockquote><p>“A tax invoice isn’t acceptable.”</p></blockquote><p>This is simply , and completely out of touch with New Zealand’s business documentation standards. The rep wouldn’t budge.</p><h2><strong>🧠 The “Solution” That Was Beyond Belief</strong></h2><p>Still trying to find a solution, I asked: <em>what do you recommend I do then?</em></p><blockquote><p>“You should find a local shared workspace, lease a desk under your company name, change your registered office to that address, and use that lease document to verify your address with us.”</p></blockquote><p>Yes, you read that right.</p><p>Wise’s advice was to <strong>artificially lease a desk we didn’t need, change our registered address, and use that document</strong> – just to verify an address we actually operate from.</p><p>I asked to speak to a manager. That request was . She told me, flatly:</p><blockquote><p>“I  providing you with the correct information.”</p></blockquote><p>A bit more back and forth… then the call .</p><h2><strong>📞 A Glimmer of Hope – Then The Hammer Falls</strong></h2><p>Later that day, I received a call back from Wise – not from a manager (because apparently, <strong>Wise doesn’t have managers</strong>), but from a more “senior” representative.</p><p>This rep was  and agreed the document should have been acceptable. She escalated the issue, resubmitted the document herself, and said she’d personally follow up if it was rejected again.</p><h2><strong>🚫 “We’ve Restricted Your Account”</strong></h2><p>I woke to an email with a stunning subject line:</p><blockquote><p><strong>“We’ve restricted your account”</strong></p></blockquote><p>Just like that, our  was locked. No warning. No reason. No discussion.</p><p>We could no longer send or receive money, use our Wise cards, or even contact support. The email stated:</p><blockquote><p>“Due to our current risk policies, your account will be closed in a few months. You will not be able to use support channels.”</p></blockquote><p>Even worse? My  was locked too. The same personal account which did have its address fully verified, by a rates invoice for my personal address.</p><h2><strong>🧾 An “Appeal” That Wasn’t an Appeal</strong></h2><p>The email offered an option to . Naturally, I did.</p><p>The appeal process asked for our <strong>articles of incorporation</strong> and . No problem.</p><p>Then it asked us to provide our preferred currency, and <strong>bank account details to refund the balances</strong>.</p><p>Wait… I thought this was an appeal? A chance to discuss and resolve the issue?</p><p>That was the end. There was <strong>no opportunity to explain anything</strong>, no communication, no questions asked. The decision was made, and we were , permanently.</p><p>To summarise the absurdity of this:</p><ul><li>We moved office, and updated our address with Wise</li><li>We provided a legal, NZ-compliant  showing our entity and address</li><li>It was rejected because it was labelled a “Tax Invoice”</li><li>A rep told us to lease a coworking desk elsewhere just to get a different document</li><li>A senior rep agreed we were right, and escalated it</li><li>Then <strong>our accounts were shut down – with no explanation or recourse</strong></li></ul><p>Even trying to call support now gets an automated message: “Because your account is restricted, we cannot connect you.”</p><h2><strong>⚠️ Our Final Word: Be Very, Very Careful</strong></h2><p>We had used Wise for . Regular monthly supplier payments. International stock orders. Five-figure transactions. Never a problem – until this. A minor change triggered a totally flawed process that , with no transparency or logical path to resolution.</p><p>We’re not alone – a quick search shows <strong>many others facing similar horror stories</strong> with Wise.</p><p>So this is my word of warning:</p><blockquote><p>💡 <strong>Don’t put all your eggs in the Wise basket.</strong></p></blockquote><p>If you’re a business, don’t rely on them as your sole means of transferring funds. For us, it’s back to traditional banks – slower, yes, but at least <strong>they have humans you can talk to, and actual escalation paths</strong>.</p><h2>🧾 <strong>28th October update on our Wise debacle – it gets worse.</strong></h2><p>Following the so-called “appeal” (which gave us no option to provide any information), we received the unsurprising outcome: Wise has decided to  as we had <strong>breached their acceptable use policy</strong>. 🤨</p><p>What was surprising, however, was the  they gave after I queried what was breached in Wise’s Acceptable Use Policy:</p><p>I was told my  was being closed for allegedly breaching their Acceptable Use Policy — specifically, section 1.4.e, which states <em>“you may not use your personal Wise account to receive business payments.”</em></p><p>I’ve  used my personal account for business transactions — in fact, over 99% of transfers were to overseas family members. When I asked for clarification or examples, I got none. Just a vague statement and the very strange line:</p><blockquote><p><em>“Just because we can’t offer you our services going forward doesn’t mean that we think your business activities are illegal or illegitimate — it just means that we don’t support those types of activities.”</em></p></blockquote><p>What activities?! Again, </p><p>To make matters worse — our business account’s refund transfer . Why? Because it requires documentation — the  Wise previously rejected for address verification, claiming a <em>telecommunications tax invoice isn’t a bill</em>.</p><p>After a few days, the transfer was then cancelled as of course, Wise was unable to “verify” us.</p><p>So now our , their support ticket is marked “final response,” and our attempts to get clarity have gone nowhere. We’ve escalated the issue to <strong>Financial Services Complaints Ltd</strong>, Wise’s dispute resolution provider in New Zealand.</p><p>Funds stuck. No clear reason. No accountability. Wise still gets a 0/10 from us.</p><p>This isn’t just poor service — it’s unacceptable.</p><p><strong>Think twice before trusting Wise with your money.</strong></p>","contentLength":7250,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45766253"},{"title":"Phone numbers for use in TV shows, films and creative works","url":"https://www.acma.gov.au/phone-numbers-use-tv-shows-films-and-creative-works","date":1761860951,"author":"nomilk","guid":212,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45765787"},{"title":"Denmark reportedly withdraws Chat Control proposal following controversy","url":"https://therecord.media/demark-reportedly-withdraws-chat-control-proposal","date":1761860142,"author":"layer8","guid":211,"unread":true,"content":"<p> Denmark’s justice minister on Thursday said he will no longer push for an EU law requiring the mandatory scanning of electronic messages, including on end-to-end encrypted platforms. </p><p> Earlier in its European Council presidency, Denmark had brought back a draft law which would have required the scanning, sparking an intense backlash. Known as Chat Control, the measure was intended to crack down on the trafficking of child sex abuse materials (CSAM). </p><p> After days of silence, the German government on October 8 announced it would <a href=\"https://therecord.media/chat-control-eu-germany-will-not-support-law\" target=\"_blank\" rel=\"noopener noreferrer\">not support</a> the proposal, tanking the Danish effort. </p><p> Danish Justice Minister Peter Hummelgaard told reporters on Thursday that his office will support voluntary CSAM detections. </p><p> \"This will mean that the search warrant will not be part of the EU presidency's new compromise proposal, and that it will continue to be voluntary for the tech giants to search for child sexual abuse material,\" Hummelgaard said, <a href=\"https://politiken.dk/viden/art10605607/Hummelgaard-opgiver-kontroversielt-forslag-om-overv%C3%A5gning\" target=\"_blank\" rel=\"noopener noreferrer\">according to</a> local news reports. </p><p> The current model allowing for voluntary scanning expires in April, Hummelgaard said. </p><p> \"Right now we are in a situation where we risk completely losing a central tool in the fight against sexual abuse of children,” he said. \"That's why we have to act no matter what. We owe it to all the children who are subjected to monstrous abuse.\"&nbsp; </p><p> Meredith Whittaker, the president of the Signal Foundation, lobbied hard against the original measure, saying the organization would leave the European market if the provision was adopted. </p><p> “What they propose is in effect a mass surveillance free-for-all, opening up everyone’s intimate and confidential communications, whether government officials, military, investigative journalists, or activists,” she said at the time. </p>","contentLength":1748,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45765664"},{"title":"Minecraft HDL, an HDL for Redstone","url":"https://github.com/itsfrank/MinecraftHDL","date":1761850742,"author":"sleepingreset","guid":210,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45763877"},{"title":"TypeScript Overtakes Python and JavaScript To Claim Top Spot on GitHub","url":"https://developers.slashdot.org/story/25/10/30/1753252/typescript-overtakes-python-and-javascript-to-claim-top-spot-on-github?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1761847200,"author":"msmash","guid":263,"unread":true,"content":"TypeScript overtook Python and JavaScript in August 2025 to become the most used language on GitHub. The shift marked the most significant language change in more than a decade. The language grew by over 1 million contributors in 2025, a 66% increase year over year, and finished August with 2,636,006 monthly contributors. \n\nNearly every major frontend framework now scaffolds projects in TypeScript by default. Next.js 15, Astro 3, SvelteKit 2, Qwik, SolidStart, Angular 18, and Remix all generate TypeScript codebases when developers create new projects. Type systems reduce ambiguity and catch errors from large language models before production. A 2025 academic study found 94% of LLM-generated compilation errors were type-check failures. Tooling like Vite, ts-node, Bun, and I.D.E. autoconfig hide boilerplate setup. Among new repositories created in the past twelve months, TypeScript accounted for 5,394,256 projects. That represented a 78% increase from the prior year.","contentLength":979,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Cursor 2.0 is here... 5 things you didn't know it can do","url":"https://www.youtube.com/watch?v=HIp8sFB2GGw","date":1761844039,"author":"Fireship","guid":347,"unread":true,"content":"<article>Build better apps with PostHog - https://posthog.com/fireship\n\nCursor, the IDE of choice for any self-respecting vibe engineer, just released version 2.0.\n\nIn today's video, we'll take a first look at 5 new features every developer should know about.\n\n#coding #programming #ai\n\n💬 Chat with Me on Discord\n\nhttps://discord.gg/fireship\n\n🔗 Resources\n- https://cursor.com/blog/2-0\n\n🔥 Get More Content - Upgrade to PRO\n\nUpgrade at https://fireship.io/pro\nUse code YT25 for 25% off PRO access \n\n🎨 My Editor Settings\n\n- Atom One Dark \n- vscode-icons\n- Fira Code Font\n\n🔖 Topics Covered\n- Cursor 2.0 First Look\n- Cursor Composer 1\n- Agent Layout\n- Native Browser\n- Parallel Agents\n- In-editor Bugbot</article>","contentLength":704,"flags":null,"enclosureUrl":"https://www.youtube.com/v/HIp8sFB2GGw?version=3","enclosureMime":"","commentsUrl":null},{"title":"How the cochlea computes (2024)","url":"https://www.dissonances.blog/p/the-ear-does-not-do-a-fourier-transform","date":1761843680,"author":"izhak","guid":209,"unread":true,"content":"<p>Let’s talk about how the cochlea computes!</p><p>The hair cells on different parts of the basilar membrane wiggle back and forth at the frequency corresponding to their position on the membrane. But how do wiggling hair cells translate to electrical signals? This mechanoelectrical transduction process feels like it could be from a Dr. Seuss world: springs connected to the ends of hair cells open and close ion channels at the frequency of the vibration, which then cause neurotransmitter release. Bruno calls them “trapdoors”. Here’s a visualization:</p><p>Wouldn’t it be convenient if the cochlea were doing a Fourier transform, which would fit cleanly into how we often analyze signals in engineering? But no 🙅🏻‍♀️! A Fourier transform has no explicit temporal precision, and resembles something closer to the waveforms on the right; this is not what the filters in the cochlea look like. </p><p><a href=\"https://pubmed.ncbi.nlm.nih.gov/11896400/\" rel=\"\">Lewicki 2002</a></p><p>It appears that human speech occupies a distinct time-frequency space. Some speculate that speech evolved to fill a time-frequency space that wasn’t yet occupied by other existing sounds.</p><p>To drive the theory home, one that we have been hinting at since the outset: forming ecologically-relevant representations makes sense, as behavior is dependent on the environment. It appears that for audition, as well as other sensory modalities, we are doing this. This is a bit of a teaser for efficient coding, which we will get to soon.</p>","contentLength":1444,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45762259"},{"title":"Falling panel prices lead to global solar boom, except for the US","url":"https://arstechnica.com/science/2025/10/theres-a-global-boom-in-solar-except-in-the-united-states/","date":1761841942,"author":"Jtsummers","guid":208,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45761902"}],"tags":["dev"]}