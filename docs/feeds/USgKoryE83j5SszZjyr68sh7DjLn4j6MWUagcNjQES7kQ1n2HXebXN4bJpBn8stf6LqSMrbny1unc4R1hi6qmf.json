{"id":"USgKoryE83j5SszZjyr68sh7DjLn4j6MWUagcNjQES7kQ1n2HXebXN4bJpBn8stf6LqSMrbny1unc4R1hi6qmf","title":"top scoring links : golang","displayTitle":"Reddit - Go","url":"https://www.reddit.com/r/golang/top/.rss?sort=top&t=day&limit=6","feedLink":"https://www.reddit.com/r/golang/top/?sort=top&t=day&limit=6","isQuery":false,"isEmpty":false,"isHidden":false,"itemCount":6,"items":[{"title":"Codanna now supports Go! Instant call graphs, code-aware lookup, zero servers","url":"https://www.reddit.com/r/golang/comments/1mxnw4v/codanna_now_supports_go_instant_call_graphs/","date":1755910799,"author":"/u/Plenty_Seesaw8878","guid":551,"unread":true,"content":"<p>Your coding assistants can now index and navigate Go, Python, Typescript or Rust projects with precise context in . Runs fully local, integrates anywhere—from vibe coding with agents to plain Unix piping. It get's line numbers, extracts method signatures and logical flows in . Bonus: two Claude slash commands for everyday workflows —  for natural-language lookup and  for dependency analysis</p><p>Codanna is the Unix tool that builds a live atlas of your code. Alone, it answers queries in under 300 ms. With agents or pipes, it drives context-aware coding with <strong>speed, privacy, and no guesswork</strong>.</p>","contentLength":595,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"FTP faster upload","url":"https://www.reddit.com/r/golang/comments/1mxjcfr/ftp_faster_upload/","date":1755898910,"author":"/u/pepiks","guid":552,"unread":true,"content":"<p>Is possible using Go upload files faster than by FTP client? I am looking for speed up uploading gallery images - typical size is around 20-40 MB at maximum, up to 200 resized images, but transfer is very slow and it can take even 15 minutes for this size. I am using FTP for this, not FTPS.</p>","contentLength":291,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Quick dumb question: Why did google not use Go for the gemini cli?","url":"https://www.reddit.com/r/golang/comments/1mxgdg1/quick_dumb_question_why_did_google_not_use_go_for/","date":1755891882,"author":"/u/0b_1000101","guid":555,"unread":true,"content":"<p>I was just trying the Gemini CLI, and when I checked the repo, I saw it was written in TypeScript. I do have a preference for Go, but I just want an objective reason for choosing TypeScript. I haven't really developed complex CLI tools in Go, just a few basic ones, but I know it is possible to create a good-looking TUI using bubble tea or something else.</p><p>I would like to know what advantages Go provides over other languages in terms of CLI from a user perspective.</p>","contentLength":466,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Go concurrency without the channel gymnastics","url":"https://www.reddit.com/r/golang/comments/1mx7art/go_concurrency_without_the_channel_gymnastics/","date":1755871173,"author":"/u/marketbase","guid":554,"unread":true,"content":"<p>Hey y’all. I noticed every time I fan-in / fan-out in Go, I end up writing the same channel boilerplate. Got tired of it, so I built a library to one-line the patterns.</p><pre><code>// Before sem := make(chan struct{}, 3) results := make(chan int, len(tasks)) for _, task := range tasks { sem &lt;- struct{}{} go func(task func() (int, error)) { defer func() { &lt;-sem }() result, err := task() if err != nil { // handle or ignore; kept simple here } results &lt;- result }(task) } for range tasks { fmt.Println(&lt;-results) } // After results, err := gliter.InParallelThrottle(3, tasks) </code></pre><pre><code>// Before jobs := make(chan int, len(tasks)) results := make(chan int, len(tasks)) // fan-out for i := 0; i &lt; 3; i++ { go worker(jobs, results) } // send jobs for _, job := range tasks { jobs &lt;- job } close(jobs) // fan-in for range tasks { fmt.Println(&lt;-results) } // After results, errors := gliter.NewWorkerPool(3, handler). Push(1, 2, 3, 4). Close(). Collect() </code></pre><p>Didn’t think it was special at first, but I keep reaching for it out of convenience. What do you think, trash or treasure?</p>","contentLength":1055,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Centrally Collecting Events from Go Microservices","url":"https://pliutau.com/centrally-collecting-events-in-go-microservices/","date":1755868657,"author":"/u/der_gopher","guid":550,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/golang/comments/1mx6a03/centrally_collecting_events_from_go_microservices/"},{"title":"Coding a database proxy for fun","url":"https://www.youtube.com/watch?v=DU7_MQmRDUs","date":1755865509,"author":"/u/der_gopher","guid":553,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/golang/comments/1mx52kt/coding_a_database_proxy_for_fun/"}],"tags":["dev","reddit","go"]}