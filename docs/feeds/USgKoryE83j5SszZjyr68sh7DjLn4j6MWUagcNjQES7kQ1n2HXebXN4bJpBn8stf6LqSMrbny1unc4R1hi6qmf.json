{"id":"USgKoryE83j5SszZjyr68sh7DjLn4j6MWUagcNjQES7kQ1n2HXebXN4bJpBn8stf6LqSMrbny1unc4R1hi6qmf","title":"top scoring links : golang","displayTitle":"Reddit - Go","url":"https://www.reddit.com/r/golang/top/.rss?sort=top&t=day&limit=6","feedLink":"https://www.reddit.com/r/golang/top/?sort=top&t=day&limit=6","isQuery":false,"isEmpty":false,"isHidden":false,"items":[{"title":"What are the reasons for not picking Go templates over Templ with HTMX?","url":"https://www.reddit.com/r/golang/comments/1hv9apb/what_are_the_reasons_for_not_picking_go_templates/","date":1736196198,"author":"/u/coderustle","unread":true,"content":"<!-- SC_OFF --><div class=\"md\"><p>Searching on GitHub for Go + HTMX, I noticed there are a lot of examples using Go + Templ + HTMX. I would like to know why people choose not to stick with Go templates from the standard library.</p> <p>Coming from Django templates, where using too many includes might impact performance, I found Go templates to be a breath of fresh air. And combining them with HTMX is like a match made in heaven. I’m not sure if there’s any performance penalty for Go having many partial templates, but I really like this pattern where I can group multiple HTMX partial templates per page. </p> <p>Here is a sample app that I used as playground to experiment with HTMX and Go templates. Link <a href=\"https://github.com/madalinpopa/go-htmx-demo\">here</a></p> <p>Why would you choose templ over Go Templates for HTMX?</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/coderustle\"> /u/coderustle </a> <br/> <span><a href=\"https://www.reddit.com/r/golang/comments/1hv9apb/what_are_the_reasons_for_not_picking_go_templates/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1hv9apb/what_are_the_reasons_for_not_picking_go_templates/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Mindtick - lightweight CLI note tracker using SQLite","url":"https://www.reddit.com/r/golang/comments/1hv7d27/mindtick_lightweight_cli_note_tracker_using_sqlite/","date":1736191554,"author":"/u/Witty_Wrangler_3899","unread":true,"content":"<!-- SC_OFF --><div class=\"md\"><p><a href=\"https://github.com/ninesl/mindtick\">https://github.com/ninesl/mindtick</a></p> <p><code>mindtick view</code></p> <pre><code>[ Jan 04, 2025 ] note 04:33 PM note message win 06:33 PM win message [ Jan 05, 2025 ] note 01:33 AM note message win 03:33 AM win message note 09:33 AM note message fix 12:33 PM fix message win 01:33 PM win message 06:33 PM win message task 07:33 PM task message note 08:33 PM note message fix 10:33 PM fix message [ Jan 06, 2025 ] win 04:33 AM win message note 06:33 AM note message task 08:33 AM task message fix 01:33 PM fix message </code></pre> <h1>Why make this instead of a todo.txt?</h1> <p>I made this project because I have been having difficulties when I&#39;m explaining to my non-technical clients what I&#39;ve been working on.</p> <p>This is really helpful for me to get an overview of my progress/what I&#39;ve been doing in a project because of the timestamps on each message being sent to Mindtick.</p> <p>While <code>todo.txt</code> is extremely simple for task tracking, this tool is more personal and thought-driven. I think of it as a changelog for your mind. It&#39;s not just about task tracking, it&#39;s about documenting your mental journey. Just remember to use it consistently!</p> <p>run <code>mindtick new</code> to create a new <code>store.mindtick</code> in your working directory. If a <code>.gitignore</code> file is found, <code>store.mindtick</code> gets appended to the ignore file so you don&#39;t accidentally upload it with your repo.</p> <p>The ANSI colors only work in terminals that support it, if you were to use this with Powershell or Command Prompt you will see the ANSI escape codes as plaintext. So I recommend to not do this on the default windows terminals or use another terminal! (Works great in integrated vscode terminal tho)</p> <p>Thanks for checking out my project and leave a star if you think it deserves it and are feeling generous!</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Witty_Wrangler_3899\"> /u/Witty_Wrangler_3899 </a> <br/> <span><a href=\"https://www.reddit.com/r/golang/comments/1hv7d27/mindtick_lightweight_cli_note_tracker_using_sqlite/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1hv7d27/mindtick_lightweight_cli_note_tracker_using_sqlite/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Just got my Go NES Emulator running in a browser using WASM","url":"https://www.reddit.com/r/golang/comments/1hv4kav/just_got_my_go_nes_emulator_running_in_a_browser/","date":1736184739,"author":"/u/bufoaureus","unread":true,"content":"&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/bufoaureus\"> /u/bufoaureus </a> <br/> <span><a href=\"https://maxpoletaev.github.io/dendy/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1hv4kav/just_got_my_go_nes_emulator_running_in_a_browser/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"What is the most efficient method to ensure POST requests function correctly on routes that may or may not end with a forward slash (/)? I don't like these duplicates at all!","url":"https://www.reddit.com/r/golang/comments/1huy4zx/what_is_the_most_efficient_method_to_ensure_post/","date":1736167395,"author":"/u/joaopedroaat","unread":true,"content":"<!-- SC_OFF --><div class=\"md\"><pre><code>package main import ( &quot;net/http&quot; &quot;github.com/joaopedroaat/rest-calc/internal/handlers&quot; ) func main() { router := http.NewServeMux() router.HandleFunc(&quot;GET /{$}&quot;, handlers.HomeHandler) router.HandleFunc(&quot;POST /sum&quot;, handlers.AdditionHandler) router.HandleFunc(&quot;POST /sum/{$}&quot;, handlers.AdditionHandler) router.HandleFunc(&quot;POST /sub&quot;, handlers.SubtractionHandler) router.HandleFunc(&quot;POST /sub/{$}&quot;, handlers.SubtractionHandler) router.HandleFunc(&quot;POST /mult&quot;, handlers.MultiplicationHandler) router.HandleFunc(&quot;POST /mult/{$}&quot;, handlers.MultiplicationHandler) router.HandleFunc(&quot;POST /div&quot;, handlers.DivisionHandler) router.HandleFunc(&quot;POST /div/{$}&quot;, handlers.DivisionHandler) server := http.Server{ Addr: &quot;:8080&quot;, Handler: router, } server.ListenAndServe() } </code></pre> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/joaopedroaat\"> /u/joaopedroaat </a> <br/> <span><a href=\"https://www.reddit.com/r/golang/comments/1huy4zx/what_is_the_most_efficient_method_to_ensure_post/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1huy4zx/what_is_the_most_efficient_method_to_ensure_post/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"What's your unpopular Go opinion?","url":"https://www.reddit.com/r/golang/comments/1husfqd/whats_your_unpopular_go_opinion/","date":1736143438,"author":"/u/VibrantCanopy","unread":true,"content":"<!-- SC_OFF --><div class=\"md\"><p>Upvote what you disagree with!</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/VibrantCanopy\"> /u/VibrantCanopy </a> <br/> <span><a href=\"https://www.reddit.com/r/golang/comments/1husfqd/whats_your_unpopular_go_opinion/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1husfqd/whats_your_unpopular_go_opinion/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"[Follow-Up] Treds Now Includes a Command-Based Vector Store with HNSW","url":"https://www.reddit.com/r/golang/comments/1huo0so/followup_treds_now_includes_a_commandbased_vector/","date":1736129167,"author":"/u/Fast-Tourist5742","unread":true,"content":"<!-- SC_OFF --><div class=\"md\"><p>Hey folks! Previously I announced <strong>Treds</strong>, but I’ve now <strong>added a fully command-based vector store</strong>, powered by an HNSW graph for approximate nearest-neighbor searches. Here’s a quick look at the four commands:</p> <ol> <li><strong>VCREATE</strong> – Initializes a vector index, specifying parameters like maxNeighbors, layer factor, and efSearch.</li> <li><strong>VINSERT</strong> – Inserts vectors into that index.</li> <li><strong>VSEARCH</strong> – Searches for the k nearest neighbors to a given vector.</li> <li><strong>VDELETE</strong> – Deletes a vector from the index by its ID.</li> </ol> <p>Commands can be executed in redis-cli, as Treds is RESP compliant. A simple session might look like</p> <pre><code>VCREATE vec 6 0.5 100 VINSERT vec 1.0 2.0 VINSERT vec 2.0 3.0 VINSERT vec 3.0 4.0 VSEARCH vec 1.5 2.5 2 </code></pre> <p>This creates an index named <code>vec</code>, inserts some 2D vectors, searches for the 2 nearest neighbors to <code>[1.5, 2.5].</code><strong>Vectors can be N-Dimension as well</strong>.</p> <p>If you checked out Treds before, I’d love to hear your thoughts on the new vector store addition. If you haven’t, feel free to give it a look and let me know if you have any suggestions or questions. Thanks for reading, and happy hacking!</p> <p><a href=\"https://github.com/absolutelightning/treds?tab=readme-ov-file#vector-store\">https://github.com/absolutelightning/treds?tab=readme-ov-file#vector-store</a><br/> <a href=\"https://github.com/absolutelightning/treds\">https://github.com/absolutelightning/treds</a></p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Fast-Tourist5742\"> /u/Fast-Tourist5742 </a> <br/> <span><a href=\"https://www.reddit.com/r/golang/comments/1huo0so/followup_treds_now_includes_a_commandbased_vector/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1huo0so/followup_treds_now_includes_a_commandbased_vector/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""}]}