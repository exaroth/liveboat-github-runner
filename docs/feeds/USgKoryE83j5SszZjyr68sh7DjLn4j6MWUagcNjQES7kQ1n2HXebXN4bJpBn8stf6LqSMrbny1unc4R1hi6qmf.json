{"id":"USgKoryE83j5SszZjyr68sh7DjLn4j6MWUagcNjQES7kQ1n2HXebXN4bJpBn8stf6LqSMrbny1unc4R1hi6qmf","title":"top scoring links : golang","displayTitle":"Reddit - Go","url":"https://www.reddit.com/r/golang/top/.rss?sort=top&t=day&limit=6","feedLink":"https://www.reddit.com/r/golang/top/?sort=top&t=day&limit=6","isQuery":false,"isEmpty":false,"isHidden":false,"itemCount":6,"items":[{"title":"Convincing Arguments for Go","url":"https://www.reddit.com/r/golang/comments/1ige21s/convincing_arguments_for_go/","date":1738547937,"author":"/u/ktoks","guid":306,"unread":true,"content":"<p>Hey all. I have a meeting coming up with mid-level managers. This meeting has been a long time coming, I've been pushing for it for years and I think I've finally gotten through to at least one of them. Wether he's onboard 100% or not is yet to be seen </p><p>Short explanation of the situation: we're an old enterprise company, old code, old dependencies, old developers, old managers, and a (mostly) old mindset, except when it comes to security. We have used mainly Perl in the past, but a few devs are starting to use Python more.</p><p>I'm trying to get them to add Go as a development option.</p><blockquote><p>Perl is ðŸ¤® and Python doesn't quite cut it sometimes need shorter processing times types would reduce bugs I see on the reg strict error handling to reduce missed errors current parallel processing is costly</p></blockquote><p>Reasons I think they would care:</p><blockquote><p>less bugs than other compiled languages faster processing than current languages type safety parallelism baked in dead simple syntax and readability backward compatibility is better than most great community support lower cost and less server load</p></blockquote><p>One additional problem is that most folks think Go is for web, I've made arguments against that. The top reason is true even for Rust because most of my division isn't computer science and would be unable to understand Rust(I write in Rust too).</p><p>I need to flesh out some of these arguments and probably could add a few more, can you help me out?</p>","contentLength":1416,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Steam breaks Go runtime","url":"https://steamcommunity.com/discussions/forum/0/595138100650327297/","date":1738532966,"author":"/u/TopAd8219","guid":309,"unread":true,"content":"<!DOCTYPE html>","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/golang/comments/1ig8q28/steam_breaks_go_runtime/"},{"title":"Praise for John Arundels books.","url":"https://bitfieldconsulting.com/books","date":1738532695,"author":"/u/ThatGuyWB03","guid":307,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/golang/comments/1ig8maj/praise_for_john_arundels_books/"},{"title":"I made the most chaotic Go package ever and somehow got 8 stars? What?","url":"https://www.reddit.com/r/golang/comments/1ig42i3/i_made_the_most_chaotic_go_package_ever_and/","date":1738521387,"author":"/u/a7madx7","guid":310,"unread":true,"content":"<p>Hey everyone, so I did something dumb.</p><p>You know how we all have that \"utils\" package we copy-paste between projects? Well, I took all of mine, threw them in a GitHub repo, and called it . Yeah, really creative name, I know.</p><h2>The mess started like this:</h2><p>I got tired of writing the same error handling and logging stuff over and over. You know the drill: <code>go if err != nil { log.Printf(\"something broke: %v\", err) return nil, err } </code></p><p>So I made some wrappers: ```go // Now it's someone else's problem config := it.Must(LoadConfig())</p><p>// Or if you're scared of panics user := it.Should(GetUser()) ```</p><h2>Then things got out of hand</h2><p>I started adding everything I commonly use: - Rate limiters (because hammering APIs isn't cool) - Pools (because making new objects is expensive) - Math stuff (turns out loops aren't always the answer) - Load balancers (for when one function isn't enough) - Circuit Breaker (whatever that might be) - A Deboucer - A really ( and I mean really ) bad clone of Rust's Result type. - Exponential Retrial stuff. - A benchmarker, a time keeper &amp; a time measuring package. - Did I mention a graceful shutdown manager &amp; a version tracking packge?</p><p>People actually starred the repo. Like, 8 whole stars. That's 8 more than I expected. Either they really like bad ideas or they're as messy as I am.</p><p>\"Well, if people are gonna use this train wreck, might as well make it a TESTED train wreck.\"</p><p>So now it has: - Actually decent test coverage - Documentation (with bad jokes) - Examples that work - More features nobody asked for</p><p>Probably not. But if you do, at least you'll get some laughs from the docs while your code catches fire.</p><p>PS: If this post gets more upvotes than my repo has stars, I'll add whatever stupid feature gets the most upvotes in the comments.</p><p>PS: I hope I made you smile.</p><p>Edit 1: Yes, I know it breaks every Go package design principle. No, I won't fix it. Yes, I'll probably add more stuff.</p><p>Edit 2: WoW, Just WoW, 102+ Stars up till now, I am in loss of words, <a href=\"https://www.reddit.com/r/golang\">r/golang</a> is such a nice community to be part of, thanks guys.</p>","contentLength":2038,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Configurature: Simple, flexible, and powerful application configuration for Go.","url":"https://www.reddit.com/r/golang/comments/1ifwa5o/configurature_simple_flexible_and_powerful/","date":1738499587,"author":"/u/PopAdministrative923","guid":305,"unread":true,"content":"<p>Configurature is a Go library that provides declarative app configuration using structs. Configuration values can be specified (in value precedence order) on the command line, using environment variables, and/or in a config file (yaml or json).</p>","contentLength":244,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Was Building Something, But Now Having Self-Doubt","url":"https://www.reddit.com/r/golang/comments/1ifvwi7/was_building_something_but_now_having_selfdoubt/","date":1738498139,"author":"/u/unbeatable697","guid":308,"unread":true,"content":"<p>Initially, I started building a CLI file-sharing platform in Go. I am almost done with the project, with only some CLI and backend parts remaining. However, now I feel like it might not be worth completing since I doubt anyone will use or appreciate it.</p><p>I originally started this project to learn Go, and through it, I have gained experience with CRUD operations and more. Now, I'm in a dilemmaâ€”should I complete this project or move on to something else?</p><p>By the way, Iâ€™m using GitHub as the storage backend, allowing users to upload files and download them on any PC by providing a name and password.</p><p>also even if I complete it is it worth to add in resume otherwise i dont see any point of making it. as people are not going to use it</p>","contentLength":737,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null}],"tags":["dev","reddit","go"]}