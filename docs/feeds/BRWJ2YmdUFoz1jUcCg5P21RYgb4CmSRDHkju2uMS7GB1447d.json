{"id":"BRWJ2YmdUFoz1jUcCg5P21RYgb4CmSRDHkju2uMS7GB1447d","title":"Mouse Vs Python","displayTitle":"Dev - Python Blog","url":"https://blog.pythonlibrary.org/feed","feedLink":"https://www.blog.pythonlibrary.org/","isQuery":false,"isEmpty":false,"isHidden":false,"itemCount":1,"items":[{"title":"Textual – Switching Screens in Your Terminal","url":"https://www.blog.pythonlibrary.org/2025/01/14/textual-switching-screens-in-your-terminal/","date":1736888959,"author":"Mike","guid":282,"unread":true,"content":"<p>The&nbsp;&nbsp;is a container for your widgets. These screens occupy the dimensions of your terminal by default. While you can have many different screens in a single application, only one screen may be active at a time.</p><p>When you create your&nbsp; class, Textual will create a screen object implicitly. Yes, Textual requires you to have at least one screen or your application won’t work. If you do not create a new screen or switch to a different one, the default screen is where your widgets will get mounted or composed to.</p><p>Screens are a great way to organize your application. Many applications have settings pages, help pages, and more. These are just a few examples of how you can use screens.</p><p>Now that you know what a screen is, you’re ready to learn how to create new ones!</p><p>When you create an application, you create a&nbsp;&nbsp;implicitly. But how do you create your own&nbsp;? Fortunately, Textual has made that easy. All you need to do is import the&nbsp;&nbsp;class from&nbsp;&nbsp;and extend it as needed.</p><p>You can style screens the same way you do other widgets, except for the dimensions as screens are always the same size as your terminal window.</p><p>To see how this all works, you will create an application with two screens:</p><ul><li>You second screen, which will be green</li></ul><p>You will be able to switch between the screens using a button. Each screen has its own button and its own event or message handler.</p><p>Open up your favorite Python IDE and create a new file called&nbsp;&nbsp;with the following contents:</p><pre data-enlighter-language=\"python\"># two_screens.py\n\nfrom textual import on\nfrom textual.app import App, ComposeResult\nfrom textual.screen import Screen\nfrom textual.widgets import Button\n\nclass GreenScreen(Screen):\n\n    def compose(self) -&gt; ComposeResult:\n        self.styles.background = \"green\"\n        yield Button(\"Main Screen\", id=\"main\")\n\n    @on(Button.Pressed, \"#main\")\n    def on_main(self) -&gt; None:\n        self.dismiss()\n\n\nclass MainAop(App):\n\n    def compose(self) -&gt; ComposeResult:\n        yield Button(\"Switch\", id=\"switch\")\n\n    @on(Button.Pressed, \"#switch\")\n    def on_switch(self) -&gt; None:\n        self.push_screen(GreenScreen())\n\n\nif __name__ == \"__main__\":\n    app = MainAop()\n    app.run()</pre><p>You use Textual’s handy&nbsp;&nbsp;decorator to match against the button’s&nbsp;. That keeps the message from bubbling around to other event handlers, which is what could happen if you had used&nbsp;, for example.</p><p>When you run your application, you will see something like this:</p><p>Try clicking the buttons and switching between the screens.</p><p>Of course, you don’t need to use button’s at all, if you don’t want to. You could use keyboard shortcuts instead. Why not give that a try?</p><p>Go back to your Python IDE and create a new file called&nbsp;&nbsp;with this code in it:</p><pre data-enlighter-language=\"python\"># two_screens_keys_only.py\n\nfrom textual.app import App, ComposeResult\nfrom textual.screen import Screen\nfrom textual.widgets import Label\n\n\nclass GreenScreen(Screen):\n    BINDINGS = [(\"escape\", \"app.pop_screen\", \"Dismiss the screen\")]\n\n    def compose(self) -&gt; ComposeResult:\n        self.styles.background = \"green\"\n        yield Label(\"Second Screen\")\n\n\nclass MainAop(App):\n    SCREENS = {\"green\": GreenScreen}\n    BINDINGS = [(\"n\", \"push_screen('green')\", \"Green Screen\")]\n\n    def compose(self) -&gt; ComposeResult:\n        yield Label(\"Main screen\")\n\n\nif __name__ == \"__main__\":\n    app = MainAop()\n    app.run()</pre><p>Using keyboard shortcuts makes your code a little less verbose. However, since you aren’t using a&nbsp;&nbsp;widget, the shortcuts are not shown on-screen to the user. When you are on the main screen, you must press the letter “n” on your keyboard to switch to the&nbsp;. Then when you want to switch back, you press “Esc” or escape.</p><p>Here’s what the screen looks like on the&nbsp;:</p><p>Now try using the keys mentioned to swap between the two screens. Feel free to change the keyboard bindings to keys of your own choosing.</p><p>Textual can do much more with Screens than what is covered in this brief tutorial. However, you can use this information as a great starting point for learning how to add one more additional screens to your GUI in your terminal.</p><p>Play around with these examples and then run over to the Textual documentation to learn about some of the other widgets you can add to bring your application to life.</p><p>If you’d like to learn more about Textual, check out my book: <strong>Creating TUI Applications with Textual and Python</strong>, which you can find on the following websites:</p>","contentLength":4365,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null}],"tags":["dev"]}