{"id":"6C2W1azD1rBsV4qJANNfruBrvGgdqLWrPGWtk6Mp1WgfCNcfvBZHFQw","title":"The System Design Newsletter","displayTitle":"Dev - System Design Newsletter","url":"https://newsletter.systemdesign.one/feed","feedLink":"https://newsletter.systemdesign.one/","isQuery":false,"isEmpty":false,"isHidden":false,"itemCount":2,"items":[{"title":"How Figma Scaled to 4M Users—Without Fancy Databases 🔥","url":"https://newsletter.systemdesign.one/p/postgres-scale","date":1744802868,"author":"Neo Kim","guid":70,"unread":true,"content":"<p>Get the powerful template to approach system design for FREE on newsletter signup:</p><p><em>This post outlines how Figma scaled the Postgres database. You will find references at the bottom of this page if you want to go deeper.</em></p><p><em>Note: This post is based on my research and may differ from real-world implementation.</em></p><p>Once upon a time, 2 university students decided to build a meme generator.</p><p>Yet their business idea failed.</p><p>So they pivoted to create a design tool for the browser and called it Figma.</p><p>They stored metadata such as file information and user comments in a  database for simplicity.</p><p>Yet their traffic was massive.</p><p>And it affected latency and performance because of high CPU usage.</p><p>So they  by installing Postgres on a larger machine. It means more CPU.</p><p>Although it temporarily solved their scalability issue, there were new problems.</p><p>Some tables grew extremely fast.</p><p>While smallest unit of partition is a table.</p><p>So a single database couldn’t handle their storage needs.</p><p>They received a ton of write operations.</p><p>It exceeded the input-output per second () limit of a single database. </p><p>So the performance became poor.</p><p>Ship and scale production grade apps at a blistering pace with GibsonAI, your AI-powered serverless database. With GibsonAI, you will:</p><ul><li><p>Design your database with natural language and view it as a diagram (ERD) &amp; code.</p></li><li><p>Deploy both dev and production environments in seconds with one click.</p></li><li><p>Access your database directly or through the secure REST API built for you.</p></li><li><p>Instruct GibsonAI to build, query, or update databases right from your favorite IDE via the GibsonAI MCP server.</p></li><li><p>Migrations, optimization and scaling handled for you.</p></li></ul><p>Here’s how they scaled Postgres step by step:</p><p>They set up database replicas and  towards it.</p><ul><li><p>Reduce latency by keeping data closer to users around the world</p></li><li><p>Increase fault tolerance as replicas could take over when the leader database fails</p></li></ul><p>Yet replicas couldn’t handle some read operations because of <a href=\"https://en.wikipedia.org/wiki/Wikipedia:Replication_lag#:~:text=Replication%20lag%20is%20what%20happens,is%20called%20the%20replication%20lag.\">replication lag</a> and strong consistency needs. So they route those operations to the leader database.</p><p>Besides they added a caching layer to store frequently accessed data, thus reducing the database load.</p><p>They moved tables into separate databases based on the domain.</p><ul><li><p>Scale horizontally by adding more databases</p></li><li><p>Spread workload across databases and reduce bottlenecks</p></li></ul><p>For example, they store file information and user comments in separate databases because file information grows faster than comments. While the workload is different for each table.</p><p>Ready for the next technique?</p><p>They set up <a href=\"https://www.pgbouncer.org/\">PgBouncer</a> as the connection pooler.</p><p>It acts as a TCP proxy holding a pool of connections to Postgres.</p><p>And the client connects directly to PgBouncer instead of Postgres.</p><ul><li><p>Allow clients to reuse the same connection and improve throughput</p></li><li><p>Limit the number of database connections to avoid connection starvation</p></li><li><p>Keep persistent connections with the client to avoid expensive reconnection requests</p></li></ul><p>They moved <em>columns from high-traffic tables</em> into separate tables. </p><p>And then stored those tables in different databases.</p><p>Yet each table has its own database. Put simply, a single table doesn’t spread across many databases.</p><ul><li><p>Isolate sensitive data for security</p></li><li><p>Reduce workload by routing traffic across many databases</p></li><li><p>Achieve high query performance by scanning only a subset of data</p></li></ul><p>Yet vertical partitioning becomes a bottleneck with high write traffic. Because a single database wouldn’t be able to store a table with billions of rows.</p><h3>5. Horizontal Partitioning</h3><p>They <em>split tables at the row level</em> and stored them across many databases for maximum scalability.</p><p>Also they set up a  to route queries to the correct database.</p><ul><li><p>Rewrite expensive queries for performance</p></li><li><p>Manage database topology and support transactions</p></li><li><p>Drop extra requests when it exceed the threshold limit</p></li></ul><p>They used the <em>hash of the partition key to route write requests. </em>Thus distributing data uniformly across databases.</p><p>Besides they co-located tables partitioned by the same key to make transactions and joins easier.</p><p>Figma became a popular design tool with over 40 million users.</p><p>This case study shows Postgres can easily handle internet-scale traffic.</p><p>👋 PS - Do you want to level up at work?</p><ul><li><p>I’ll launch system design deep dives in this newsletter</p></li><li><p>Yet it’ll be available only to paid subscribers of the newsletter</p></li></ul><p>My mission is to help you go from 0 to 1 in system design by spending less than an hour each month. But paid subscription fees will be higher than current pledge fees. So pledge today to get access at a low price.</p><p><em>\"This newsletter is the perfect place to learn system design from big tech deep dives.\"</em> Alexandre</p><p>Subscribe to get simplified case studies delivered straight to your inbox:</p><p><strong>Want to advertise in this newsletter? </strong>📰</p><p>Thank you for supporting this newsletter.</p><p>You are now 141,001+ readers strong, very close to 142k. Let’s try to get 142k readers by 21 April. Consider sharing this post with your friends and get rewards.</p>","contentLength":4902,"flags":null,"enclosureUrl":"https://substack-post-media.s3.amazonaws.com/public/images/8618846e-b8ff-47a4-892d-e0628abbf730_1280x720.gif","enclosureMime":"","commentsUrl":null},{"title":"How Apple Pay Handles 41 Million Transactions a Day Securely 💸","url":"https://newsletter.systemdesign.one/p/how-does-apple-pay-work","date":1743078503,"author":"Neo Kim","guid":69,"unread":true,"content":"<p>Get the powerful template to approach system design for FREE on newsletter signup:</p><p><em>This post outlines how Apple Pay works. You will find references at the bottom of this page if you want to go deeper.</em></p><p><em>Note: This post is based on my research and may differ from real-world implementation.</em></p><p>January 2023 - London, United Kingdom.</p><p>A student named Kenji is on a tourist visit.</p><p>Yet he spends so much time waiting in queue to buy tickets for the underground train.</p><p>He hears about the tap &amp; pay service called Apple Pay from the station officer.</p><p>Although doubtful about its safety, he decides to try it.</p><p>Transitioning to microservices is tough. It’s not just a technical shift, but an organizational one too.</p><p>From defining service boundaries to managing decentralized data and handling interservice communication, many things can go wrong.</p><p>This 80+ page ebook breaks down common migration challenges with examples from dev teams at Uber, Spotify &amp; Netflix, helping you understand the obstacles before you hit them.</p><p>Here’s a simplified version of Apple Pay architecture:</p><h3>Chapter 1: A Credit Card, a Wallet, and an iPhone</h3><p>Kenji enters his credit card details into the Apple Wallet.</p><p>Yet Apple doesn’t store it on the iPhone or Apple servers.</p><p>Instead they send credit card details and iPhone metadata to the payment network, such as Visa or MasterCard, in encrypted form.</p><p>The iPhone metadata includes its model number and secure element ID. Imagine the  as a unique number assigned to each iPhone.</p><p>The payment network verifies the credit card details and generates a device account number (). Think of DAN as a unique random number representing the credit card number, but irreversible.</p><p>Also the <em>to each credit card and iPhone.</em></p><p>The payment network sends DAN to the iPhone in encrypted form. </p><p>And the iPhone stores it inside the , a highly specialized chip, so nobody can access it. Besides Apple servers don’t store DAN for security and privacy.</p><p>While the <em>payment network keeps a copy of the DAN, credit card details, and iPhone metadata</em>.</p><h3>Chapter 2: A Single Tap to Open the Gate</h3><p>Kenji has no internet connection due to roaming.</p><p>Yet he taps his iPhone on the card reader at the train station gate.</p><p>The iPhone communicates with the card reader via near-field communication (). Consider NFC as a short-range, wireless communication standard.</p><p>The card reader creates a transaction record, which contains details such as the payment amount and date.</p><p>The card reader then sends these details to the iPhone via NFC.</p><p>Yet Apple Pay must validate the transaction by checking Kenji’s involvement in it. </p><p>So they ask for his biometric information, such as a touch ID or face ID. They don’t store the biometric information on Apple servers, but only on the secure enclave in the iPhone. </p><p>Imagine the  as a separate processor inside the iPhone, isolated from the rest of the system.</p><p>The secure enclave fetches the encrypted biometric information when Kenji places his finger on the touch ID. </p><p>It confirms his identity by comparing the data with the stored biometric information.</p><p>This approach ensures biometric information never leaves the iPhone.</p><h3>Chapter 3: No Credit Card, No Cash, No Problem</h3><p>The secure enclave confirms Kenji’s identity and signals the secure element.</p><p>Think of the  as a highly specialized chip in the iPhone. It combines DAN and transaction details to create a unique cryptogram. This is called the .</p><p>Imagine the  as a time-based, single-use password to prove a transaction’s legitimacy.</p><p>The iPhone sends an authorization request to the payment network. It contains the request cryptogram and transaction details. Put simply, <em>DAN never leaves the iPhone for security.</em></p><p>The payment network regenerates the request cryptogram by combining the transaction details and DAN copy. <em>A payment is valid only if the cryptogram values are equal.</em></p><h3>Chapter 4: The Problem With Contactless Payment</h3><p>Yet the train station keeps Kenji's gate closed until his payment gets confirmed.</p><p>So the payment network creates a response code, a number representing the payment status. Then combines it with the DAN and the request cryptogram to create a new cryptogram. This is called the .</p><p>The payment network sends a response to the card reader. It includes only the response code and response cryptogram. Put simply, <em>doesn’t send DAN and request cryptogram.</em></p><p>The iPhone regenerates the response cryptogram using the request cryptogram, DAN, and response code. </p><p>The card reader considers a payment network authentic only if cryptogram values are equal. While the response code represents the payment status.</p><p>A credit card displays sensitive information, so there’s a risk of information misuse. </p><p>But Apple Pay is safer as it doesn’t show credit card information to anyone.</p><p>Apple Pay relies on the <a href=\"https://en.wikipedia.org/wiki/EMV\">EMV</a> contactless payment specification as part of its security model. Think of  as a chip-based card payment authentication mechanism.</p><p>While Kenji visited the main tourist sights in London and happily returned home.</p><p>👋 PS - Do you want to level up at work?</p><ul><li><p>I’m launching system design deep dives in a few months.</p></li><li><p>Yet it’ll be available only to paid subscribers of this newsletter.</p></li></ul><p>My mission is to help you go from 0 to 1 in system design by spending less than an hour each month. Yet paid subscription fees will be higher than current pledge fees. So pledge today to get access at a low price.</p><p><em>“This newsletter is an amazing resource for learning system design.” </em>Alex</p><p>Subscribe to get simplified case studies delivered straight to your inbox:</p><p><strong>Want to advertise in this newsletter? </strong>📰</p><p>Thank you for supporting this newsletter. Consider sharing this post with your friends and get rewards. Y’all are the best.</p>","contentLength":5649,"flags":null,"enclosureUrl":"https://substack-post-media.s3.amazonaws.com/public/images/f75ede44-6b6f-4e22-ae4d-dc762586955d_1280x720.gif","enclosureMime":"","commentsUrl":null}],"tags":["dev"]}