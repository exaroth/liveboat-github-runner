{"id":"82kPqomaPXmNomrHzpZWfbkQxiiNUBTAYKxHR5qZBEpf","title":"Hacker News: Show HN","displayTitle":"HN Show","url":"https://hnrss.org/show?points=60","feedLink":"https://news.ycombinator.com/shownew","isQuery":false,"isEmpty":false,"isHidden":false,"itemCount":20,"items":[{"title":"Show HN: Interactive systemd – a better way to work with systemd units","url":"https://isd-project.github.io/isd/","date":1737217323,"author":"kai-tub","guid":155,"unread":true,"content":"<p>I created a TUI for systemd/systemctl called isd (interactive systemd).</p><p>It provides a fuzzy search for units, auto-refreshing previews, smart sudo handling, and a fully customizable, keyboard-focused interface for power users and newcomers alike.</p><p>It is a more powerful (but heavier) version of sysz, which was the inspiration for the project.</p><p>This should be a huge timesaver for anybody who frequently interacts with or edits systemd units/services. And if not, please let me know why! :)</p>","contentLength":485,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42749402"},{"title":"Show HN: Compile C to Not Gates","url":"https://github.com/tomhea/c2fj","date":1737142597,"author":"tomhee","guid":154,"unread":true,"content":"<p>Hi! I've been working on the flipjump project, a programming language with 1 opcode: flip (invert) a bit, then jump (unconditionally). So a bit-flip followed by more bit-flips. It's effectively a bunch of NOT gates.\nThis language, as poor as it sounds, is RICH.</p><p>Today I completed my compiler from C to FlipJump. It takes C files, and compiles them into flipjump. I finished testing it all today, and it works!\nMy key interest in this project is to stretch what we know of computing and to prove that anything can be done even with minimal power.</p><p>I appreciate you reading my announcement, and be happy to answer questions.</p>","contentLength":619,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42742350"},{"title":"Show HN: GUI for editing Mermaid class diagrams","url":"https://docs.mermaidchart.com/blog/posts/gui-for-editing-mermaid-class-diagrams","date":1737128161,"author":"knsv","guid":153,"unread":true,"content":"<h3>Editing Mermaid Class Diagrams with the Visual Editor</h3><p>Mermaid charts are widely used for their ability to represent complex diagrams quickly, and now, thanks to a new update, editing&nbsp;&nbsp;has become even easier and more intuitive. The latest feature extends the&nbsp;&nbsp;to support direct interaction with class diagrams, offering users a variety of tools to enhance their diagramming experience.</p><p>In this blog post, we’ll walk you through the new features in the&nbsp;, how to use them, and what changes have been made to streamline editing class diagrams. Let’s dive in!</p><p>Class diagrams are a type of&nbsp;<strong>UML (Unified Modeling Language)</strong>&nbsp;diagram used to model the structure of a system by showing its classes, attributes, methods, and the relationships between objects. They are a fundamental tool in object-oriented design and help visualize how different parts of a system interact with each other.</p><ul><li>&nbsp;represent entities, such as objects or concepts.</li><li>&nbsp;are the properties or characteristics of classes.</li><li>&nbsp;are the actions or operations that a class can perform.</li><li>&nbsp;(e.g., associations, inheritance) show how classes are connected or interact.</li></ul><p>Here’s an example of a&nbsp;<strong>basic Mermaid class diagram</strong>&nbsp;when rendered by Mermaid:</p><p>This is the code that generated the diagram:</p><pre><code><code>classDiagram\n    ClassA &lt;|-- ClassB\n    ClassB : +String name\n    ClassB : +int age\n    ClassB : +void displayDetails()\n    ClassC o-- ClassB\n    ClassC : +String description</code></code></pre><p>Looking at the code, you can see how it represents the diagram:</p><ul><li>&nbsp;is a parent of&nbsp;, indicated by&nbsp;.</li><li>&nbsp;has two attributes (&nbsp;and&nbsp;) and one method ().</li><li>&nbsp;has an&nbsp;&nbsp;(denoted by&nbsp;) with&nbsp;&nbsp;and an attribute&nbsp;.</li></ul><p>Previously, creating or editing such diagrams would require manually writing or modifying the Mermaid syntax. Now, with the new&nbsp;, you can easily create and update these diagrams with just a few clicks.</p><p>The&nbsp;&nbsp;introduces several new tools for class diagrams:</p><ul><li><strong>Change Diagram Rendering Direction</strong>: Adjust the diagram’s layout, whether it’s top-down, left-right, etc.</li><li>: Easily add new classes to the diagram.</li><li>: Add a title to the diagram or insert notes not linked to specific classes.</li><li>: Define a placeholder for classes that belong to a specific namespace.</li><li><strong>Update Diagram Configuration</strong>: Toggle options like the visibility of the&nbsp;&nbsp;for a cleaner look.</li><li>: Select from various themes and adjust the look and feel of the diagram for better presentation.</li></ul><p>With these tools, you can interact with your diagrams dynamically, significantly reducing the effort required to manage complex relationships and attributes.</p><h3><strong>Creating New Classes and Relationships</strong></h3><p>One of the most powerful features of the new editor is its intuitive way of adding new classes and establishing relationships between them. Here’s how it works:</p><ul><li><strong>Create a New Class with an Existing Relationship</strong>: Click on an existing class in your diagram, then drag to an empty space. A new class will appear with a direct relationship to the original class.</li><li><strong>Create Relationships Between Existing Classes</strong>: Quickly establish relationships between existing classes by dragging from one class and dropping the relationship line onto another class. This eliminates the need for manual code input.</li></ul><p>When working with relationships, you can click on any existing connection to bring up a toolbar. This toolbar allows you to:</p><ul><li>Change the type of relationship (e.g., inheritance, association).</li><li>Set the cardinalities (e.g., one-to-many, many-to-many).</li><li>Add labels to relationships by double-clicking on the connection.</li></ul><p>These controls make it easy to iterate on your diagram as your design evolves.</p><p>The Visual Editor provides a powerful dialog interface for modifying class properties without touching any code. When you double-click on a class in your diagram, a comprehensive editing panel appears that lets you fine-tune every aspect of the class definition.</p><p>At the top of the dialog, you can specify the class’s annotation (such as “Abstract”) and modify its name. Below that, the interface is divided into clear sections for attributes and methods. Each class property can be precisely configured:</p><ul><li>Define visibility modifiers (like public/private using&nbsp;&nbsp;or&nbsp;).</li><li>Set the data type (such as&nbsp;,&nbsp;).</li><li>Specify the attribute name.</li><li>Add additional modifiers as needed.</li></ul><ul><li>Set the method visibility.</li><li>Specify method names and parameters.</li><li>Add or remove methods with intuitive controls.</li></ul><p>The editor maintains proper UML syntax automatically, handling details like the abstract class notation (shown as «Abstract» in the diagram) and proper formatting of attributes and methods. Changes are previewed in real-time, and you can either save your modifications or cancel to revert to the previous state.</p><p>This visual approach to class editing makes it significantly easier to maintain complex class diagrams, especially for team members who might be less familiar with Mermaid’s syntax.</p><h3><strong>Additional Tips for Optimizing Your Diagrams</strong></h3><ul><li><strong>Experiment with Different Layouts</strong>: Play with layout and theme options to find the best look for your diagram.</li><li>: Use the note feature to explain parts of your diagram, helping to clarify complex relationships.</li></ul><p>The new Mermaid Visual Editor tools make diagramming more efficient and accessible. Whether you’re building a new class diagram from scratch or refining an existing one, these updates save you time and effort, letting you focus on what truly matters: the design and structure of your system.</p><p>Start exploring these features today and take your class diagrams to the next level! Here’s how to get started:</p><ol><li> Open up a new diagram and click on “ER Diagram” from the Templates menu in the editor.</li><li><strong>Edit, tweak, and automate: </strong>Use our simple code editor (or message Mermaid AI) to fine-tune your diagram to fit your needs.</li></ol><p>We wish you luck in creating effective class diagrams!</p><div><div>Creator of MermaidJS and founder of Mermaid Chart</div></div>","contentLength":5783,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42738656"},{"title":"Show HN: Interactive game teaching dark patterns in UX design","url":"https://games.productartistry.com/games/dark-patterns","date":1737123836,"author":"rohandehal","guid":152,"unread":true,"content":"<p>Uncover the hidden design tricks that manipulate user decisions online.</p>","contentLength":71,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42737778"},{"title":"Show HN: DBOS TypeScript – Lightweight Durable Execution Built on Postgres","url":"https://github.com/dbos-inc/dbos-transact-ts","date":1737047435,"author":"KraftyOne","guid":151,"unread":true,"content":"<p>Hi HN - Peter from DBOS here with my co-founder Qian (qianl_cs)</p><p>Today we want to share our TypeScript library for lightweight durable execution. We’ve been working on it since last year and recently released v2.0 with a ton of new features and major API overhaul.</p><p>Durable execution means persisting the execution state of your program while it runs, so if it is ever interrupted or crashes, it automatically resumes from where it left off.</p><p>Durable execution is useful for a lot of things:</p><p>- Orchestrating long-running or business-critical workflows so they seamlessly recover from any failure.</p><p>- Running reliable background jobs with no timeouts.</p><p>- Processing incoming events (e.g. from Kafka) exactly once</p><p>- Running a fault-tolerant distributed task queue</p><p>- Running a reliable cron scheduler</p><p>- Operating an AI agent, or anything that connects to an unreliable or non-deterministic API.</p><p>What’s unique about DBOS’s take on durable execution (compared to, say, Temporal) is that it’s implemented in a lightweight library that’s totally backed by Postgres. All you have to do to use DBOS is “npm install” it and annotate your program with decorators. The decorators store your program’s execution state in Postgres as it runs and recover it if it crashes. There are no other dependencies you have to manage, no separate workflow server–just your program and Postgres.</p><p>One big advantage of this approach is that you can add DBOS to ANY TypeScript application–it’s just a library. For example, you can use DBOS to add reliable background jobs or cron scheduling or queues to your Next.js app with no external dependencies except Postgres.</p><p>Also, because it’s all in Postgres, you get all the tooling you’re familiar with: backups, GUIs, CLI tools–it all just works.</p><p>Want to try DBOS out?  Initialize a starter app with:</p><pre><code>    npx @dbos-inc/create -t dbos-node-starter\n</code></pre>\nThen build and start your app with:<pre><code>    npm install\n    npm run build\n    npm run start\n</code></pre>\nAlso check out the docs: <a href=\"https://docs.dbos.dev/\" rel=\"nofollow\">https://docs.dbos.dev/</a><p>We'd love to hear what you think! We’ll be in the comments for the rest of the day to answer any questions you may have.</p>","contentLength":2132,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42727970"},{"title":"Show HN: I made an open source directory of where to showoff your projects","url":"https://github.com/KingMenes/awesome-launch","date":1737033797,"author":"soGeneri","guid":150,"unread":true,"content":"<p>I made an open source directory for sharing projects</p><p>Ever wondered how to show off that something you just built? Look no further! \nAwesome Launch is meant to be a list of communities and forums you can share your projects to get feedback or your first users.</p><p>Anyone is free to contribute sites and resources. Hope you enjoy!</p>","contentLength":323,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42724757"},{"title":"Show HN: News Minimalist – News ranked by significance","url":"https://www.newsminimalist.com/","date":1736973315,"author":"yakhinvadim","guid":149,"unread":true,"content":"<p>Today ChatGPT readnews articles and gaveof them a<a href=\"https://www.newsminimalist.com/about#how-is-significance-score-calculated\">significance score</a>over 5.5.Read their summaries in<a href=\"https://newsletter.newsminimalist.com/subscribe/\" target=\"_blank\">our newsletter</a>, or fully customize your feed in<a href=\"https://www.newsminimalist.com/premium\">premium</a>.</p>","contentLength":154,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42716557"},{"title":"Show HN: I made a tool to save multimedia from various platforms","url":"https://www.saveplays.com/","date":1736973030,"author":"sanusihassan","guid":148,"unread":true,"content":"<h2 data-astro-cid-kdg5pbv6=\"\">Free Online Video Downloader.</h2><h3 data-astro-cid-kdg5pbv6=\"\">Guide to Using SavePlays.com's Online Video Downloader</h3><p data-astro-cid-kdg5pbv6=\"\">Efficiently download videos and music with SavePlays.com, the leading Online Video Downloader. Secure your favorite media directly from the web with no need for additional software. Our user-friendly platform ensures downloading videos is simple and effective.</p><p data-astro-cid-kdg5pbv6=\"\">Conveniently access and download a wide array of content, from top movies and trending TV series to exciting sports clips. Just paste the video URL into the specified field and hit the Download button.</p><h4 data-astro-cid-kdg5pbv6=\"\">Download High-Quality MP4 Videos</h4><p data-astro-cid-kdg5pbv6=\"\">Streaming videos online with a fast connection offers immediate access, but offline playback comes with its own advantages. SavePlays.com provides a powerful video downloader that keeps your downloads in pristine visual quality, enabling you to save videos in clear, high-definition MP4 format.</p><p data-astro-cid-kdg5pbv6=\"\">With our reliable service, enjoy your favorite videos anytime, anywhere, by converting and saving them as high-quality HD MP4 files.</p><h5 data-astro-cid-kdg5pbv6=\"\">How to Download Videos Online in MP4 Format with High Definition</h5><ol data-astro-cid-kdg5pbv6=\"\"><li data-astro-cid-kdg5pbv6=\"\"> Paste your video link. <p data-astro-cid-kdg5pbv6=\"\">Copy the URL of your desired video from your preferred platform and paste it into the input field on the SavePlays.com homepage.</p></li><li data-astro-cid-kdg5pbv6=\"\"> Select download quality. <p data-astro-cid-kdg5pbv6=\"\">Our platform provides a choice of resolutions and formats. Choose the one that suits your requirements.</p></li><li data-astro-cid-kdg5pbv6=\"\"> Enjoy downloaded videos. <p data-astro-cid-kdg5pbv6=\"\">Click the Download button and save the video file directly to your device. Play it anytime without internet dependency.</p></li></ol>","contentLength":1492,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42716487"},{"title":"Show HN: I built a fair alternative to Product Hunt for indie makers","url":"https://news.ycombinator.com/item?id=42712666","date":1736957347,"author":"lakshikag","guid":147,"unread":true,"content":"I’m an indie maker, just like many of you. A few months back, I launched a product on one of the big platforms, and... nothing. It got buried under dozens of other launches within hours. All that work, all that excitement is gone in the blink of an eye. No one even saw it.<p>It stung. I wasn’t mad, well, maybe a little but mostly, I just felt invisible. The truth is, indie makers like me don’t have big teams or budgets to fight for visibility. We rely on genuine support and connections. I couldn’t stop thinking about how many great ideas never get the attention they deserve because they’re overshadowed.</p><p>• 10 launches per day, max. Limiting the number of daily launches ensures that every product gets its moment in the spotlight.</p><p>• 2 votes per user, per day. This isn’t a popularity contest. You only get two votes, so people have to really think about which products they want to support. It’s quality over quantity.</p><p>• “Under Radar” feature. This one’s my favorite. If a product doesn’t get much love on its launch day, it gets a second chance to shine the next day. Because timing shouldn’t be the only thing standing between you and success.</p><p>There’s more like badges, comments, streaks but the heart of it is simple: a fair shot for indie makers.</p><p>I built this because I believe every product deserves to be seen, especially the ones built by solo makers and small teams putting their heart into something they truly care about. And I didn’t build this to compete with Product Hunt. I built it to give indie makers the platform they deserve, one where their creativity truly gets noticed.</p><p>If this sounds like something you’d want to check out, I’d love your thoughts. I’m still tweaking and improving it every day based on feedback.</p><p>Let me know what you think and if you’ve got a product you’re proud of, I’d love to see it shine.</p>","contentLength":1876,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42712666"},{"title":"Show HN: LLMpeg","url":"https://github.com/jjcm/llmpeg","date":1736908183,"author":"jjcm","guid":146,"unread":true,"content":"<p>Inspired by the \"ffmpeg by examples\" comments, here's a simple script that pulls it all together. Set your OpenAI API key env var and make the script executable, and you're golden.</p>","contentLength":180,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42706637"},{"title":"Show HN: Simplex: Automate browser workflows using code and natural language","url":"https://www.simplex.sh/playground","date":1736890214,"author":"marcon680","guid":145,"unread":true,"content":"<div>Waiting for code execution...</div>","contentLength":29,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42704160"},{"title":"Show HN: WASM-powered codespaces for Python notebooks on GitHub","url":"https://docs.marimo.io/guides/publishing/playground/#open-notebooks-hosted-on-github","date":1736876801,"author":"mscolnick","guid":144,"unread":true,"content":"<p>Our <a href=\"https://marimo.app\">online playground</a> lets you\ncreate and share marimo notebooks for free, without creating an account.</p><p>Playground notebooks are great for embedding in other web pages — all the\nembedded notebooks in marimo's own docs are playground notebooks. They\nare also great for sharing via links.</p><div><p>WebAssembly notebooks only</p><p>Currently, the online playground only allows the creation of <a href=\"https://docs.marimo.io/guides/wasm/\">WebAssembly\nnotebooks</a>. These are easy to share and embed in other\nweb pages, but have some limitations in packages and performance.</p></div><p><em>The notebook embedded below is a playground notebook!</em></p><h2>Creating and sharing playground notebooks</h2><p>Think of <a href=\"https://marimo.new\">marimo.new</a> as a\nscratchpad for experimenting with code, data, and models and for prototyping\ntools, available to you at all times and on all devices.</p><div><p>Saving playground notebooks</p><p>When you save a WASM notebook, a copy of your code is saved to your\nweb browser's local storage. When you return to\n<a href=\"https://marimo.app\">marimo.app</a>, the last notebook you worked on will be\nre-opened. You can also click a button to save your notebook to\nthe <a href=\"https://docs.marimo.io/guides/publishing/community_cloud/\">Community Cloud</a>.</p></div><p>At <a href=\"https://marimo.app\">marimo.app</a>, save your notebook and then click the\n button to generate a shareable permalink to your\nnotebook.</p><p>Please be aware that marimo permalinks are publicly accessible.</p><h3>Open notebooks hosted on GitHub</h3><div><p>For a convenient way to create notebooks from GitHub, drag and drop the\nfollowing button to your bookmarks bar:</p><p>Clicking the bookmark when you are viewing a notebook will\nopen it in <a href=\"https://marimo.app/\">marimo.app</a>.</p></div><div><p>You can also create Playground notebooks from Jupyter notebooks hosted\non GitHub. marimo will attempt to automatically convert the notebook\nto a marimo notebook.</p></div><p>Notebooks created from GitHub links have the entire contents of the repository\nmounted into the notebook's filesystem. This lets you work with files\nusing regular Python file I/O!</p><p>When constructing paths to data files, make sure to use\n<a href=\"https://docs.marimo.io/api/miscellaneous/#marimo.notebook_dir\"></a> to ensure that paths work both\nlocally and in the playground.</p><p>Include an \"open in marimo\" badge in your README to link to playground\nnotebooks hosted on GitHub:</p><h3>Creating playground notebooks from local notebooks</h3><p>In the marimo editor's notebook action menu, use <code>Share &gt; Create WebAssembly\nlink</code> to get a  URL representing your notebook:</p><p>The obtained URL encodes your notebook code as a parameter, so it can be\nquite long. If you want a URL that's easier to share, you can <a href=\"https://docs.marimo.io/guides/publishing/playground/#share-via-links\">create a\nshareable permalink</a>.</p><p>Your  URLs can be configured using the following parameters.</p><p>To view a notebook in read-only mode, with\ncode cells locked, append  to your URL's list of query parameters\n(or  if your URL doesn't have a query string).</p><ul><li><code>https://marimo.app/l/83qamt?mode=read</code></li></ul><p>To hide the  header, append  to your URL's list of query\nparameters (or  if your URL doesn't have a query string).</p><ul><li><code>https://marimo.app/l/83qamt?embed=true</code></li><li><code>https://marimo.app/l/83qamt?mode=read&amp;embed=true</code></li></ul><p>By default, WASM notebooks expose your Python code to viewers. If you've\nenabled read-only mode, you can exclude code with\n. If you want to include code but have it be hidden\nby default, use the parameter .</p><p>A sufficiently determined user would still be able\nto obtain your code, so  think of this as a security feature; instead,\nthink of it as an aesthetic or practical choice.</p><h2>Embedding in other web pages</h2><p>WASM notebooks can be embedded into other webpages using the HTML \ntag.</p><h3>Embedding a blank notebook</h3><p>Use the following snippet to embed a blank marimo notebook into your web page,\nproviding your users with an interactive code playground.</p><div><pre><code></code></pre></div><h3>Embedding an existing notebook</h3><div><pre><code></code></pre></div><h3>Embedding an existing notebook in read-only mode</h3><p>You can optionally render embedded notebooks in read-only mode by appending\n to your URL.</p><div><pre><code></code></pre></div>","contentLength":3582,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42700852"},{"title":"Show HN: Value likelihoods for OpenAI structured output","url":"https://arena-ai.github.io/structured-logprobs/","date":1736869963,"author":"ngrislain","guid":143,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42698753"},{"title":"Show HN: A blocklist to remove spam and bad websites from search results","url":"https://github.com/popcar2/BadWebsiteBlocklist","date":1736863601,"author":"popcar2","guid":142,"unread":true,"content":"<p>I've been fed up with search results so much that I decided to make a giant blocklist to remove garbage links by using uBlacklist.</p><p>I browsed other blocklists and wasn't very satisfied from what exists now; the goal of this one is to be super organized and transparent, explaining why each site was blocked via issues. Contributions welcome!</p><p>Even though around 100 domains are blocked so far, I already noticed a big improvement in casual searches. You'd be surprised how some AI generated websites can dominate the #1 page on DuckDuckGo.</p>","contentLength":535,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42697346"},{"title":"Show HN: Simple Docker Hosting","url":"https://sliplane.io/","date":1736858113,"author":"jonas_scholz","guid":141,"unread":true,"content":"<div><p>We setup a convenient deploy pipeline for you. New commits to your repository automatically get shipped.</p></div><div><p>Deploy from a library of more than 400k public images with the click of a button.</p></div><div><p>Easily add and remove environment variables. We will keep them securly stored for you and your team.</p></div><div><div><h3>Automatic Health and security checks</h3></div><p>We regulary visit to check if your apps are alright. You instantly get notifications if something is down.</p></div><div><div><h3>Secure server configuration</h3></div><p>Don't worry about fiddleing with security, we take care of securing your servers and keeping them up to date.</p></div><div><p>No need to crawl through the filesystem. Quickly check and monitor error logs inside of our platfrom. </p></div>","contentLength":665,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42696477"},{"title":"Show HN: Another ELF Analysis Toolkit","url":"https://github.com/M3rcuryLake/Nyxelf","date":1736843588,"author":"M3rcurylake","guid":140,"unread":true,"content":"<p>Nyxelf simplifies static and dynamic analysis of ELF binaries, enabling you to extract valuable insights effortlessly. And can be used for vulnerability assessments, unpacking, syscall tracing, and memory analysis.</p>","contentLength":214,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42695040"},{"title":"Show HN: Decentralized robots (and things) orchestration system","url":"https://docs.p2p.industries/","date":1736836282,"author":"hannesfur","guid":139,"unread":true,"content":"<p>The engineers behind hyveOS are happy to help you get started with\ninstallation, system internals, application development, or anything else.</p>","contentLength":141,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42694384"},{"title":"Show HN: New search engine and free-FOIA-by-fax-via-web for US veteran records","url":"https://www.birls.org/","date":1736742126,"author":"Asparagirl","guid":138,"unread":true,"content":"<div><h3>Veterans' Records: The Early Days</h3><p>Veterans have been given pensions by the US government dating back to the American Revolution. Pensions that predate the 20th century can generally be found at the National Archives (NARA), organized by conflict, and include voluminous tomes of information about pensioners from the Revolution, the War of 1812, the Civil War, etc. These pension files have been indexed online, and many of the files themselves have been digitized as well.</p><p><strong>But where are the files for the veterans who served in later conflicts?</strong> Their records lie in what are called the XC Pension Files, which by and large still live untapped, under the custody of the Veterans Benefits Administration (the VBA), a subdivision of the VA, hidden away in 1.1 million boxes at Federal Records Centers scattered throughout the country.</p><p>In 1917, as World War I was ending, the US instituted a modernization of their veterans pension system. Veterans Claims Files (called C-Files, but not to be confused with USCIS' C-Files) were created, with one claims file for every veteran who filed with the federal government for benefits. <strong>Every veteran was assigned a claims number (or C-Number), and a file was created containing materials about their service, family, medical care, and benefits.</strong></p><p>A veteran would apply for benefits via his local VA Field Office (or whatever predecessor locations were called) at some point after his separation from the service, and they would store the records there. A Field Office would periodically retire files when they were no longer needed for active agency use. Generally this would correspond to when nobody was claiming benefits from that veteran any longer, in other words, when the veteran and his dependents had died. When a veteran died, their file would be denoted an XC pension, and their VA Master Index Card would often be updated as well, to show that the veteran was deceased.</p><p>Field Offices would periodically send boxes of these now-inactive files to Federal Records Centers (FRC), a system of warehouses all over the country maintained by NARA. Whenever the FRC would accession boxes from a particular Field Office, they would be assigned an Accession Number, possibly reboxed, and files would generally be organized by their “terminal digit,” a system of organization many federal agencies used during the 20th century. It is unknown how many files there are exactly, but there could easily be 5-20 files per cubic foot, meaning that <strong>there are likely tens of millions of deceased veterans' files in total across the FRCs</strong>.</p></div><div><h3>The Veterans Administration Master Index (VAMI): the 1917-1940 series</h3><p>In 1930, the various agencies that administered these benefits were merged into the Veterans Administration, and they subsequently undertook a project to create a Master Index of their many types of files, thus creating the Veterans Administration Master Index (VAMI). The VAMI indexed various records series, such as service records and pension files and life insurance policies and educational records, some of which no longer survive, except as noted on the index.</p><p>The first consolidation of this index was actively maintained until 1940, and it cataloged <strong>veterans who had active claims (that is, files which were still open, perhaps providing benefits to their heirs) between 1917 to 1940</strong>, although subsequent annotations were made in the index in later decades (sometimes written in pencil on the cards), before the series of the 1917-1940 cards were eventually microfilmed in the 1960s.</p><p>Those hundreds of microfilm reels were then stored at the National Archives and Records Administration (NARA) facility in St. Louis, Missouri -- but not the main NARA facility in Washington DC, and not online anywhere. Despite having an incredible wealth of information, their existence were not well-known to researchers. Then about five years ago, the non-profit organization <a href=\"https://www.ReclaimTheRecords.org/\">Reclaim the Records</a> -- who also built this website here -- became aware of the value of the reels thanks to a military historian on its board of directors. They worked with the non-profit organization <a href=\"https://www.FamilySearch.org/\">FamilySearch</a> to finally get those reels digitized and freely published, for public use. FamilySearch even created the first-ever text transcription of some of the fields of data on the card images, including names, birthdates, service dates, and hometowns or residences of the veterans. Here is <a href=\"https://www.familysearch.org/search/collection/2968245\">the VAMI entry in FamilySearch's Catalog</a>.</p><p>Following the new digitization, the records were also finally added to NARA's own online Catalog; here is <a href=\"https://catalog.archives.gov/id/76193916\">the entry for the VAMI in the NARA Catalog</a>, which also contains the scanned images. The commercial genealogy company Ancestry.com has also inputted a scrape of FamilySearch's text database of the VAMI Cards into their system, but they do not have the underlying images.</p></div><div><h3>The Veterans Administration Master Index (VAMI): the post-1940 series</h3><p><strong>Soldiers who had claims active after 1940 were put into a different subseries of index, running through the late 1970s.</strong> This index is also stored at NARA St Louis and it has been digitized, but has not been made available to the public in bulk because it contains personally identifiable information about many living soldiers. However, it is important to note that <strong>NARA can do lookups of specific cards in this series for specific veterans</strong>, if asked by a researcher.</p><p>Because of the 1973 fire at the National Personnel Records Center that destroyed millions of 20th century Official Military Personnel Files (OMPFs), the VAMI serves as one of the most accessible sources to indicate if someone served in the early-mid 20th century. It is not exhaustive, however, as <strong>the VAMI is an index of veterans who claimed VA benefits, and not of all veterans</strong>. Most soldiers wanted their benefits and pensions, but filing a claim was not obligatory, and some people may have not done so, or may not have been eligible for benefits.</p><p>While the now-digitized 1917-1940 VAMI series includes primarily WWI and Spanish-American War veterans, there were still living soldiers or dependents from prior conflicts as well, meaning that files from other wars were still considered active. These pensions became rolled into the modern C-File system. In other words, many Civil War Veterans whose pensions were still being paid in the 20th century, had their pension files taken from the Civil War Pension Files series, and consolidated into the modern C-Files series. These records subsequently often did not transfer to NARA, even though they pertain to an individual who was born more than 150 years ago. This is apparent if a Civil War solider appears in the VAMI. It's possible that in later years, a Civil War solder's file did move to NARA though, as the index has been static microfilm for more than half a century.</p><p>The Index Card itself is very valuable, because it contains many biographical details about the veteran, and is easily accessible online for free. In addition to containing the solider's name, date of birth, and C-Number, it includes their enlistment and discharge dates, their service number, their address (there is some debate as to when the listed address is from, but  address of the veteran is there), the unit in which they served, their rank, and often their date of death. There are a number of codes that are also included, but these generally do not lead to surviving files. <a href=\"https://www.archives.gov/files/calendar/genealogy-fair/2018/6-csar-handout3.pdf\">NARA has a detailed description about what the codes indicate here</a>. The later VAMI cards look substantially the same, although they were microfilmed terribly, and are often barely legible.</p></div><div><p>Enter BIRLS. In the 1980s, The VA decided to modernize their systems, and created a database, <strong>the Beneficiary Identification Records Locator Subsystem</strong> (or  for short), rather than the paper index cards of the VAMI. This new BIRLS database aspired to input all of the information contained in the VAMI so as to render the index cards redundant.</p><p>But once again, much like the earlier Veterans Administration Master Index before it, <strong>BIRLS is a database of veterans who claimed (or whose heirs claimed) some kind of service-related benefit through the VA in the past half-century or so, and it is not a comprehensive data set of every veteran</strong>. Many veterans who did not have any contact with the VA (and whose families did not either) within the past forty to fifty years will not be included in BIRLS, although the VA may indeed still have some records about them, which would potentially be accessible to a researcher under the Freedom of Information Act.</p><p>While the VA originally planned to accomplish a comprehensive review of their files in the 1980s, their goal was never fully realized, and BIRLS only exists as a partial index to claimants, as they never fully backfilled the early 20th century veterans. It contains nearly every claimant whose file has been active in the last 40-50 years, along with many older ones. Because these files generally remain open until the death of the veteran and their spouse, many WWI (and even Civil War) veterans do appear in BIRLS. A WWI solder could have been born in 1890, and died in 1980, well into the era of automation. Had he had a spouse who was considerably younger, the file could have yet remained open for decades further. As a general rule,  WWII and later veterans who claimed benefits would be in BIRLS. While WWI soldiers are not guaranteed to be listed in BIRLS, they are exhaustively indexed in the earlier VAMI.</p><p>For later veterans who aren't in BIRLS, it's always possible to email NARA St Louis and have them search for a VAMI card from the later not-yet-published series. <strong>Additionally, the BIRLS database extract that is available online here, both for search and for download, only contains information for people for whom the VA was able to confirm the veteran was deceased as of 2020.</strong> It's possible that a veteran's name might be listed in the full and unredacted version of the BIRLS database that is still held at the VA, but if the veteran was not yet known to the VA as having died, the information was not provided here.</p><p>Furthermore, not every single BIRLS entry corresponds to a Claims File (C-File), but the majority do. It's possible that someone could be listed in BIRLS who had a different type of file, generally one that has been destroyed, although occasionally the VA has something else, such as an insurance file.</p></div><div><h3>Using the Freedom of Information Act (FOIA) for Deceased Veterans' Files</h3><p><strong>Once you've found someone of interest listed in the VAMI index cards or the BIRLS database, the next step is to request a copy of their Claims File (C-File) from the Veterans Benefits Administration (VBA) sub-agency within the Veterans Administration, through the Freedom of Information Act (FOIA).</strong> For these types of files, and for this particular agency, the best way to submit your FOIA request is via fax - </p><p>The VBA recently stopped accepting emailed FOIA requests for files, and anecdotally, even FOIA requests that get mailed on paper often do not get processed properly. (Yes, this is a violation of the more than fifty-year-old law.) The VBA's Centralized Support Division is the office that processes these requests, and their workflow is simply not well-oiled to manage FOIA requests. They are used to processing requests by veterans and their next-of-kin for files, but not from the general public. Not many researchers and genealogists had been making requests for these Claims Files, because they usually had no easy access to the underlying indices or database, and no easy way to make a request for the C-File to the agency even if they did find someone's name - until now.</p><p>This new BIRLS website enables researchers to not only search through the previously-inaccessible BIRLS database -- or rather, the portion of that database where the VA has determined the veteran is deceased -- and even download the raw data set, if preferred. But better yet, researchers can now use the search results on this website to build and launch their own FOIA request, right from their web browser, <strong>creating and sending a personalized FOIA request to the VBA via fax</strong>, using an online fax API system, thereby circumventing the agency's general FOIA non-compliance.</p><p>Because the agency is not used to processing large numbers of FOIA requests from the general public, the responses that researchers and genealogists have gotten from these FOIA requests are often a bit messy. The VBA sometimes can't find files on the first try, or they may try to send out partial files, or they might redact things they shouldn't redact, especially on a deceased person's record where there should be few or no privacy concerns.</p><p>Under FOIA, agencies can generally only provide records about deceased individuals, but there is widely followed case law that allows agencies to presume death, if the individual was born more than 100 years ago.</p><p>Best practices would be to include proof of death of the subject of record, their spouse, and anyone else thought to be mentioned in the file, so as to avoid any possible redactions. For the case of veterans who served in the early 20th century, this is less relevant, but if someone were to request a file someone who only died recently, this would be more important.</p><p>In the cases in which a file is not properly produced, it is necessary to file a FOIA appeal to the VA's Office of General Counsel at this email address: <a href=\"https://www.birls.org/cdn-cgi/l/email-protection#6609010500090f0707161603070a1526100748010910\"></a>. Provide a copy of the response letter, and explain why the search / production was deficient.</p><p>In the cases where they say a file cannot be found, attach a copy of the BIRLS entry or the VAMI Card, to show that a file should exist. If redactions were made improperly, call out what pages have things that should be unmasked. If they left out pages, tell them!</p><p>The Appeals Office is usually able to handle these issues promptly, and can instruct the VBA to properly process the request. In cases where the record truly cannot be found, they will provide more of an explanation about why.</p><p>Once the VBA  sends out a file, the results can be glorious.</p></div><div><h3>What to Expect in the Claims File (C-File)</h3><p><strong>These files can be a goldmine for a genealogist, historian, journalist, or other researcher.</strong> They often include records from the veteran's civilian life that may be annoying or even otherwise impossible to obtain.</p><p>There may be copies of vital records, meaning birth, baptismal, marriage, divorce, or death certificates. There may even be records of formal or informal name changes, to justify why benefits are going to someone who served under a different name.</p><p>The documents will often talk about the veteran's next of kin: generally a spouse or a child. They often ask for parents' and siblings' names and biographical information. One file we've seen even had a whole chain of correspondence with an immigrant veteran's mother back in Italy, who was being paid some sort of allowance while her son was enlisted.</p><p>There is often a lot of content discussing medical treatment, which often show the extent of the service member's war or training injuries, and often their end of life care. There are letters from doctors, medical exam results, reports about surgeries, things that will never exist anywhere else.</p><p>The files do not usually have a significant amount of material from the OMPF, but there will almost always be a copy of the record of discharge. In the post-WWII era, this means the DD-214, but other forms were used before that. The DD-214 provides a decent summary of the service, any awards received, and employment information. Occasionally, large portions of the OMPF will be copied in this file, and it's very common to at least have a handful of pages of the OMPF be present.</p><p>The bulk of the file is often fairly mundane, and concerns financial calculations of benefits, but these files are lengthy. While they are sometimes only a dozen pages or so, <strong>the majority of the claims files are 100-400 pages long</strong>, so even if 90% is banal, the remaining 10% can still be substantial. The photos and scans included at the top of this website, with their diverse and sometimes very interesting material, all came from papers provided in previous FOIA requests for these types of C-Files.</p><p>It is absolutely worth submitting a FOIA request to the VBA for any veteran who is a research interest - even if they don't appear in the VAMI cards or the BIRLS database (although that probably indicates there is no file). After all, merely submitting a FOIA request is free!</p></div><div><h3>Why Are Almost All Claim Files Still Held at the VA and not at NARA?</h3><p>Considering how historic and unique and massive these files are, one may wonder why they are languishing at the VA. This is going to change, but not anytime soon.</p><p>In 2010, the VA and NARA signed a disposition agreement, memorialized by the Standard Form (SF) 115, which states that the VA will send retired boxes to FRCs annually, and that sixty years from the date of retirement, the boxes will transfer into NARA's custody, who could then serve the boxes to patrons at NARA. And in fact, tens of thousands of cubic feet have transferred. For the files that have not, access is supposed to be granted via the VA, although anecdotal evidence suggests that NARA has informally facilitated access to these files as well.</p><p><strong>For now, it's best to assume that any desired file is still in the custody of the VA</strong>, as the files that NARA legally controls represent less than 5% of the total. As time goes on, more accession with move to NARA, but because NARA does not have a complete index of their holdings, they are not able to make these readily available. The only way to know who has it, is to specifically ask.</p></div><div><h3>What to do if you can't find a veteran's name in the BIRLS database</h3><p>The BIRLS database is  a comprehensive database of all American veterans, but rather a partial and incomplete index of veterans who were eligible for VA benefits or whose heirs had some kind of contact with the VA regarding benefits. Furthermore, the version of the BIRLS database on this website only includes the names of people who were  to the VA to have been deceased at the time when Reclaim The Records won their FOIA lawsuit in 2020, with the subset of the database being exported and turned over in mid-2022.</p><p>That being said, almost all veterans who served in the late nineteenth or twentieth centuries probably do (or did) have  of claims file stored with the VA, likely in one (or more) of their warehouses, and that file may simply have never been indexed for inclusion in BIRLS. <strong>This is especially likely if the veteran (or their heirs) had no contact with the VA after the database first started being compiled and computerized in the 1980s.</strong></p><p>If you cannot find a known-deceased military veteran's name or information in the BIRLS database, but you still want to  to get a copy of their full claims file, there are a few steps you can take to try to get the VA to dig deeper and attempt to locate their records. It may not be as successful as a standard FOIA request based on known-extant BIRLS data, but it's still worth a shot. And in any case, it's free!</p><p>Note that for these types of \"build your own FOIA request\" cases, where a veteran's name was never included in the BIRLS database (or at least not in the public version), the VA will need to do a more thorough search of their records to try to locate any surviving materials, and it may take many more months to receive a response. If they eventually tell you that they are unable to find any files, then you can (and should) file a free FOIA appeal with the VA's Office of General Counsel at this email address: <a href=\"https://www.birls.org/cdn-cgi/l/email-protection#c9a6aeaaafa6a0a8a8b9b9aca8a5ba89bfa8e7aea6bf\"></a>. The Appeals Officer can instruct the VBA to re-run the search for you, or else explain more specifically why they believe the veteran's file truly is no longer extant.</p><p>Examples of some famous deceased American military veterans (most of whom served in WWII or later) who are  listed in the BIRLS database include Humphrey Bogart, Yogi Berra, Woody Guthrie, Stan Lee, Henry Fonda, Jackie Robinson, Buddy Hackett, Jack Kerouac, Herman Wouk, Carroll O'Connor, Ralph Ellison, Harlan Ellison, Haskell Wexler, Peter Falk, James Garner, Lenny Bruce, and Kirk Douglas.</p><p>(FOIA requests asking for copies of the C-Files for all of these veterans are currently in progress. 😉)</p></div>","contentLength":20197,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42680048"},{"title":"Show HN: Doom (1993) in a PDF","url":"https://doompdf.pages.dev/doom.pdf","date":1736729443,"author":"vk6","guid":137,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42678754"},{"title":"Show HN: A daily digest for reMarkable","url":"https://digest.ferrucc.io/","date":1736692334,"author":"0xferruccio","guid":136,"unread":true,"content":"<!DOCTYPE html>","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=42673790"}]}