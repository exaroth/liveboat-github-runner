{"id":"82kPqomaPXmNomrHzpZWfbkQxiiNUBTAYKxHR5qZBEpf","title":"Hacker News: Show HN","displayTitle":"HN Show","url":"https://hnrss.org/show?points=60","feedLink":"https://news.ycombinator.com/shownew","isQuery":false,"isEmpty":false,"isHidden":false,"itemCount":18,"items":[{"title":"Show HN: Undercutf1 – F1 Live Timing TUI with Driver Tracker, Variable Delay","url":"https://github.com/JustAman62/undercut-f1","date":1745049036,"author":"deltaknight","guid":197,"unread":true,"content":"<p>undercutf1 is a F1 live timing app, built as a TUI. It contains traditional timing pages like a Driver Tracker, Timing Tower, Race Control, along with some more detailed analysis like lap and gap history, so that you can see strategies unfolding.</p><p>I started to build undercutf1 almost two years ago, after becoming increasingly frustrated with the TV direction and lack of detailed information coming out of the live feed. Overtakes were often missed and strategies were often ill-explained or missed. I discovered that F1 live timing data is available over a simple SignalR stream, so I set out building an app that would let me see all the information I could dream of. Now undercutf1 serves as the perfect companion (like a second Martin Brundle) when I'm watching the sessions live.</p><p>If you want to test it out, you replay the Suzuka race easily by downloading the timing data, then starting a simulated session:</p><p>1. Download undercutf1 using the installation instructions in the README.</p><p>2. Import the Suzuka race session data using `undercutf1 import 2025 -m 1256 -s 10006`.</p><p>3. Start the app (`undercutf1`) then press S (Session) then F (Simulated Session), then select Suzuka then Race using the arrow keys, then press Enter.</p><p>4. Use arrow keys to navigate between the timing pages, and use N / Shift+N to fast-forward through the session.</p><p>If you want to test it out during this weekends Jeddah GP, simply install as in the README then start a live session by pressing S (Session) then L (Live Session).</p><p>The app is built for a terminal of roughly 110x30 cells, which probably seems an odd size but just so happens to be the size of a fullscreen terminal on a MBP zoomed in far enough that the text is easily glanceable when the laptop is placed on a coffee table some distance away from me :) Other terminal sizes will work fine, but information density/scaling may not be ideal.</p><p>If you're using the TUI during a live session, you'll want to synchronise the delay of the timing feed to your TV feed. Use the N/M keys to increase/decrease the delay. During non-race session, I find it fairly easy to sync the session clock on TV with the session clock on the bottom left of the timing screen. For race sessions, synchronisation is a little harder. I usually aim to sync the start of the race time (e.g. 13:00 on the timing screen clock) with the start of the formation lap, where the live feed helpfully shows the clock tick over to 0 minutes. I usually delay the feed by 30 to 60 seconds.</p>","contentLength":2481,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43734910"},{"title":"Show HN: Goldbach Conjecture up to 4*10^18+7*10^13","url":"https://medium.com/@jay_gridbach/grid-computing-shatters-world-record-for-goldbach-conjecture-verification-1ef3dc58a38d","date":1745043097,"author":"jay_gridbach","guid":196,"unread":true,"content":"<div><h2>A new challenge to a 280-year-old unsolved mathematical problem</h2></div><p>I’ve achieved a new world record in verifying the Goldbach Conjecture, a famous unsolved problem in mathematics, by extending the verification up to 4 quintillion (4×10¹⁸) + 70 trillion (7×10¹³). This article introduces Gridbach, the grid computing system I developed for this computation.</p><p>Check out my live grid computing system here:<a href=\"https://gridbach.com\" rel=\"noopener ugc nofollow\" target=\"_blank\">https://gridbach.com</a></p><p>No login is required. You can immediately see the computation results on both PC and mobile.</p><p>I am @jay_gridbach, a freelance engineer and consultant based in Kanagawa, Japan. Currently, I work as a PreSales engineer at a company in Tokyo, while also developing web applications and my own services. Gridbach is a project I’ve been nurturing since my corporate days, and I’m thrilled to release it in April 2025.</p><p>The <a href=\"https://en.wikipedia.org/wiki/Goldbach%27s_conjecture\" rel=\"noopener ugc nofollow\" target=\"_blank\">Goldbach Conjecture</a>, proposed by Prussian mathematician Christian Goldbach in 1742, remains an unsolved problem in mathematics. Despite the efforts of numerous modern mathematicians, no one has proven it mathematically. The conjecture itself is simple enough for a middle school student to understand:</p><blockquote><p><em>“Every even natural number greater than 2 is the sum of two prime numbers”</em></p><p><em>4 = 2 + 26 = 3 + 3………<p>1000000000001092576 = 1913 + 1000000000001090663</p></em>…</p></blockquote><p>While it’s believed to be true, a mathematical proof for all even numbers is still elusive.</p><p>In 2013, T. Oliveira e Silva from Portugal verified the conjecture up to 4×10¹⁸ using computers. This was the previous world record.<a href=\"https://sweet.ua.pt/tos/goldbach.html\" rel=\"noopener ugc nofollow\" target=\"_blank\">https://sweet.ua.pt/tos/goldbach.html</a></p><p>My newly developed Gridbach system has slightly surpassed this record by adding 70 trillion to the verified range. I aim to push this further to 5 quintillion by increasing the number of participating machines and improving my algorithms. I’m not sure how to get this recognized as an official record, but I’m willing to write a paper if necessary. If anyone has insights on this, please let me know.</p><ul><li>Gridbach is a cloud-based distributed computing system accessible from any PC or smartphone.</li><li>It requires no login or app installation. The high-performance WASM (WebAssembly) binary code is downloaded as browser content, enabling computation on the user’s browser.</li><li>Each computation job covers a range of 100 million (50 million even numbers), taking about 5–10 seconds on a PC and 10–20 seconds on a smartphone.</li><li>Inspired by <a href=\"https://en.wikipedia.org/wiki/SETI@home\" rel=\"noopener ugc nofollow\" target=\"_blank\">SETI@home</a>, I’ve aimed to create a system that anyone can easily join.</li></ul><p>My system uses a combination of high-performance WASM for efficient computation and a highly scalable JAMStack architecture.</p><p>The challenges and lessons learned in choosing and setting up this stack are worth a separate post.</p><p>The app is simple, offering two main features: running computations on your machine and viewing the collective results from all Gridbach users. It’s also mobile-friendly.</p><p>For details on the dashboard data, please visit - <a href=\"https://app.gridbach.com/\" rel=\"noopener ugc nofollow\" target=\"_blank\">https://app.gridbach.com/</a></p><p>I define “Goldbach Ridge” as the maximum value of the smaller prime in the prime pairs satisfying the Goldbach Conjecture within a given range.</p><p>While T. Oliveira e Silva refers to these as the smaller prime  in the Goldbach partition, I named them as “ridge” as graphing these looks like mountain peaks and cols.</p><p>Oliveira e Silva al. discovered a large Goldbach ridge of 9781:</p><p>Feel free to join in and see if you can find some bigger peaks! So far, 6421 is the largest one found on my system. Your top 30 Goldbach Peaks are displayed on the My Calculation screen.</p><p>The core computation logic of mine is open-sourced as a Go command-line tool under the MIT license.<a href=\"https://github.com/nakatahr/gridbach-core\" rel=\"noopener ugc nofollow\" target=\"_blank\">https://github.com/nakatahr/gridbach-core</a></p><p>Here’s a snippet of the code. I’ve upgraded the Sieve of Eratosthenes to use bitwise operations on byte arrays for faster prime number generation, and optimized it for given ranges.</p><pre></pre><p>I also plan to write a separate article about the computation algorithm.</p><p>Thank you for reading! Please take 5 minutes to try the computation on <a href=\"https://gridbach.com\" rel=\"noopener ugc nofollow\" target=\"_blank\">gridbach.com</a>. I aim to continue breaking records and improving the system, hoping to spark interest in mathematics and IT.</p>","contentLength":4097,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43734583"},{"title":"Show HN: (bits) of a Libc, Optimized for Wasm","url":"https://github.com/ncruces/go-sqlite3/tree/main/sqlite3/libc","date":1744999585,"author":"ncruces","guid":195,"unread":true,"content":"<p>I make a no-CGO Go SQLite driver, by compiling the amalgamation to Wasm, then loading the result with wazero (a CGO-free Wasm runtime).</p><p>To compile SQLite, I use wasi-sdk, which uses wasi-libc, which is based on musl. It's been said that musl is slow(er than glibc), which is true, to a point.</p><p>musl uses SWAR on a size_t to implement various functions in string.h. This is fine, except size_t is just 32-bit on Wasm.</p><p>I found that implementing a few of those functions with Wasm SIMD128 can make them go around 4x faster.</p><p>Other functions don't even use SWAR; redoing  can make them 16x faster.</p><p>Smooth sort also has trouble pulling its own weight; a Shell sort seems both simpler and faster, while similarly avoiding recursion, allocations and the addressable stack.</p><p>I found that using SIMD intrinsics (rather than SWAR) makes it easier to avoid UB, but the code would definitely benefit from more eyeballs.</p>","contentLength":898,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43730458"},{"title":"Show HN: I made a Doom-like game fit inside a QR code","url":"https://github.com/Kuberwastaken/backdooms","date":1744994425,"author":"kuberwastaken","guid":194,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43729683"},{"title":"Show HN: Attune - Build and publish APT repositories in seconds","url":"https://github.com/attunehq/attune","date":1744992858,"author":"ilikebits","guid":193,"unread":true,"content":"<p>Hey HN, we're Eliza and Xin, and we’ve been working on Attune. Attune is a tool for publishing Linux packages.</p><p>Previously, we worked at other startups building open source developer tools that ran on our customers’ CI and development machines. For many of them, being able to `apt-get install` our tools was a requirement.</p><p>When we went to actually set up APT repositories, we were really surprised by the state of tooling around package publishing. The open source tools we found were old, slow, and difficult to figure out how to run in CI. The commercial tools we found were not much better. The cloud-hosted vendors required us to provide our signing keys to a cloud vendor (which was a non-starter), while the self-hosted vendors required us to operate our own specialized hosting servers.</p><p>We just wanted something simple: sign locally, run quickly, be easy to use, and deploy to managed object storage.</p><p>We couldn’t find it, so we built it. If you want to try it out, you can create a repository with three commands:</p><pre><code>    attune repo create --uri https://apt.releases.example.com\n    attune repo pkg add --repo-id 123 package.deb\n    attune repo sync --repo-id 123\n</code></pre>\nYou can get the tool at <a href=\"https://github.com/attunehq/attune\">https://github.com/attunehq/attune</a>. There are a lot of rough edges right now since it's so new - sorry in advance, we're working on sanding those down.<p>It’s fully open source under Apache 2. We’re also working with some early customers to build enterprise features like audit logging, RBAC, and HSM integrations, and we’re thinking about building a managed cloud hosting service as well.</p><p>We’d love your feedback on whether this is useful for you, and what you’d like to see next. We’re well aware that publishing is a small piece of CI/CD, but we think a lot of the tooling in this area (publishing, artifact registries, package repositories) could really use some love.</p><p>What do you think? Comment here, or email us at founders@attunehq.com.</p>","contentLength":1944,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43729427"},{"title":"Show HN: AgentAPI – HTTP API for Claude Code, Goose, Aider, and Codex","url":"https://github.com/coder/agentapi","date":1744908898,"author":"hugodutka","guid":192,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43719447"},{"title":"Show HN: Plandex v2 – open source AI coding agent for large projects and tasks","url":"https://github.com/plandex-ai/plandex","date":1744838802,"author":"danenania","guid":191,"unread":true,"content":"<p>Hey HN! I’m Dane, the creator of Plandex (<a href=\"https://github.com/plandex-ai/plandex\">https://github.com/plandex-ai/plandex</a>), an open source AI coding agent focused especially on tackling large tasks in real world software projects.</p><p>Now I’m launching a major update, Plandex v2, which is the result of 8 months of heads down work, and is in effect a whole new project/product.</p><p>In short, Plandex is now a top-tier coding agent with fully autonomous capabilities. It combines models from Anthropic, OpenAI, and Google to achieve better results, more reliable agent behavior, better cost efficiency, and better performance than is possible by using only a single provider’s models.</p><p>I believe it is now one of the best tools available for working on large tasks in real world codebases with AI. It has an effective context window of 2M tokens, and can index projects of 20M tokens and beyond using tree-sitter project maps (30+ languages are supported). It can effectively find relevant context in massive million-line projects like SQLite, Redis, and Git.</p><p>A bit more on some of Plandex’s key features:</p><p>- Plandex has a built-in diff review sandbox that helps you get the benefits of AI without leaving behind a mess in your project. By default, all changes accumulate in the sandbox until you approve them. The sandbox is version-controlled. You can rewind it to any previous point, and you can also create branches to try out alternative approaches.</p><p>- It offers a ‘full auto mode’ that can complete large tasks autonomously end-to-end, including high level planning, context loading, detailed planning, implementation, command execution (for dependencies, builds, tests, etc.), and debugging.</p><p>- The autonomy level is highly configurable. You can move up and down the ladder of autonomy depending on the task, your comfort level, and how you weigh cost optimization vs. effort and results.</p><p>- Models and model settings are also very configurable. There are built-in models and model packs for different use cases. You can also add custom models and model packs, and customize model settings like temperature or top-p. All model changes are version controlled, so you can use branches to try out the same task with different models. The newly released OpenAI models and the paid Gemini 2.5 Pro model will be integrated in the default model pack soon.</p><p>- It can be easily self-hosted, including a ‘local mode’ for a very fast local single-user setup with Docker.</p><p>- Cloud hosting is also available for added convenience with a couple of subscription tiers: an ‘Integrated Models’ mode that requires no other accounts or API keys and allows you to manage billing/budgeting/spending alerts and track usage centrally, and a ‘BYO API Key’ mode that allows you to use your own OpenAI/OpenRouter accounts.</p><p>And of course I’d love to hear your feedback, whether positive or negative. Thanks so much!</p>","contentLength":2853,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43710576"},{"title":"Show HN: We Put Chromium on a Unikernel (OSS Apache 2.0)","url":"https://github.com/onkernel/kernel-images","date":1744809586,"author":"juecd","guid":190,"unread":true,"content":"<p>We’ve been building infrastructure to spin up browsers for AI agents. Originally, we built[0] it as a pool of warm Docker containers running Chromium, exposing:</p><p>- Chrome DevTools Protocol (for Playwright/Puppeteer)</p><p>We’ve been following the unikernel space for a while, so we decided to see if we could get our image on one. We went with Unikraft Cloud[1]. Here’s how it did:</p><p>- Boot-up time: 10–20ms (vs. ~5s for Docker containers)</p><p>- Near 0 CPU/memory consumption when idle</p><p>- Still ~8GB RAM when active (headful Chromium)</p><p>- Standby mode during long-running jobs: unikernels can sleep after X sec of inactivity, reducing clock time costs</p><p>- Session reuse: auth/session cookies persist for hours/days. Basically as long as the cookies are valid</p><p>- Cold start speed: good for low-latency, event-based handling</p><p>We open sourced it with Apache 2.0! Feel free to fork or submit an issue / PR. Open to feedback or suggestions. www.github.com/onkernel/kernel-images</p><p>[2] Thanks to the Unikraft Cloud team @fhuici @nderjung @razvandeax for helping us figure this out (we're not affiliated)</p><p>[3] (OPs) @rgarcia @juecd</p>","contentLength":1098,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43705144"},{"title":"Show HN: Torque – A lightweight meta-assembler for any processor","url":"https://benbridle.com/projects/torque.html","date":1744753605,"author":"benbridle","guid":189,"unread":true,"content":"<p>Torque is a lightweight meta-assembler that provides the tools necessary to write programs for any processor architecture.</p><p>For a quick overview of the language, either read the <a href=\"https://benbridle.com/projects/torque/manual-v2.2.0.html#language-overview\">language overview</a> section of the manual, see <a href=\"https://benbridle.com/articles/torque-programming-the-pic10f200.html#bringing-it-all-together\">this example</a> of a completed program, or skim one of the following hands-on tutorials:</p><p>For a demonstration of how to write high-level optimising macros in Torque, see:</p><p>Existing assemblers for embedded processors suffer from a number of issues. These assemblers tend to be poorly documented, provide languages that are clunky and verbose, be bloated and difficult to operate, and work only on one operating system. Development of C compilers is often a higher priority than the development of good assemblers.</p><p>Instead of learning a new assembler for every embedded processor, it would be preferrable to instead use a single general-purpose assembler for every project. Torque was created to fill this niche.</p><p>Torque is designed around the idea that any assembly language can be emulated with just integers, bit sequences, labels, and sufficiently powerful macros. With Torque, the instruction encoding for a target processor can be defined as a set of macros in the program itself, using templates to specify how values are packed into ranges of bits. A program can be written for any processor using only Torque and the datasheet for that processor.</p><p>The latest release is available at <a href=\"https://benbridle.com/releases/tq-2.3.0\">tq-2.3.0</a> as a pre-compiled Linux executable.</p><p>To build the Torque assembler from source, first install the Rust compiler from <a href=\"https://www.rust-lang.org/tools/install\">www.rust-lang.org/tools/install</a>, then install the nightly toolchain with <code>rustup toolchain install nightly</code>, and then run <code>cargo +nightly build --release</code> inside the  source code directory.</p><p>The compiled binary will be created at .</p><p>The following command will assemble the Torque source file  and save the assembled output to the file  in the chosen format.</p><pre>tq [source] [destination] --format=&lt;format&gt;\n</pre><ul><li><a href=\"https://benbridle.com/projects/torque/manual-v2.2.0.html\">Manual v2.2.0</a> The full user manual for version 2.2.0 of the language and assembler.</li></ul><p>Torque is licensed under the <a href=\"https://en.wikipedia.org/wiki/MIT_License\">MIT License</a>. Feel free to use it, change it, and share it however you want.</p>","contentLength":2103,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43698801"},{"title":"Show HN: Resonate – real-time high temporal resolution spectral analysis","url":"https://alexandrefrancois.org/Resonate/","date":1744730773,"author":"arjf","guid":188,"unread":true,"content":"<p>Resonate builds on a resonator model that accumulates the signal contribution around its resonant frequency in the time domain using the Exponentially Weighted Moving Average (EWMA), also known as a low-pass filter in signal processing. Consistently with on-line perceptual signal analysis, the EWMA gives more weight to recent input values, whereas the contributions of older values decay exponentially.\nA compact, iterative formulation of the model affords computing an update at each signal input sample, requiring no buffering and involving only a handful of arithmetic operations.</p><p>Each resonator, characterized by its resonant frequency \\(f = \\frac{\\omega}{2\\pi}\\), is described by a complex number \\(R\\) whose amplitude captures the contribution of the input signal component around frequency \\(f\\).\nThe formulas below capture the recursive update for \\(R\\) by way of a phasor \\(P\\), applied for each sample \\(x\\) of a real-valued input signal \\(x(t) \\in [-1,1]\\), regularly sampled at sampling rate \\(sr\\). \\(\\Delta t=1/sr\\) is the sample duration, and \\(\\alpha \\in [0,1]\\) is a constant parameter that dictates how much each new measurement affects the accumulated value.</p>\n\n\\[P \\leftarrow P e^{-i \\omega \\Delta t}\\]\n\n\\[R \\leftarrow (1-\\alpha) R + \\alpha x P\\]\n\n<p>The two complex numbers \\(P\\) and \\(R\\) capture the full state of the resonator. Updating the state at each input signal sample only requires a handful of arithmetic operations. Calculating the power and/or magnitude is not necessary for the update, and can be carried out only when required by the application, relatively efficiently as well.\nThe single parameter \\(\\alpha\\), which can be related to a time constant, governs the dynamics of the system. For the frequency range of interest in audio applications (20-20000 Hz), the function \\(\\alpha_f = 1-e^{-\\Delta t\\frac{f}{log(1+f)} }\\) is a reasonable heuristic.\nThe smoothed state \\(\\tilde{R}\\) is produced by applying the EMWA to \\(R\\) with the same \\(\\alpha\\) to dampen power and phase oscillations.\nFinally, the output of each resonator is optionally normalized by the total response across the bank to a step signal of the resonator’s frequency (equalization).</p><p>Banks of resonators, independently tuned to perceptually relevant frequency scales, compute an instantaneous, perceptually relevant estimate of the spectral content of an input signal in real-time.\nBoth memory and per-sample computational complexity of such a bank are linear in the number of resonators, and independent of the number of input samples processed, or duration of processed signal.\nFurthermore, since the resonators are independent, there is no constraint on the tuning of their resonant frequencies or time constants, and all  computations can be parallelized across resonators.\nIn an offline processing context, the cumulative computational cost for a given duration increases linearly with the number of input samples processed.</p><p>Spectral information as a function of time is typically presented graphically for human consumption in the form of a spectrogram, in which the horizontal axis represents time and the vertical axis represents frequency. The value at each point represents the power of the frequency in the input signal at the given time slice. These values are usually normalized by the maximum value over the signal, and mapped to a logarithmic color scale to produce plots like those shown below.\nA Resonate oscillator bank with adequately tuned resonators computes an arbitrary frequency scale spectrogram directly and efficiently, with more relevant frequency resolution and much higher temporal resolutiont than FFT-based methods.</p><p>Alexandre R.J. François,\n“Resonate: Efficient Low Latency Spectral Analysis of Audio Signals,”\nto appear in Proceedings of the 50th Anniversary of the International Computer Music Conference 2025,\nBoston, MA, USA, 8-14 June 2025.</p><ul><li><p>The open source python module <a href=\"https://github.com/alexandrefrancois/noFFT\">noFFT</a> provides python and C++ implementations of Resonate functions and Jupyter notebooks illustrating their use in offline settings.</p></li></ul>","contentLength":4047,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43694157"},{"title":"Show HN: MCP-Shield – Detect security issues in MCP servers","url":"https://github.com/riseandignite/mcp-shield","date":1744694101,"author":"nick_wolf","guid":186,"unread":true,"content":"<p>I noticed the growing security concerns around MCP (<a href=\"https://news.ycombinator.com/item?id=43600192\">https://news.ycombinator.com/item?id=43600192</a>) and built an open source tool that can detect several patterns of tool poisoning attacks, exfiltration channels and cross-origin manipulations.</p><p>MCP-Shield scans your installed servers (Cursor, Claude Desktop, etc.) and shows what each tool is trying to do at the instruction level, beyond just the API surface. It catches hidden instructions that try to read sensitive files, shadow other tools' behavior, or exfiltrate data.</p><p>Example of what it detects:</p><p>- Hidden instructions attempting to access ~/.ssh/id_rsa</p><p>- Cross-origin manipulations between server that can redirect WhatsApp messages</p><p>- Tool shadowing that overrides behavior of other MCP tools</p><p>- Potential exfiltration channels through optional parameters</p><p>I've included clear examples of detection outputs in the README and multiple example vulnerabilities in the repo so you can see the kinds of things it catches.</p><p>This is an early version, but I'd appreciate feedback from the community, especially around detection patterns and false positives.</p>","contentLength":1095,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43689178"},{"title":"Show HN: Zero-codegen, no-compile TypeScript type inference from Protobufs","url":"https://github.com/nathanhleung/protobuf-ts-types","date":1744645263,"author":"18nleung","guid":185,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43682547"},{"title":"Show HN: ActorCore – Stateful serverless framework that runs anywhere","url":"https://github.com/rivet-gg/actor-core","date":1744642645,"author":"NathanFlurry","guid":184,"unread":true,"content":"<p>Hey HN! Today we're launching ActorCore (<a href=\"https://actorcore.org/\" rel=\"nofollow\">https://actorcore.org/</a>), a stateful serverless framework that enables deploying Cloudflare Durable Object-like workloads to any cloud.</p><p>If you're unfamiliar with stateful serverless: it's like the actor model, where each actor maintains its own isolated, persistent state. (Think Lambda functions with local storage &amp; runs indefinitely.) It enables easily building long-running, realtime, durable, or local-first backends with the flexibility of serverless infrastructure. The most widely used implementation is Cloudflare Durable Objects, powering products like Clerk, Tldraw, Liveblocks, and Playroom.</p><p>- Vendor lock-in: Developers are hesitant to adopt a new programming model if there's no clear off-ramp. While it's straightforward to migrate a Postgres database, stateful serverless platforms can feel locked-in due to lack of viable alternatives.</p><p>- Ecosystem: Choosing a well-known database like Postgres comes with a mature ecosystem. Adopting a new model means rebuilding tooling and patterns from scratch.</p><p>- Conceptual gap: Many developers have spent their entire careers designing systems with intentionally separated state and compute. A model that merges the two can feel backwards at first.</p><p>We realized the best solution was to build a stateful serverless framework that can (a) be portable across clouds and (b) be easily extended – similar to how Hono created a unified API for traditional serverless functions across different providers. Thus, ActorCore was born.</p><p>Today, ActorCore supports running stateful serverless on Rivet Actors, Cloudflare Durable Objects, Redis, and standalone Node.js/Bun. The most common use cases include applications using collaborative, AI agent, local-first, and per-tenant database features.</p><p>State in ActorCore is an in-memory JavaScript object, with SQLite support coming later this month. State is stored in memory near your users on the edge, removing database round trips and minimizing latency due to physical distance. Additionally, state writes have tunable consistency, which enables both fully durable compute workloads and high-frequency state updates.</p><p>You may have noticed that this still leaves concern #3: the conceptual gap. While this isn't something we can solve with a framework, I've been spending ~40% of my time working on docs, content, and examples to help resolve this. ActorCore is also turning out to be community-driven as hoped, which enables more people to try and share their experience with stateful serverless.</p><p>We'd love it if you'd give ActorCore a try, read the roadmap, and/or let us know where we can improve anything. If you're hesitant about trying stateful serverless, I'd love to learn more in the comments. Looking forward to feedback!</p>","contentLength":2755,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43682030"},{"title":"Show HN: Single-Header Profiler for C++17","url":"https://github.com/DmitriBogdanov/UTL/blob/master/docs/module_profiler.md","date":1744632963,"author":"GeorgeHaldane","guid":183,"unread":true,"content":"<p>I often found myself wondering \"how much does this code segment take in terms of total runtime\" and it's often quite annoying to figure out with optimizations enabled, especially when working on something new or testing someone else's implementation without the proper tooling set up. Wanted to have a single include lib that would allow us to write something like:</p><p>```\nPROFILE(\"Loop 1\")\nfor (...) // some work\n```</p><p>and have the next expression automatically record time &amp; dump results to a table. Wrote a few macros to do exactly that a few months back, but they were primitive and basically unusable for recursive code.</p><p>Tried to come up with a more generic solution that would build a call graph for nested profiler-macros, handle threads and etc. but doing so in a naive way would be super slow since we'd need some kind of a recursive map of nodes with callsites as a keys.</p><p>Recently had a revelation that it is possible to use macro-generated thread_local's to associate callsites with integer IDs on the fly and with some effort call graph can be neatly encoded in a few contiguous arrays with all graph building &amp; traversal logic reduced to simple checks and array lookups. Realized threading can be quite easily supported too in an almost lock-free fashion.</p><p>After a few days of effort ended up building what I believe is a very much usable single-header profiling lib. Couldn't find anything quite like it, so I'd like to present it here and hear some opinions on the product:</p>","contentLength":1477,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43680477"},{"title":"Show HN: Resurrecting Infocom's Unix Z-Machine with Cosmopolitan","url":"https://christopherdrum.github.io/posts/2025/04/porting-infocom-with-cosmo","date":1744602715,"author":"ChristopherDrum","guid":182,"unread":true,"content":"<p>I recently brought Infocom's original UNIX z-machine source code back to life on modern systems. The modified source code, instructions on usage, a build of the z-machine, and examples of embedded game executables are available.</p><p>There is also a detailed write-up about the state of the original source code, the porting process, and the invaluable role Justine Tunney's Cosmpolitan project played in bringing the Zork trilogy (and more) to Windows/Mac/Linux/bsd for arm/x86 machines over the course of a lazy Sunday.</p>","contentLength":515,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43677909"},{"title":"Show HN: Nissan's Leaf app doesn't have a home screen widget so I made my own","url":"https://kevintechnology.com/posts/leaf-widget/","date":1744598547,"author":"kcon","guid":181,"unread":true,"content":"<blockquote><p>lets you manage the unique features of your LEAF like charging the battery, adjusting climate controls and checking the battery status, all from your mobile device</p></blockquote><p>Here is a screenshot of what it looks like for my car:</p><p>The app is…fine. Here is one representative review from the <a href=\"https://apps.apple.com/us/app/nissanconnect-ev-services/id407814405?see-all=reviews\" target=\"_blank\">Apple App Store</a>:</p><p>My main issue with the app is that it lacks a home screen widget I could use to quickly check my car’s battery status, unlike apps for other electric car brands like <a href=\"https://riviantrackr.com/news/rivian-release-mobile-app-2-8-0-update/\" target=\"_blank\">Rivian</a>, <a href=\"https://9to5mac.com/2024/11/12/fordpass-control-center-home-screen-widget/\" target=\"_blank\">Ford</a>, and <a href=\"https://apps.apple.com/us/app/lucid-motors/id1579793272\" target=\"_blank\">Lucid</a>.</p><p>Meanwhile, others have developed their own Nissan LEAF apps with a custom user interface and additional features (some with a home screen widget!):</p><p>Unfortunately, I understand that none of these apps are still available to use where I live in North America. 😞</p><p>The developer of “My Leaf” <a href=\"https://tobis.dk/blog/the-farce-of-nissanconnect-north-america/\" target=\"_blank\">shared his frustration in a blog post</a>, explaining how Nissan’s deliberate changes to their North American API forced him to discontinue support for users in the region:</p><blockquote><p>I simply won’t support it any longer because of Nissan of North America’s persistant work on blocking third party clients. I continued to try and support the API during the last 12 months. Playing cat and mouse with Nissan. I simply don’t have the time and honestly the drive to continue when I know Nissan are consistently trying to break third party clients on purpose. It’s a sad and foolishness reality indeed.</p></blockquote><p>Nevertheless, I decided to take on the challenge of developing an iPhone home screen widget that could show me the battery charge status of my Nissan LEAF car.</p><p>I added one more constraint to the project: no spending money. I believe Nissan’s app should already provide a home screen widget, so it didn’t seem fair to have to spend any money on this project. However, using tools/devices I already had access to was fair game.</p><p>Notably, that ruled out using something like <a href=\"https://sidecar.clutch.engineering/\" target=\"_blank\">Sidecar</a> which appears to provide a home screen widget. I think it looks very slick, but it requires the purchase of a wireless <a href=\"https://en.wikipedia.org/wiki/On-board_diagnostics\" target=\"_blank\">On-board Diagnostics (OBD)</a> scanner plus a $6.99 USD/month subscription. 😓</p><p>It also ruled out using the popular <a href=\"https://apps.apple.com/us/app/leafspy-pro/id967376861\" target=\"_blank\">LeafSpyPro app</a> which similarly requires the purchase of a wireless OBD scanner and costs $19.99 USD. To my knowledge, it doesn’t provide a home screen widget itself, but I think you could probably develop one using its data syncing feature.</p><p>I am happy to report I was successful and spent no money! Here is a screenshot of the widget:</p><p>And if you tap the widget, it opens the NissanConnect app. You’ll notice in the following video that there are a few extra non-ideal screen transitions (more on that below), but hey, you get what you pay for!</p><p>To reduce the risk of any API-breaking changes, I’m just using the official NissanConnect app without any modifications:</p><p>The  field contains a <a href=\"https://tinyurl.com/\" target=\"_blank\">TinyURL</a> that redirects to <code>shortcuts://run-shortcut?name=OpenNissanConnect</code> which uses the <a href=\"https://support.apple.com/guide/shortcuts/run-a-shortcut-from-a-url-apd624386f42/ios\" target=\"_blank\">Shortcuts URL scheme</a> to run the Apple Shortcut from (3). I did this because IFTTT seems to check that the  you provide actually resolves to a valid web URL; otherwise, the IFTTT website just opens and displays an error when you tap on the widget.</p><p>The NissanConnect app developers could definitely make changes that would break how this widget works, but those changes would by definition probably negatively affect regular human users too which I hope they would want to avoid.</p><p>My original plan was to <a href=\"https://github.com/ReactiveCircus/android-emulator-runner\" target=\"_blank\">run an Android emulator on the GitHub Actions runner in the cloud</a> so I wouldn’t need to maintain my own Android device, and that  works (in fact, it does work on my M3 Apple Silicon macOS laptop using an  Android emulator), but it seems like the NissanConnect app (or maybe the server it connects to) may detect when  Android is being used and then refuse to sign in. Or at least, I always saw the following error when I tried both in the cloud and on an old  laptop I had:</p><p>And unfortunately, at the time of writing, I understand:</p><p>…or I might trade in my Nissan LEAF and get a different electric car with a better app experience before that happens. 😅</p>","contentLength":4017,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43677610"},{"title":"Show HN: I made a free tool that analyzes SEC filings and posts detailed reports","url":"https://www.signalbloom.ai/news/","date":1744572804,"author":"GodelNumbering","guid":180,"unread":true,"content":"<p>We use cookies solely to understand how our site is used and to improve your experience. Your data is never shared or sold. <a href=\"https://www.signalbloom.ai/privacy-policy\">Learn More</a>.</p>","contentLength":135,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43675248"},{"title":"Show HN: memEx, a personal knowledge base inspired by zettlekasten and org-mode","url":"https://gitea.bubbletea.dev/shibao/memex","date":1744484546,"author":"shibaobun","guid":179,"unread":true,"content":"<!DOCTYPE html>","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43667061"}],"tags":["dev","hn"]}